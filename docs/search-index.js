crystal_doc_search_index_callback({"repository_name":"cryomongo","body":"# cryomongo\n\n### A pure Crystal MongoDB driver.\n\nA dependencies-free MongoDB driver written in pure Crystal.\n\n**Compatible MongoDB versions: 3.6+**\n\n### Work in progress!\n\n![Working…](https://media.giphy.com/media/o0vwzuFwCGAFO/giphy.gif)\n\n**Implemented**\n\n- https://github.com/mongodb/specifications/tree/master/source/message\n- https://github.com/mongodb/specifications/tree/master/source/crud\n- https://github.com/mongodb/specifications/blob/master/source/find_getmore_killcursors_commands.rst\n- https://github.com/mongodb/specifications/blob/master/source/driver-bulk-update.rst\n- https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst\n- https://github.com/mongodb/specifications/blob/master/source/enumerate-collections.rst\n- https://github.com/mongodb/specifications/blob/master/source/enumerate-databases.rst\n- https://github.com/mongodb/specifications/blob/master/source/enumerate-indexes.rst\n- https://github.com/mongodb/specifications/tree/master/source/connection-string\n- https://github.com/mongodb/specifications/tree/master/source/uri-options (except validation)\n- https://github.com/mongodb/specifications/tree/master/source/server-discovery-and-monitoring\n- https://github.com/mongodb/specifications/blob/master/source/server-selection/server-selection.rst\n- https://github.com/mongodb/specifications/blob/master/source/max-staleness/max-staleness.rst\n- https://github.com/mongodb/specifications/tree/master/source/connection-monitoring-and-pooling (loosely - using the crystal-db pool)\n- https://github.com/mongodb/specifications/blob/master/source/auth/auth.rst (SHA1 / SHA256 only - without SASLprep)\n- https://github.com/mongodb/specifications/blob/master/source/index-management.rst (no IndexView fluid syntax)\n- https://github.com/mongodb/specifications/tree/master/source/gridfs\n- https://github.com/mongodb/specifications/tree/master/source/change-streams\n\n**Next**\n\n- https://github.com/mongodb/specifications/tree/master/source/causal-consistency\n- https://github.com/mongodb/specifications/blob/master/source/sessions/driver-sessions.rst\n- https://github.com/mongodb/specifications/blob/master/source/retryable-reads/retryable-reads.rst\n- https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.rst\n- https://github.com/mongodb/specifications/tree/master/source/transactions\n- https://github.com/mongodb/specifications/tree/master/source/command-monitoring\n- https://github.com/mongodb/specifications/tree/master/source/compression\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n```yaml\ndependencies:\n  mongo:\n    github: elbywan/cryomongo\n```\n\n2. Run `shards install`\n\n## Usage\n\n```crystal\nrequire \"cryomongo\"\n\nclient = Mongo::Client.new(\"mongodb://localhost:27017\")\ndatabase = client[\"database_name\"]\ncollection = database[\"collection_name\"]\n\ncollection.insert_one({ one: 1 })\ncollection.replace_one({ one: 1 }, { two: 2 })\nbson = collection.find_one({ two: 2 })\nputs bson.not_nil!.[\"two\"] # => 2\ncollection.delete_one({ two: 2 })\nputs collection.count_documents # => 0\n```\n\nTODO: Write usage instructions here\n\n## Development\n\nTODO: Write development instructions here\n\n## Contributing\n\n1. Fork it (<https://github.com/elbywan/cryomongo/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [elbywan](https://github.com/elbywan) - creator and maintainer\n","program":{"html_id":"cryomongo/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"cryomongo/Mongo","path":"Mongo.html","kind":"module","full_name":"Mongo","name":"Mongo","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"Log","name":"Log","value":"::Log.for(self)","doc":null,"summary":null},{"id":"VERSION","name":"VERSION","value":"\"0.1.0\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"The main Cryomongo module.","summary":"<p>The main Cryomongo module.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"cryomongo/Mongo/Bulk","path":"Mongo/Bulk.html","kind":"struct","full_name":"Mongo::Bulk","name":"Bulk","abstract":false,"superclass":{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cryomongo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo","kind":"module","full_name":"Mongo","name":"Mongo"},"doc":"A bulk operations builder.\n\n```\n# A Bulk instance can be obtained by calling `.bulk()` on a collection.\nbulk = collection.bulk(ordered: true)\n# Then, operations can be added…\n500.times { |idx|\n  bulk.insert_one({number: idx})\n  bulk.delete_many({number: {\"$lt\": 450}})\n}\n# …and they will be performed once the bulk gets executed.\nbulk_result = bulk.execute(write_concern: Mongo::WriteConcern.new(w: 1))\npp bulk_result\n```","summary":"<p>A bulk operations builder.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"collection:Mongo::Collection-instance-method","html_id":"collection:Mongo::Collection-instance-method","name":"collection","doc":"The target collection.","summary":"<p>The target collection.</p>","abstract":false,"args":[],"args_string":" : Mongo::Collection","source_link":null,"def":{"name":"collection","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Mongo::Collection","visibility":"Public","body":"@collection"}},{"id":"delete_many(filter,**options)-instance-method","html_id":"delete_many(filter,**options)-instance-method","name":"delete_many","doc":"Delete one or more documents.","summary":"<p>Delete one or more documents.</p>","abstract":false,"args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":""}],"args_string":"(filter, **options)","source_link":null,"def":{"name":"delete_many","args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@models << (DeleteMany.new(BSON.new(filter), **options))\nself\n"}},{"id":"delete_one(filter,**options)-instance-method","html_id":"delete_one(filter,**options)-instance-method","name":"delete_one","doc":"Delete a single document.","summary":"<p>Delete a single document.</p>","abstract":false,"args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":""}],"args_string":"(filter, **options)","source_link":null,"def":{"name":"delete_one","args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@models << (DeleteOne.new(BSON.new(filter), **options))\nself\n"}},{"id":"execute(write_concern:WriteConcern?=nil,bypass_document_validation:Bool?=nil)-instance-method","html_id":"execute(write_concern:WriteConcern?=nil,bypass_document_validation:Bool?=nil)-instance-method","name":"execute","doc":"Execute the bulk operations stored in this `Bulk` instance.","summary":"<p>Execute the bulk operations stored in this <code><a href=\"../Mongo/Bulk.html\">Bulk</a></code> instance.</p>","abstract":false,"args":[{"name":"write_concern","doc":null,"default_value":"nil","external_name":"write_concern","restriction":"WriteConcern | ::Nil"},{"name":"bypass_document_validation","doc":null,"default_value":"nil","external_name":"bypass_document_validation","restriction":"Bool | ::Nil"}],"args_string":"(write_concern : WriteConcern? = <span class=\"n\">nil</span>, bypass_document_validation : Bool? = <span class=\"n\">nil</span>)","source_link":null,"def":{"name":"execute","args":[{"name":"write_concern","doc":null,"default_value":"nil","external_name":"write_concern","restriction":"WriteConcern | ::Nil"},{"name":"bypass_document_validation","doc":null,"default_value":"nil","external_name":"bypass_document_validation","restriction":"Bool | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_, not_executed = @executed.compare_and_set(0_u8, 1_u8)\nif not_executed\nelse\n  raise(Mongo::Bulk::Error.new(\"Cannot execute a bulk operation more than once\"))\nend\noptions = {bypass_document_validation: bypass_document_validation, write_concern: write_concern}\nmodels = @models\nif @ordered\nelse\n  models.sort!\nend\ngroup_type = nil\ngroup = [] of BSON\ngroup_bytesize = 0\nindex_offset = 0\nresults = WriteResult.new\nmodels.each do |model|\n  if model.class != group_type\n    index_offset = process_group(group_type, group, results, index_offset, options)\n    if early_return?(results)\n      return results\n    end\n    group_type = model.class\n    group_bytesize = 0\n  end\n  bson = format_bson(model)\n  if (group_bytesize + bson.size) >= @max_bson_object_size || group.size >= @max_bson_object_size\n    index_offset = process_group(group_type, group, results, index_offset, options)\n    if early_return?(results)\n      return results\n    end\n    group_bytesize = 0\n  end\n  group << bson\n  group_bytesize = group_bytesize + bson.size\nend\nprocess_group(group_type, group, results, index_offset, options)\nresults\n"}},{"id":"insert_one(document)-instance-method","html_id":"insert_one(document)-instance-method","name":"insert_one","doc":"Insert a single document.","summary":"<p>Insert a single document.</p>","abstract":false,"args":[{"name":"document","doc":null,"default_value":"","external_name":"document","restriction":""}],"args_string":"(document)","source_link":null,"def":{"name":"insert_one","args":[{"name":"document","doc":null,"default_value":"","external_name":"document","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@models << (InsertOne.new(BSON.new(document)))\nself\n"}},{"id":"ordered:Bool-instance-method","html_id":"ordered:Bool-instance-method","name":"ordered","doc":"Whether the bulk is ordered.","summary":"<p>Whether the bulk is ordered.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":null,"def":{"name":"ordered","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@ordered"}},{"id":"replace_one(filter,replacement,**options)-instance-method","html_id":"replace_one(filter,replacement,**options)-instance-method","name":"replace_one","doc":"Replace one document.","summary":"<p>Replace one document.</p>","abstract":false,"args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":""},{"name":"replacement","doc":null,"default_value":"","external_name":"replacement","restriction":""}],"args_string":"(filter, replacement, **options)","source_link":null,"def":{"name":"replace_one","args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":""},{"name":"replacement","doc":null,"default_value":"","external_name":"replacement","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@models << (ReplaceOne.new(BSON.new(filter), BSON.new(replacement), **options))\nself\n"}},{"id":"update_many(filter,update,**options)-instance-method","html_id":"update_many(filter,update,**options)-instance-method","name":"update_many","doc":"Update many documents.","summary":"<p>Update many documents.</p>","abstract":false,"args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":""},{"name":"update","doc":null,"default_value":"","external_name":"update","restriction":""}],"args_string":"(filter, update, **options)","source_link":null,"def":{"name":"update_many","args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":""},{"name":"update","doc":null,"default_value":"","external_name":"update","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@models << (UpdateMany.new(BSON.new(filter), BSON.new(update), **options))\nself\n"}},{"id":"update_one(filter,update,**options)-instance-method","html_id":"update_one(filter,update,**options)-instance-method","name":"update_one","doc":"Update one document.","summary":"<p>Update one document.</p>","abstract":false,"args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":""},{"name":"update","doc":null,"default_value":"","external_name":"update","restriction":""}],"args_string":"(filter, update, **options)","source_link":null,"def":{"name":"update_one","args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":""},{"name":"update","doc":null,"default_value":"","external_name":"update","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@models << (UpdateOne.new(BSON.new(filter), BSON.new(update), **options))\nself\n"}}],"macros":[],"types":[{"html_id":"cryomongo/Mongo/Bulk/DeleteMany","path":"Mongo/Bulk/DeleteMany.html","kind":"struct","full_name":"Mongo::Bulk::DeleteMany","name":"DeleteMany","abstract":false,"superclass":{"html_id":"cryomongo/Mongo/Bulk/WriteModel","kind":"struct","full_name":"Mongo::Bulk::WriteModel","name":"WriteModel"},"ancestors":[{"html_id":"cryomongo/Mongo/Bulk/WriteModel","kind":"struct","full_name":"Mongo::Bulk::WriteModel","name":"WriteModel"},{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cryomongo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Bulk","kind":"struct","full_name":"Mongo::Bulk","name":"Bulk"},"doc":"Delete one or more documents.","summary":"<p>Delete one or more documents.</p>","class_methods":[],"constructors":[{"id":"new(filter,collation=nil,hint=nil)-class-method","html_id":"new(filter,collation=nil,hint=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":""},{"name":"collation","doc":null,"default_value":"nil","external_name":"collation","restriction":""},{"name":"hint","doc":null,"default_value":"nil","external_name":"hint","restriction":""}],"args_string":"(filter, collation = <span class=\"n\">nil</span>, hint = <span class=\"n\">nil</span>)","source_link":null,"def":{"name":"new","args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":""},{"name":"collation","doc":null,"default_value":"nil","external_name":"collation","restriction":""},{"name":"hint","doc":null,"default_value":"nil","external_name":"hint","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(filter, collation, hint)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"collation:Collation?-instance-method","html_id":"collation:Collation?-instance-method","name":"collation","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Collation?","source_link":null,"def":{"name":"collation","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Collation | ::Nil","visibility":"Public","body":"@collation"}},{"id":"filter:BSON-instance-method","html_id":"filter:BSON-instance-method","name":"filter","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON","source_link":null,"def":{"name":"filter","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON","visibility":"Public","body":"@filter"}},{"id":"hint:String|BSON|Nil-instance-method","html_id":"hint:String|BSON|Nil-instance-method","name":"hint","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String | BSON | Nil","source_link":null,"def":{"name":"hint","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | BSON | ::Nil","visibility":"Public","body":"@hint"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Bulk/DeleteOne","path":"Mongo/Bulk/DeleteOne.html","kind":"struct","full_name":"Mongo::Bulk::DeleteOne","name":"DeleteOne","abstract":false,"superclass":{"html_id":"cryomongo/Mongo/Bulk/WriteModel","kind":"struct","full_name":"Mongo::Bulk::WriteModel","name":"WriteModel"},"ancestors":[{"html_id":"cryomongo/Mongo/Bulk/WriteModel","kind":"struct","full_name":"Mongo::Bulk::WriteModel","name":"WriteModel"},{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cryomongo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Bulk","kind":"struct","full_name":"Mongo::Bulk","name":"Bulk"},"doc":"Delete one document.","summary":"<p>Delete one document.</p>","class_methods":[],"constructors":[{"id":"new(filter,collation=nil,hint=nil)-class-method","html_id":"new(filter,collation=nil,hint=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":""},{"name":"collation","doc":null,"default_value":"nil","external_name":"collation","restriction":""},{"name":"hint","doc":null,"default_value":"nil","external_name":"hint","restriction":""}],"args_string":"(filter, collation = <span class=\"n\">nil</span>, hint = <span class=\"n\">nil</span>)","source_link":null,"def":{"name":"new","args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":""},{"name":"collation","doc":null,"default_value":"nil","external_name":"collation","restriction":""},{"name":"hint","doc":null,"default_value":"nil","external_name":"hint","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(filter, collation, hint)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"collation:Collation?-instance-method","html_id":"collation:Collation?-instance-method","name":"collation","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Collation?","source_link":null,"def":{"name":"collation","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Collation | ::Nil","visibility":"Public","body":"@collation"}},{"id":"filter:BSON-instance-method","html_id":"filter:BSON-instance-method","name":"filter","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON","source_link":null,"def":{"name":"filter","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON","visibility":"Public","body":"@filter"}},{"id":"hint:String|BSON|Nil-instance-method","html_id":"hint:String|BSON|Nil-instance-method","name":"hint","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String | BSON | Nil","source_link":null,"def":{"name":"hint","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | BSON | ::Nil","visibility":"Public","body":"@hint"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Bulk/Error","path":"Mongo/Bulk/Error.html","kind":"class","full_name":"Mongo::Bulk::Error","name":"Error","abstract":false,"superclass":{"html_id":"cryomongo/Mongo/Error","kind":"class","full_name":"Mongo::Error","name":"Error"},"ancestors":[{"html_id":"cryomongo/Mongo/Error","kind":"class","full_name":"Mongo::Error","name":"Error"},{"html_id":"cryomongo/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"cryomongo/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Bulk","kind":"struct","full_name":"Mongo::Bulk","name":"Bulk"},"doc":"Is raised while trying to build or execute a bulk operation.","summary":"<p>Is raised while trying to build or execute a bulk operation.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Bulk/InsertOne","path":"Mongo/Bulk/InsertOne.html","kind":"struct","full_name":"Mongo::Bulk::InsertOne","name":"InsertOne","abstract":false,"superclass":{"html_id":"cryomongo/Mongo/Bulk/WriteModel","kind":"struct","full_name":"Mongo::Bulk::WriteModel","name":"WriteModel"},"ancestors":[{"html_id":"cryomongo/Mongo/Bulk/WriteModel","kind":"struct","full_name":"Mongo::Bulk::WriteModel","name":"WriteModel"},{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cryomongo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Bulk","kind":"struct","full_name":"Mongo::Bulk","name":"Bulk"},"doc":"Insert one document.","summary":"<p>Insert one document.</p>","class_methods":[],"constructors":[{"id":"new(document)-class-method","html_id":"new(document)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"document","doc":null,"default_value":"","external_name":"document","restriction":""}],"args_string":"(document)","source_link":null,"def":{"name":"new","args":[{"name":"document","doc":null,"default_value":"","external_name":"document","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(document)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"document:BSON-instance-method","html_id":"document:BSON-instance-method","name":"document","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON","source_link":null,"def":{"name":"document","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON","visibility":"Public","body":"@document"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Bulk/ReplaceOne","path":"Mongo/Bulk/ReplaceOne.html","kind":"struct","full_name":"Mongo::Bulk::ReplaceOne","name":"ReplaceOne","abstract":false,"superclass":{"html_id":"cryomongo/Mongo/Bulk/WriteModel","kind":"struct","full_name":"Mongo::Bulk::WriteModel","name":"WriteModel"},"ancestors":[{"html_id":"cryomongo/Mongo/Bulk/WriteModel","kind":"struct","full_name":"Mongo::Bulk::WriteModel","name":"WriteModel"},{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cryomongo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Bulk","kind":"struct","full_name":"Mongo::Bulk","name":"Bulk"},"doc":"Replace one document.","summary":"<p>Replace one document.</p>","class_methods":[],"constructors":[{"id":"new(filter,replacement,collation=nil,hint=nil,upsert=nil)-class-method","html_id":"new(filter,replacement,collation=nil,hint=nil,upsert=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":""},{"name":"replacement","doc":null,"default_value":"","external_name":"replacement","restriction":""},{"name":"collation","doc":null,"default_value":"nil","external_name":"collation","restriction":""},{"name":"hint","doc":null,"default_value":"nil","external_name":"hint","restriction":""},{"name":"upsert","doc":null,"default_value":"nil","external_name":"upsert","restriction":""}],"args_string":"(filter, replacement, collation = <span class=\"n\">nil</span>, hint = <span class=\"n\">nil</span>, upsert = <span class=\"n\">nil</span>)","source_link":null,"def":{"name":"new","args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":""},{"name":"replacement","doc":null,"default_value":"","external_name":"replacement","restriction":""},{"name":"collation","doc":null,"default_value":"nil","external_name":"collation","restriction":""},{"name":"hint","doc":null,"default_value":"nil","external_name":"hint","restriction":""},{"name":"upsert","doc":null,"default_value":"nil","external_name":"upsert","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(filter, replacement, collation, hint, upsert)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"collation:Collation?-instance-method","html_id":"collation:Collation?-instance-method","name":"collation","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Collation?","source_link":null,"def":{"name":"collation","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Collation | ::Nil","visibility":"Public","body":"@collation"}},{"id":"filter:BSON-instance-method","html_id":"filter:BSON-instance-method","name":"filter","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON","source_link":null,"def":{"name":"filter","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON","visibility":"Public","body":"@filter"}},{"id":"hint:String|BSON|Nil-instance-method","html_id":"hint:String|BSON|Nil-instance-method","name":"hint","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String | BSON | Nil","source_link":null,"def":{"name":"hint","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | BSON | ::Nil","visibility":"Public","body":"@hint"}},{"id":"replacement:BSON-instance-method","html_id":"replacement:BSON-instance-method","name":"replacement","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON","source_link":null,"def":{"name":"replacement","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON","visibility":"Public","body":"@replacement"}},{"id":"upsert:Bool?-instance-method","html_id":"upsert:Bool?-instance-method","name":"upsert","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool?","source_link":null,"def":{"name":"upsert","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool | ::Nil","visibility":"Public","body":"@upsert"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Bulk/UpdateMany","path":"Mongo/Bulk/UpdateMany.html","kind":"struct","full_name":"Mongo::Bulk::UpdateMany","name":"UpdateMany","abstract":false,"superclass":{"html_id":"cryomongo/Mongo/Bulk/WriteModel","kind":"struct","full_name":"Mongo::Bulk::WriteModel","name":"WriteModel"},"ancestors":[{"html_id":"cryomongo/Mongo/Bulk/WriteModel","kind":"struct","full_name":"Mongo::Bulk::WriteModel","name":"WriteModel"},{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cryomongo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Bulk","kind":"struct","full_name":"Mongo::Bulk","name":"Bulk"},"doc":"Update one or more documents.","summary":"<p>Update one or more documents.</p>","class_methods":[],"constructors":[{"id":"new(filter,update,array_filters=nil,collation=nil,hint=nil,upsert=nil)-class-method","html_id":"new(filter,update,array_filters=nil,collation=nil,hint=nil,upsert=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":""},{"name":"update","doc":null,"default_value":"","external_name":"update","restriction":""},{"name":"array_filters","doc":null,"default_value":"nil","external_name":"array_filters","restriction":""},{"name":"collation","doc":null,"default_value":"nil","external_name":"collation","restriction":""},{"name":"hint","doc":null,"default_value":"nil","external_name":"hint","restriction":""},{"name":"upsert","doc":null,"default_value":"nil","external_name":"upsert","restriction":""}],"args_string":"(filter, update, array_filters = <span class=\"n\">nil</span>, collation = <span class=\"n\">nil</span>, hint = <span class=\"n\">nil</span>, upsert = <span class=\"n\">nil</span>)","source_link":null,"def":{"name":"new","args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":""},{"name":"update","doc":null,"default_value":"","external_name":"update","restriction":""},{"name":"array_filters","doc":null,"default_value":"nil","external_name":"array_filters","restriction":""},{"name":"collation","doc":null,"default_value":"nil","external_name":"collation","restriction":""},{"name":"hint","doc":null,"default_value":"nil","external_name":"hint","restriction":""},{"name":"upsert","doc":null,"default_value":"nil","external_name":"upsert","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(filter, update, array_filters, collation, hint, upsert)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"array_filters:Array(BSON)?-instance-method","html_id":"array_filters:Array(BSON)?-instance-method","name":"array_filters","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(BSON)?","source_link":null,"def":{"name":"array_filters","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(BSON) | ::Nil","visibility":"Public","body":"@array_filters"}},{"id":"collation:Collation?-instance-method","html_id":"collation:Collation?-instance-method","name":"collation","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Collation?","source_link":null,"def":{"name":"collation","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Collation | ::Nil","visibility":"Public","body":"@collation"}},{"id":"filter:BSON-instance-method","html_id":"filter:BSON-instance-method","name":"filter","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON","source_link":null,"def":{"name":"filter","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON","visibility":"Public","body":"@filter"}},{"id":"hint:String|BSON|Nil-instance-method","html_id":"hint:String|BSON|Nil-instance-method","name":"hint","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String | BSON | Nil","source_link":null,"def":{"name":"hint","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | BSON | ::Nil","visibility":"Public","body":"@hint"}},{"id":"update:BSON|Array(BSON)-instance-method","html_id":"update:BSON|Array(BSON)-instance-method","name":"update","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON | Array(BSON)","source_link":null,"def":{"name":"update","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON | Array(BSON)","visibility":"Public","body":"@update"}},{"id":"upsert:Bool?-instance-method","html_id":"upsert:Bool?-instance-method","name":"upsert","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool?","source_link":null,"def":{"name":"upsert","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool | ::Nil","visibility":"Public","body":"@upsert"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Bulk/UpdateOne","path":"Mongo/Bulk/UpdateOne.html","kind":"struct","full_name":"Mongo::Bulk::UpdateOne","name":"UpdateOne","abstract":false,"superclass":{"html_id":"cryomongo/Mongo/Bulk/WriteModel","kind":"struct","full_name":"Mongo::Bulk::WriteModel","name":"WriteModel"},"ancestors":[{"html_id":"cryomongo/Mongo/Bulk/WriteModel","kind":"struct","full_name":"Mongo::Bulk::WriteModel","name":"WriteModel"},{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cryomongo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Bulk","kind":"struct","full_name":"Mongo::Bulk","name":"Bulk"},"doc":"Update one document.","summary":"<p>Update one document.</p>","class_methods":[],"constructors":[{"id":"new(filter,update,array_filters=nil,collation=nil,hint=nil,upsert=nil)-class-method","html_id":"new(filter,update,array_filters=nil,collation=nil,hint=nil,upsert=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":""},{"name":"update","doc":null,"default_value":"","external_name":"update","restriction":""},{"name":"array_filters","doc":null,"default_value":"nil","external_name":"array_filters","restriction":""},{"name":"collation","doc":null,"default_value":"nil","external_name":"collation","restriction":""},{"name":"hint","doc":null,"default_value":"nil","external_name":"hint","restriction":""},{"name":"upsert","doc":null,"default_value":"nil","external_name":"upsert","restriction":""}],"args_string":"(filter, update, array_filters = <span class=\"n\">nil</span>, collation = <span class=\"n\">nil</span>, hint = <span class=\"n\">nil</span>, upsert = <span class=\"n\">nil</span>)","source_link":null,"def":{"name":"new","args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":""},{"name":"update","doc":null,"default_value":"","external_name":"update","restriction":""},{"name":"array_filters","doc":null,"default_value":"nil","external_name":"array_filters","restriction":""},{"name":"collation","doc":null,"default_value":"nil","external_name":"collation","restriction":""},{"name":"hint","doc":null,"default_value":"nil","external_name":"hint","restriction":""},{"name":"upsert","doc":null,"default_value":"nil","external_name":"upsert","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(filter, update, array_filters, collation, hint, upsert)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"array_filters:Array(BSON)?-instance-method","html_id":"array_filters:Array(BSON)?-instance-method","name":"array_filters","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(BSON)?","source_link":null,"def":{"name":"array_filters","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(BSON) | ::Nil","visibility":"Public","body":"@array_filters"}},{"id":"collation:Collation?-instance-method","html_id":"collation:Collation?-instance-method","name":"collation","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Collation?","source_link":null,"def":{"name":"collation","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Collation | ::Nil","visibility":"Public","body":"@collation"}},{"id":"filter:BSON-instance-method","html_id":"filter:BSON-instance-method","name":"filter","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON","source_link":null,"def":{"name":"filter","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON","visibility":"Public","body":"@filter"}},{"id":"hint:String|BSON|Nil-instance-method","html_id":"hint:String|BSON|Nil-instance-method","name":"hint","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String | BSON | Nil","source_link":null,"def":{"name":"hint","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | BSON | ::Nil","visibility":"Public","body":"@hint"}},{"id":"update:BSON|Array(BSON)-instance-method","html_id":"update:BSON|Array(BSON)-instance-method","name":"update","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON | Array(BSON)","source_link":null,"def":{"name":"update","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON | Array(BSON)","visibility":"Public","body":"@update"}},{"id":"upsert:Bool?-instance-method","html_id":"upsert:Bool?-instance-method","name":"upsert","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool?","source_link":null,"def":{"name":"upsert","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool | ::Nil","visibility":"Public","body":"@upsert"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Bulk/WriteModel","path":"Mongo/Bulk/WriteModel.html","kind":"struct","full_name":"Mongo::Bulk::WriteModel","name":"WriteModel","abstract":true,"superclass":{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cryomongo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"cryomongo/Mongo/Bulk/DeleteMany","kind":"struct","full_name":"Mongo::Bulk::DeleteMany","name":"DeleteMany"},{"html_id":"cryomongo/Mongo/Bulk/DeleteOne","kind":"struct","full_name":"Mongo::Bulk::DeleteOne","name":"DeleteOne"},{"html_id":"cryomongo/Mongo/Bulk/InsertOne","kind":"struct","full_name":"Mongo::Bulk::InsertOne","name":"InsertOne"},{"html_id":"cryomongo/Mongo/Bulk/ReplaceOne","kind":"struct","full_name":"Mongo::Bulk::ReplaceOne","name":"ReplaceOne"},{"html_id":"cryomongo/Mongo/Bulk/UpdateMany","kind":"struct","full_name":"Mongo::Bulk::UpdateMany","name":"UpdateMany"},{"html_id":"cryomongo/Mongo/Bulk/UpdateOne","kind":"struct","full_name":"Mongo::Bulk::UpdateOne","name":"UpdateOne"}],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Bulk","kind":"struct","full_name":"Mongo::Bulk","name":"Bulk"},"doc":"The base Struct inherited by all the bulk write models.","summary":"<p>The base Struct inherited by all the bulk write models.</p>","class_methods":[],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"}}],"instance_methods":[{"id":"(other)-instance-method","html_id":"(other)-instance-method","name":"<=>","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other)","source_link":null,"def":{"name":"<=>","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.to_s <=> other.class.to_s"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Bulk/WriteResult","path":"Mongo/Bulk/WriteResult.html","kind":"class","full_name":"Mongo::Bulk::WriteResult","name":"WriteResult","abstract":false,"superclass":{"html_id":"cryomongo/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"cryomongo/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Bulk","kind":"struct","full_name":"Mongo::Bulk","name":"Bulk"},"doc":"An aggregated result of the server replies.","summary":"<p>An aggregated result of the server replies.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"n_inserted:Int32-instance-method","html_id":"n_inserted:Int32-instance-method","name":"n_inserted","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":null,"def":{"name":"n_inserted","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@n_inserted"}},{"id":"n_inserted=(n_inserted:Int32)-instance-method","html_id":"n_inserted=(n_inserted:Int32)-instance-method","name":"n_inserted=","doc":null,"summary":null,"abstract":false,"args":[{"name":"n_inserted","doc":null,"default_value":"","external_name":"n_inserted","restriction":"Int32"}],"args_string":"(n_inserted : Int32)","source_link":null,"def":{"name":"n_inserted=","args":[{"name":"n_inserted","doc":null,"default_value":"","external_name":"n_inserted","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@n_inserted = n_inserted"}},{"id":"n_matched:Int32-instance-method","html_id":"n_matched:Int32-instance-method","name":"n_matched","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":null,"def":{"name":"n_matched","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@n_matched"}},{"id":"n_matched=(n_matched:Int32)-instance-method","html_id":"n_matched=(n_matched:Int32)-instance-method","name":"n_matched=","doc":null,"summary":null,"abstract":false,"args":[{"name":"n_matched","doc":null,"default_value":"","external_name":"n_matched","restriction":"Int32"}],"args_string":"(n_matched : Int32)","source_link":null,"def":{"name":"n_matched=","args":[{"name":"n_matched","doc":null,"default_value":"","external_name":"n_matched","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@n_matched = n_matched"}},{"id":"n_modified:Int32-instance-method","html_id":"n_modified:Int32-instance-method","name":"n_modified","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":null,"def":{"name":"n_modified","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@n_modified"}},{"id":"n_modified=(n_modified:Int32)-instance-method","html_id":"n_modified=(n_modified:Int32)-instance-method","name":"n_modified=","doc":null,"summary":null,"abstract":false,"args":[{"name":"n_modified","doc":null,"default_value":"","external_name":"n_modified","restriction":"Int32"}],"args_string":"(n_modified : Int32)","source_link":null,"def":{"name":"n_modified=","args":[{"name":"n_modified","doc":null,"default_value":"","external_name":"n_modified","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@n_modified = n_modified"}},{"id":"n_removed:Int32-instance-method","html_id":"n_removed:Int32-instance-method","name":"n_removed","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":null,"def":{"name":"n_removed","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@n_removed"}},{"id":"n_removed=(n_removed:Int32)-instance-method","html_id":"n_removed=(n_removed:Int32)-instance-method","name":"n_removed=","doc":null,"summary":null,"abstract":false,"args":[{"name":"n_removed","doc":null,"default_value":"","external_name":"n_removed","restriction":"Int32"}],"args_string":"(n_removed : Int32)","source_link":null,"def":{"name":"n_removed=","args":[{"name":"n_removed","doc":null,"default_value":"","external_name":"n_removed","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@n_removed = n_removed"}},{"id":"n_upserted:Int32-instance-method","html_id":"n_upserted:Int32-instance-method","name":"n_upserted","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":null,"def":{"name":"n_upserted","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@n_upserted"}},{"id":"n_upserted=(n_upserted:Int32)-instance-method","html_id":"n_upserted=(n_upserted:Int32)-instance-method","name":"n_upserted=","doc":null,"summary":null,"abstract":false,"args":[{"name":"n_upserted","doc":null,"default_value":"","external_name":"n_upserted","restriction":"Int32"}],"args_string":"(n_upserted : Int32)","source_link":null,"def":{"name":"n_upserted=","args":[{"name":"n_upserted","doc":null,"default_value":"","external_name":"n_upserted","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@n_upserted = n_upserted"}},{"id":"upserted:Array(Commands::Common::Upserted)-instance-method","html_id":"upserted:Array(Commands::Common::Upserted)-instance-method","name":"upserted","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Commands::Common::Upserted)","source_link":null,"def":{"name":"upserted","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Commands::Common::Upserted)","visibility":"Public","body":"@upserted"}},{"id":"upserted=(upserted:Array(Commands::Common::Upserted))-instance-method","html_id":"upserted=(upserted:Array(Commands::Common::Upserted))-instance-method","name":"upserted=","doc":null,"summary":null,"abstract":false,"args":[{"name":"upserted","doc":null,"default_value":"","external_name":"upserted","restriction":"Array(Commands::Common::Upserted)"}],"args_string":"(upserted : Array(Commands::Common::Upserted))","source_link":null,"def":{"name":"upserted=","args":[{"name":"upserted","doc":null,"default_value":"","external_name":"upserted","restriction":"Array(Commands::Common::Upserted)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@upserted = upserted"}},{"id":"write_concern_errors:Array(Commands::Common::WriteConcernError)-instance-method","html_id":"write_concern_errors:Array(Commands::Common::WriteConcernError)-instance-method","name":"write_concern_errors","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Commands::Common::WriteConcernError)","source_link":null,"def":{"name":"write_concern_errors","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Commands::Common::WriteConcernError)","visibility":"Public","body":"@write_concern_errors"}},{"id":"write_concern_errors=(write_concern_errors:Array(Commands::Common::WriteConcernError))-instance-method","html_id":"write_concern_errors=(write_concern_errors:Array(Commands::Common::WriteConcernError))-instance-method","name":"write_concern_errors=","doc":null,"summary":null,"abstract":false,"args":[{"name":"write_concern_errors","doc":null,"default_value":"","external_name":"write_concern_errors","restriction":"Array(Commands::Common::WriteConcernError)"}],"args_string":"(write_concern_errors : Array(Commands::Common::WriteConcernError))","source_link":null,"def":{"name":"write_concern_errors=","args":[{"name":"write_concern_errors","doc":null,"default_value":"","external_name":"write_concern_errors","restriction":"Array(Commands::Common::WriteConcernError)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@write_concern_errors = write_concern_errors"}},{"id":"write_errors:Array(Commands::Common::WriteError)-instance-method","html_id":"write_errors:Array(Commands::Common::WriteError)-instance-method","name":"write_errors","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Commands::Common::WriteError)","source_link":null,"def":{"name":"write_errors","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Commands::Common::WriteError)","visibility":"Public","body":"@write_errors"}},{"id":"write_errors=(write_errors:Array(Commands::Common::WriteError))-instance-method","html_id":"write_errors=(write_errors:Array(Commands::Common::WriteError))-instance-method","name":"write_errors=","doc":null,"summary":null,"abstract":false,"args":[{"name":"write_errors","doc":null,"default_value":"","external_name":"write_errors","restriction":"Array(Commands::Common::WriteError)"}],"args_string":"(write_errors : Array(Commands::Common::WriteError))","source_link":null,"def":{"name":"write_errors=","args":[{"name":"write_errors","doc":null,"default_value":"","external_name":"write_errors","restriction":"Array(Commands::Common::WriteError)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@write_errors = write_errors"}}],"macros":[],"types":[]}]},{"html_id":"cryomongo/Mongo/ChangeStream","path":"Mongo/ChangeStream.html","kind":"module","full_name":"Mongo::ChangeStream","name":"ChangeStream","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo","kind":"module","full_name":"Mongo","name":"Mongo"},"doc":"Change streams allow applications to access real-time data changes without the complexity and risk of tailing the oplog.\n\nApplications can use change streams to subscribe to all data changes on a single collection, a database, or an entire deployment,\nand immediately react to them. Because change streams use the aggregation framework, applications can also filter for specific changes\nor transform the notifications at will.\n\nNOTE: [for more details, please check the official manual](https://docs.mongodb.com/manual/changeStreams/index.html).","summary":"<p>Change streams allow applications to access real-time data changes without the complexity and risk of tailing the oplog.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"cryomongo/Mongo/ChangeStream/Cursor","path":"Mongo/ChangeStream/Cursor.html","kind":"class","full_name":"Mongo::ChangeStream::Cursor","name":"Cursor","abstract":false,"superclass":{"html_id":"cryomongo/Mongo/Cursor","kind":"class","full_name":"Mongo::Cursor","name":"Cursor"},"ancestors":[{"html_id":"cryomongo/Mongo/Cursor","kind":"class","full_name":"Mongo::Cursor","name":"Cursor"},{"html_id":"cryomongo/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"},{"html_id":"cryomongo/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"cryomongo/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/ChangeStream","kind":"module","full_name":"Mongo::ChangeStream","name":"ChangeStream"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"next:BSON|Iterator::Stop-instance-method","html_id":"next:BSON|Iterator::Stop-instance-method","name":"next","doc":"Returns the next element in this iterator, or `Iterator::Stop::INSTANCE` if there\nare no more elements.","summary":"<p>Returns the next element in this iterator, or <code>Iterator::Stop::INSTANCE</code> if there are no more elements.</p>","abstract":false,"args":[],"args_string":" : BSON | Iterator::Stop","source_link":null,"def":{"name":"next","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON | Iterator::Stop","visibility":"Public","body":"begin\n  element = super()\n  if element.is_a?(BSON) && @batch.empty?\n    @resume_token || (@resume_token = element[\"_id\"]?.try do |__arg0|\n      __arg0.as(BSON)\n    end)\n  end\n  element\nrescue e : Mongo::Error::Command\n  if e.resumable?\n    self.close\n    if resume_token\n      result = (init(**@options.merge({resume_after: resume_token, start_after: nil, start_at_operation_time: nil}))).not_nil!\n    else\n      result = (init(**@options)).not_nil!\n    end\n    @cursor_id = result.cursor.id\n    @batch = result.cursor.first_batch\n    @database, @collection = result.cursor.ns.split(\".\", 2)\n    self.next\n  else\n    raise(e)\n  end\nend"}},{"id":"of(type:T)forallT-instance-method","html_id":"of(type:T)forallT-instance-method","name":"of","doc":"Will convert the elements to the `Mongo::ChangeStream::Document(T)` type while iterating the `Cursor`.\n\nNOTE: see `Mongo::Cursor.of`","summary":"<p>Will convert the elements to the <code><a href=\"../../Mongo/ChangeStream/Document.html\">Mongo::ChangeStream::Document</a>(T)</code> type while iterating the <code><a href=\"../../Mongo/ChangeStream/Cursor.html\">Cursor</a></code>.</p>","abstract":false,"args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"T"}],"args_string":"(type : T) forall T","source_link":null,"def":{"name":"of","args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n      Cursor::Wrapper(Mongo::ChangeStream::Document({{ T.instance }})).new(self)\n      {% end %}"}},{"id":"resume_token:BSON?-instance-method","html_id":"resume_token:BSON?-instance-method","name":"resume_token","doc":"The resume_token can be used to create a change stream that will start from this cursor position.","summary":"<p>The resume_token can be used to create a change stream that will start from this cursor position.</p>","abstract":false,"args":[],"args_string":" : BSON?","source_link":null,"def":{"name":"resume_token","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON | ::Nil","visibility":"Public","body":"@resume_token"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/ChangeStream/Document","path":"Mongo/ChangeStream/Document.html","kind":"struct","full_name":"Mongo::ChangeStream::Document(T)","name":"Document","abstract":false,"superclass":{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cryomongo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/ChangeStream","kind":"module","full_name":"Mongo::ChangeStream","name":"ChangeStream"},"doc":null,"summary":null,"class_methods":[{"id":"from_bson(bson:BSON)-class-method","html_id":"from_bson(bson:BSON)-class-method","name":"from_bson","doc":"NOTE: See `self.new`.","summary":"<p><span class=\"flag purple\">NOTE</span>  See <code>self<a href=\"../../Mongo/ChangeStream/Document.html#new(bson:BSON)-class-method\">.new</a></code>.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"from_bson","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.new(bson)"}}],"constructors":[{"id":"new(bson:BSON)-class-method","html_id":"new(bson:BSON)-class-method","name":"new","doc":"Allocate an instance and copies data from a BSON struct.\n\n```\nclass User\n  include BSON::Serializable\n  property name : String\nend\n\ndata = BSON.new\ndata[\"name\"] = \"John\"\nUser.new(data)\n```","summary":"<p>Allocate an instance and copies data from a BSON struct.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"new","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Document(T).allocate\n_.initialize(bson)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"_id:BSON-instance-method","html_id":"_id:BSON-instance-method","name":"_id","doc":"The id functions as an opaque token for use when resuming an interrupted\nchange stream.","summary":"<p>The id functions as an opaque token for use when resuming an interrupted change stream.</p>","abstract":false,"args":[],"args_string":" : BSON","source_link":null,"def":{"name":"_id","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON","visibility":"Public","body":"@_id"}},{"id":"document_key:BSON?-instance-method","html_id":"document_key:BSON?-instance-method","name":"document_key","doc":"Only present for ops of type ‘insert’, ‘update’, ‘replace’, and\n‘delete’.\n\nFor unsharded collections this contains a single field, _id, with the\nvalue of the _id of the document updated.  For sharded collections,\nthis will contain all the components of the shard key in order,\nfollowed by the _id if the _id isn’t part of the shard key.","summary":"<p>Only present for ops of type ‘insert’, ‘update’, ‘replace’, and ‘delete’.</p>","abstract":false,"args":[],"args_string":" : BSON?","source_link":null,"def":{"name":"document_key","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON | ::Nil","visibility":"Public","body":"@document_key"}},{"id":"full_document:T?-instance-method","html_id":"full_document:T?-instance-method","name":"full_document","doc":"Always present for operations of type ‘insert’ and ‘replace’. Also\npresent for operations of type ‘update’ if the user has specified ‘updateLookup’\nin the ‘fullDocument’ arguments to the ‘$changeStream’ stage.\n\nFor operations of type ‘insert’ and ‘replace’, this key will contain the\ndocument being inserted, or the new version of the document that is replacing\nthe existing document, respectively.\n\nFor operations of type ‘update’, this key will contain a copy of the full\nversion of the document from some point after the update occurred. If the\ndocument was deleted since the updated happened, it will be null.","summary":"<p>Always present for operations of type ‘insert’ and ‘replace’.</p>","abstract":false,"args":[],"args_string":" : T?","source_link":null,"def":{"name":"full_document","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T | ::Nil","visibility":"Public","body":"@full_document"}},{"id":"ns:BSON-instance-method","html_id":"ns:BSON-instance-method","name":"ns","doc":"Contains two fields: “db” and “coll” containing the database and\ncollection name in which the change happened.","summary":"<p>Contains two fields: “db” and “coll” containing the database and collection name in which the change happened.</p>","abstract":false,"args":[],"args_string":" : BSON","source_link":null,"def":{"name":"ns","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON","visibility":"Public","body":"@ns"}},{"id":"operation_type:String-instance-method","html_id":"operation_type:String-instance-method","name":"operation_type","doc":"Describes the type of operation represented in this change notification.\n\"insert\" | \"update\" | \"replace\" | \"delete\" | \"invalidate\" | \"drop\" | \"dropDatabase\" | \"rename\"","summary":"<p>Describes the type of operation represented in this change notification.</p>","abstract":false,"args":[],"args_string":" : String","source_link":null,"def":{"name":"operation_type","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@operation_type"}},{"id":"to_bson(bson=BSON.new)-instance-method","html_id":"to_bson(bson=BSON.new)-instance-method","name":"to_bson","doc":"Converts to a BSON representation.\n\n```\nuser = User.new name: \"John\"\nbson = user.to_bson\n```","summary":"<p>Converts to a BSON representation.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"args_string":"(bson = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>)","source_link":null,"def":{"name":"to_bson","args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n      {% global_options = @type.annotations(BSON::Options) %}\n      {% camelize = global_options.reduce(false) do |_, a|\n  a[:camelize]\nend %}\n      {% for ivar in @type.instance_vars %}\n        {% ann = ivar.annotation(BSON::Field) %}\n        {% typ = ivar.type.union_types.select do |t|\n  t != Nil\nend[0] %}\n        {% key = ivar.name %}\n        {% bson_key = ann ? ann[:key].id : camelize ? ivar.name.camelcase(lower: camelize == \"lower\") : ivar.name %}\n        {% if ann && ann[:ignore] %}{% else %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            unless self.{{ key }}.nil?\n          {% end %}\n            {% if typ.has_method?(:to_bson) %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}.try &.to_bson\n            {% else %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}\n            {% end %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            end\n          {% end %}\n        {% end %}\n      {% end %}\n      {% end %}\nbson\n"}}],"macros":[],"types":[{"html_id":"cryomongo/Mongo/ChangeStream/Document/UpdateDescription","path":"Mongo/ChangeStream/Document/UpdateDescription.html","kind":"struct","full_name":"Mongo::ChangeStream::Document::UpdateDescription","name":"UpdateDescription","abstract":false,"superclass":{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cryomongo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/ChangeStream/Document","kind":"struct","full_name":"Mongo::ChangeStream::Document(T)","name":"Document"},"doc":null,"summary":null,"class_methods":[{"id":"from_bson(bson:BSON)-class-method","html_id":"from_bson(bson:BSON)-class-method","name":"from_bson","doc":"NOTE: See `self.new`.","summary":"<p><span class=\"flag purple\">NOTE</span>  See <code>self<a href=\"../../../Mongo/ChangeStream/Document/UpdateDescription.html#new(bson:BSON)-class-method\">.new</a></code>.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"from_bson","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.new(bson)"}}],"constructors":[{"id":"new(bson:BSON)-class-method","html_id":"new(bson:BSON)-class-method","name":"new","doc":"Allocate an instance and copies data from a BSON struct.\n\n```\nclass User\n  include BSON::Serializable\n  property name : String\nend\n\ndata = BSON.new\ndata[\"name\"] = \"John\"\nUser.new(data)\n```","summary":"<p>Allocate an instance and copies data from a BSON struct.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"new","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(bson)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"removed_fields:Array(String)-instance-method","html_id":"removed_fields:Array(String)-instance-method","name":"removed_fields","doc":"An array of field names that were removed from the document.","summary":"<p>An array of field names that were removed from the document.</p>","abstract":false,"args":[],"args_string":" : Array(String)","source_link":null,"def":{"name":"removed_fields","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(String)","visibility":"Public","body":"@removed_fields"}},{"id":"to_bson(bson=BSON.new)-instance-method","html_id":"to_bson(bson=BSON.new)-instance-method","name":"to_bson","doc":"Converts to a BSON representation.\n\n```\nuser = User.new name: \"John\"\nbson = user.to_bson\n```","summary":"<p>Converts to a BSON representation.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"args_string":"(bson = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>)","source_link":null,"def":{"name":"to_bson","args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n      {% global_options = @type.annotations(BSON::Options) %}\n      {% camelize = global_options.reduce(false) do |_, a|\n  a[:camelize]\nend %}\n      {% for ivar in @type.instance_vars %}\n        {% ann = ivar.annotation(BSON::Field) %}\n        {% typ = ivar.type.union_types.select do |t|\n  t != Nil\nend[0] %}\n        {% key = ivar.name %}\n        {% bson_key = ann ? ann[:key].id : camelize ? ivar.name.camelcase(lower: camelize == \"lower\") : ivar.name %}\n        {% if ann && ann[:ignore] %}{% else %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            unless self.{{ key }}.nil?\n          {% end %}\n            {% if typ.has_method?(:to_bson) %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}.try &.to_bson\n            {% else %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}\n            {% end %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            end\n          {% end %}\n        {% end %}\n      {% end %}\n      {% end %}\nbson\n"}},{"id":"updated_fields:BSON-instance-method","html_id":"updated_fields:BSON-instance-method","name":"updated_fields","doc":"A document containing key:value pairs of names of the fields that were\nchanged, and the new value for those fields.","summary":"<p>A document containing key:value pairs of names of the fields that were changed, and the new value for those fields.</p>","abstract":false,"args":[],"args_string":" : BSON","source_link":null,"def":{"name":"updated_fields","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON","visibility":"Public","body":"@updated_fields"}}],"macros":[],"types":[]}]}]},{"html_id":"cryomongo/Mongo/Client","path":"Mongo/Client.html","kind":"class","full_name":"Mongo::Client","name":"Client","abstract":false,"superclass":{"html_id":"cryomongo/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"cryomongo/Mongo/WithReadPreference","kind":"module","full_name":"Mongo::WithReadPreference","name":"WithReadPreference"},{"html_id":"cryomongo/Mongo/WithWriteConcern","kind":"module","full_name":"Mongo::WithWriteConcern","name":"WithWriteConcern"},{"html_id":"cryomongo/Mongo/WithReadConcern","kind":"module","full_name":"Mongo::WithReadConcern","name":"WithReadConcern"},{"html_id":"cryomongo/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"MAX_WIRE_VERSION","name":"MAX_WIRE_VERSION","value":"8","doc":"The maximum wire protocol version supported by this driver.","summary":"<p>The maximum wire protocol version supported by this driver.</p>"},{"id":"MIN_WIRE_VERSION","name":"MIN_WIRE_VERSION","value":"6","doc":"The mininum wire protocol version supported by this driver.","summary":"<p>The mininum wire protocol version supported by this driver.</p>"}],"included_modules":[{"html_id":"cryomongo/Mongo/WithReadConcern","kind":"module","full_name":"Mongo::WithReadConcern","name":"WithReadConcern"},{"html_id":"cryomongo/Mongo/WithReadPreference","kind":"module","full_name":"Mongo::WithReadPreference","name":"WithReadPreference"},{"html_id":"cryomongo/Mongo/WithWriteConcern","kind":"module","full_name":"Mongo::WithWriteConcern","name":"WithWriteConcern"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo","kind":"module","full_name":"Mongo","name":"Mongo"},"doc":"The client which provides access to a MongoDB server, replica set, or sharded cluster.\n\nIt maintains management of underlying sockets and routing to individual nodes.","summary":"<p>The client which provides access to a MongoDB server, replica set, or sharded cluster.</p>","class_methods":[],"constructors":[{"id":"new(connection_string:String=&quot;mongodb://localhost:27017&quot;)-class-method","html_id":"new(connection_string:String=&quot;mongodb://localhost:27017&quot;)-class-method","name":"new","doc":"Create a mongodb client instance from a mongodb URL.\n\n```\nrequire \"cryomongo\"\n\nclient = Mongo::Client.new \"mongodb://127.0.0.1/?appname=client-example\"\n```","summary":"<p>Create a mongodb client instance from a mongodb URL.</p>","abstract":false,"args":[{"name":"connection_string","doc":null,"default_value":"\"mongodb://localhost:27017\"","external_name":"connection_string","restriction":"String"}],"args_string":"(connection_string : String = <span class=\"s\">&quot;mongodb://localhost:27017&quot;</span>)","source_link":null,"def":{"name":"new","args":[{"name":"connection_string","doc":null,"default_value":"\"mongodb://localhost:27017\"","external_name":"connection_string","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(connection_string)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"[](name:String):Database-instance-method","html_id":"[](name:String):Database-instance-method","name":"[]","doc":"Get a newly allocated `Mongo::Database` for the database named *name*.","summary":"<p>Get a newly allocated <code><a href=\"../Mongo/Database.html\">Mongo::Database</a></code> for the database named <em>name</em>.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"args_string":"(name : String) : Database","source_link":null,"def":{"name":"[]","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Database","visibility":"Public","body":"database(name)"}},{"id":"close-instance-method","html_id":"close-instance-method","name":"close","doc":"Frees all the resources associated with a client.","summary":"<p>Frees all the resources associated with a client.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"close","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@pools.each do |_, pool|\n  pool.close\nend\n@monitors.each(&.close)\n"}},{"id":"command(commandcmd,write_concern:WriteConcern?=nil,read_concern:ReadConcern?=nil,read_preference:ReadPreference?=nil,server_description:SDAM::ServerDescription?=nil,ignore_errors=false,**args)-instance-method","html_id":"command(commandcmd,write_concern:WriteConcern?=nil,read_concern:ReadConcern?=nil,read_preference:ReadPreference?=nil,server_description:SDAM::ServerDescription?=nil,ignore_errors=false,**args)-instance-method","name":"command","doc":"Execute a command on the server.\n\n```\n# First argument is the `Mongo::Commands`.\nclient.command(Mongo::Commands::DropDatabase, database: \"database_name\")\n```","summary":"<p>Execute a command on the server.</p>","abstract":false,"args":[{"name":"cmd","doc":null,"default_value":"","external_name":"command","restriction":""},{"name":"write_concern","doc":null,"default_value":"nil","external_name":"write_concern","restriction":"WriteConcern | ::Nil"},{"name":"read_concern","doc":null,"default_value":"nil","external_name":"read_concern","restriction":"ReadConcern | ::Nil"},{"name":"read_preference","doc":null,"default_value":"nil","external_name":"read_preference","restriction":"ReadPreference | ::Nil"},{"name":"server_description","doc":null,"default_value":"nil","external_name":"server_description","restriction":"SDAM::ServerDescription | ::Nil"},{"name":"ignore_errors","doc":null,"default_value":"false","external_name":"ignore_errors","restriction":""}],"args_string":"(command cmd, write_concern : WriteConcern? = <span class=\"n\">nil</span>, read_concern : ReadConcern? = <span class=\"n\">nil</span>, read_preference : ReadPreference? = <span class=\"n\">nil</span>, server_description : SDAM::ServerDescription? = <span class=\"n\">nil</span>, ignore_errors = <span class=\"n\">false</span>, **args)","source_link":null,"def":{"name":"command","args":[{"name":"cmd","doc":null,"default_value":"","external_name":"command","restriction":""},{"name":"write_concern","doc":null,"default_value":"nil","external_name":"write_concern","restriction":"WriteConcern | ::Nil"},{"name":"read_concern","doc":null,"default_value":"nil","external_name":"read_concern","restriction":"ReadConcern | ::Nil"},{"name":"read_preference","doc":null,"default_value":"nil","external_name":"read_preference","restriction":"ReadPreference | ::Nil"},{"name":"server_description","doc":null,"default_value":"nil","external_name":"server_description","restriction":"SDAM::ServerDescription | ::Nil"},{"name":"ignore_errors","doc":null,"default_value":"false","external_name":"ignore_errors","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"begin\n  args = WithWriteConcern.mix_write_concern(cmd, args, write_concern || @write_concern)\n  args = WithReadConcern.mix_read_concern(cmd, args, read_concern || @read_concern)\n  if WithReadPreference.must_use_primary_command?(cmd, args)\n    read_preference = ReadPreference.new(mode: \"primary\")\n  else\n    read_preference = (read_preference || @read_preference) || ReadPreference.new(mode: \"primary\")\n  end\n  server_description || (server_description = server_selection(cmd, args, read_preference))\n  connection = get_connection(server_description)\n  if ((cmd == Mongo::Commands::FindAndModify) && args[\"options\"]?.try(&.[]?(\"hint\"))) && server_description.max_wire_version < 8\n    raise(Mongo::Error.new(\"The hint option is not supported by MongoDB servers < 4.2\"))\n  end\n  args = WithReadPreference.mix_read_preference(cmd, args, read_preference, topology, server_description)\n  unacknowledged = false\n  if concern = args[\"options\"]?.try(&.[]?(\"write_concern\"))\n    unacknowledged = (concern.w == 0) && (!concern.j)\n  end\n  if unacknowledged\n    prohibited_option = nil\n    UNACKNOWLEDGED_WRITE_PROHIBITED_OPTIONS.each do |option|\n      if opt = args[\"options\"]?.try(&.has_key?(option))\n        prohibited_option = opt\n        break\n      else\n        if opt = args[\"updates\"]?.try(&.any?(&.has_key?(option)))\n          prohibited_option = opt\n          break\n        else\n          if opt = args[\"deletes\"]?.try(&.any?(&.has_key?(option)))\n            prohibited_option = opt\n            break\n          end\n        end\n      end\n    end\n    if prohibited_option\n      raise(Mongo::Error.new(\"Option #{prohibited_option} is prohibited when performing an unacknowledged write.\"))\n    end\n  end\n  body, sequences = cmd.command(**args)\n  flag_bits = unacknowledged ? Messages::OpMsg::Flags::MoreToCome : Messages::OpMsg::Flags::None\n  op_msg = Messages::OpMsg.new(body, flag_bits: flag_bits)\n  sequences.try(&.each do |key, documents|\n    op_msg.sequence(key.to_s, contents: documents)\n  end)\n  connection.send(op_msg)\n  if unacknowledged\n    return nil\n  end\n  op_msg = connection.receive(ignore_errors: ignore_errors)\n  result = cmd.result(op_msg.body)\n  if result.is_a?(Cursor)\n    result.server_description = server_description\n  end\n  result\nrescue error : IO::Error\n  Mongo::Log.error do\n    \"Client error: #{error}\"\n  end\n  server_description.try do |desc|\n    description = SDAM::ServerDescription.new(desc.address)\n    description.error = error.message\n    description.last_update_time = desc.last_update_time\n    topology.update(desc, description)\n    close_connection_pool(desc)\n  end\n  raise(error)\nrescue error : Mongo::Error::Command\n  Mongo::Log.error do\n    \"Server error: #{error}\"\n  end\n  if error.state_change?\n    server_description.try do |desc|\n      description = SDAM::ServerDescription.new(desc.address)\n      description.error = error.message\n      description.last_update_time = desc.last_update_time\n      topology.update(desc, description)\n      if error.shutdown?\n        close_connection_pool(desc)\n      end\n      @monitors.find do |__arg10|\n        __arg10.server_description.address == desc.address\n      end.try(&.request_immediate_scan)\n    end\n  end\n  raise(error)\nensure\n  if connection\n    release_connection(connection)\n  end\nend"}},{"id":"database(name:String):Database-instance-method","html_id":"database(name:String):Database-instance-method","name":"database","doc":"Get a newly allocated `Mongo::Database` for the database named *name*.","summary":"<p>Get a newly allocated <code><a href=\"../Mongo/Database.html\">Mongo::Database</a></code> for the database named <em>name</em>.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"args_string":"(name : String) : Database","source_link":null,"def":{"name":"database","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Database","visibility":"Public","body":"Database.new(self, name)"}},{"id":"list_databases(*,filter=nil,name_only:Bool?=nil,authorized_databases:Bool?=nil):Commands::ListDatabases::Result-instance-method","html_id":"list_databases(*,filter=nil,name_only:Bool?=nil,authorized_databases:Bool?=nil):Commands::ListDatabases::Result-instance-method","name":"list_databases","doc":"Provides a list of all existing databases along with basic statistics about them.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/listDatabases).","summary":"<p>Provides a list of all existing databases along with basic statistics about them.</p>","abstract":false,"args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"filter","doc":null,"default_value":"nil","external_name":"filter","restriction":""},{"name":"name_only","doc":null,"default_value":"nil","external_name":"name_only","restriction":"Bool | ::Nil"},{"name":"authorized_databases","doc":null,"default_value":"nil","external_name":"authorized_databases","restriction":"Bool | ::Nil"}],"args_string":"(*, filter = <span class=\"n\">nil</span>, name_only : Bool? = <span class=\"n\">nil</span>, authorized_databases : Bool? = <span class=\"n\">nil</span>) : Commands::ListDatabases::Result","source_link":null,"def":{"name":"list_databases","args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"filter","doc":null,"default_value":"nil","external_name":"filter","restriction":""},{"name":"name_only","doc":null,"default_value":"nil","external_name":"name_only","restriction":"Bool | ::Nil"},{"name":"authorized_databases","doc":null,"default_value":"nil","external_name":"authorized_databases","restriction":"Bool | ::Nil"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"Commands::ListDatabases::Result","visibility":"Public","body":"(self.command(Commands::ListDatabases, options: {filter: filter, name_only: name_only, authorized_databases: authorized_databases})).not_nil!"}},{"id":"options:Options-instance-method","html_id":"options:Options-instance-method","name":"options","doc":"The set of driver options.","summary":"<p>The set of driver options.</p>","abstract":false,"args":[],"args_string":" : Options","source_link":null,"def":{"name":"options","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Options","visibility":"Public","body":"@options"}},{"id":"read_concern:ReadConcern?-instance-method","html_id":"read_concern:ReadConcern?-instance-method","name":"read_concern","doc":"Read concern accessor.\n\nSee: [the official documentation](https://docs.mongodb.com/manual/reference/read-concern/index.html)","summary":"<p>Read concern accessor.</p>","abstract":false,"args":[],"args_string":" : ReadConcern?","source_link":null,"def":{"name":"read_concern","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"ReadConcern | ::Nil","visibility":"Public","body":"@read_concern"}},{"id":"read_concern=(read_concern:ReadConcern?)-instance-method","html_id":"read_concern=(read_concern:ReadConcern?)-instance-method","name":"read_concern=","doc":"Read concern accessor.\n\nSee: [the official documentation](https://docs.mongodb.com/manual/reference/read-concern/index.html)","summary":"<p>Read concern accessor.</p>","abstract":false,"args":[{"name":"read_concern","doc":null,"default_value":"","external_name":"read_concern","restriction":"ReadConcern | ::Nil"}],"args_string":"(read_concern : ReadConcern?)","source_link":null,"def":{"name":"read_concern=","args":[{"name":"read_concern","doc":null,"default_value":"","external_name":"read_concern","restriction":"ReadConcern | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@read_concern = read_concern"}},{"id":"read_preference:ReadPreference?-instance-method","html_id":"read_preference:ReadPreference?-instance-method","name":"read_preference","doc":"ReadPreference accessor.\n\nSee: [the official documentation](https://docs.mongodb.com/manual/core/read-preference/index.html).","summary":"<p>ReadPreference accessor.</p>","abstract":false,"args":[],"args_string":" : ReadPreference?","source_link":null,"def":{"name":"read_preference","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"ReadPreference | ::Nil","visibility":"Public","body":"@read_preference"}},{"id":"read_preference=(read_preference:ReadPreference?)-instance-method","html_id":"read_preference=(read_preference:ReadPreference?)-instance-method","name":"read_preference=","doc":"ReadPreference accessor.\n\nSee: [the official documentation](https://docs.mongodb.com/manual/core/read-preference/index.html).","summary":"<p>ReadPreference accessor.</p>","abstract":false,"args":[{"name":"read_preference","doc":null,"default_value":"","external_name":"read_preference","restriction":"ReadPreference | ::Nil"}],"args_string":"(read_preference : ReadPreference?)","source_link":null,"def":{"name":"read_preference=","args":[{"name":"read_preference","doc":null,"default_value":"","external_name":"read_preference","restriction":"ReadPreference | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@read_preference = read_preference"}},{"id":"status(*,repl:Int32?=nil,metrics:Int32?=nil,locks:Int32?=nil,mirrored_reads:Int32?=nil,latch_analysis:Int32?=nil):BSON?-instance-method","html_id":"status(*,repl:Int32?=nil,metrics:Int32?=nil,locks:Int32?=nil,mirrored_reads:Int32?=nil,latch_analysis:Int32?=nil):BSON?-instance-method","name":"status","doc":"Returns a document that provides an overview of the database’s state.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/serverStatus/).","summary":"<p>Returns a document that provides an overview of the database’s state.</p>","abstract":false,"args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"repl","doc":null,"default_value":"nil","external_name":"repl","restriction":"Int32 | ::Nil"},{"name":"metrics","doc":null,"default_value":"nil","external_name":"metrics","restriction":"Int32 | ::Nil"},{"name":"locks","doc":null,"default_value":"nil","external_name":"locks","restriction":"Int32 | ::Nil"},{"name":"mirrored_reads","doc":null,"default_value":"nil","external_name":"mirrored_reads","restriction":"Int32 | ::Nil"},{"name":"latch_analysis","doc":null,"default_value":"nil","external_name":"latch_analysis","restriction":"Int32 | ::Nil"}],"args_string":"(*, repl : Int32? = <span class=\"n\">nil</span>, metrics : Int32? = <span class=\"n\">nil</span>, locks : Int32? = <span class=\"n\">nil</span>, mirrored_reads : Int32? = <span class=\"n\">nil</span>, latch_analysis : Int32? = <span class=\"n\">nil</span>) : BSON?","source_link":null,"def":{"name":"status","args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"repl","doc":null,"default_value":"nil","external_name":"repl","restriction":"Int32 | ::Nil"},{"name":"metrics","doc":null,"default_value":"nil","external_name":"metrics","restriction":"Int32 | ::Nil"},{"name":"locks","doc":null,"default_value":"nil","external_name":"locks","restriction":"Int32 | ::Nil"},{"name":"mirrored_reads","doc":null,"default_value":"nil","external_name":"mirrored_reads","restriction":"Int32 | ::Nil"},{"name":"latch_analysis","doc":null,"default_value":"nil","external_name":"latch_analysis","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"BSON | ::Nil","visibility":"Public","body":"self.command(Commands::ServerStatus, options: {repl: repl, metrics: metrics, locks: locks, mirrored_reads: mirrored_reads, latch_analysis: latch_analysis})"}},{"id":"top:BSON?-instance-method","html_id":"top:BSON?-instance-method","name":"top","doc":"An administrative command that returns usage statistics for each collection.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/top).","summary":"<p>An administrative command that returns usage statistics for each collection.</p>","abstract":false,"args":[],"args_string":" : BSON?","source_link":null,"def":{"name":"top","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON | ::Nil","visibility":"Public","body":"self.command(Commands::Top)"}},{"id":"watch(pipeline:Array=[]ofBSON,*,full_document:String?=nil,resume_after=nil,max_await_time_ms:Int64?=nil,batch_size:Int32?=nil,collation:Collation?=nil,start_at_operation_time:Time?=nil,start_after=nil,read_concern:ReadConcern?=nil,read_preference:ReadPreference?=nil):Mongo::ChangeStream::Cursor-instance-method","html_id":"watch(pipeline:Array=[]ofBSON,*,full_document:String?=nil,resume_after=nil,max_await_time_ms:Int64?=nil,batch_size:Int32?=nil,collation:Collation?=nil,start_at_operation_time:Time?=nil,start_after=nil,read_concern:ReadConcern?=nil,read_preference:ReadPreference?=nil):Mongo::ChangeStream::Cursor-instance-method","name":"watch","doc":"Allows a client to observe all changes in a cluster.\n\nReturns a change stream on all collections in all databases in a cluster.\n\nNOTE: Excludes system collections.","summary":"<p>Allows a client to observe all changes in a cluster.</p>","abstract":false,"args":[{"name":"pipeline","doc":null,"default_value":"[] of BSON","external_name":"pipeline","restriction":"Array"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"full_document","doc":null,"default_value":"nil","external_name":"full_document","restriction":"String | ::Nil"},{"name":"resume_after","doc":null,"default_value":"nil","external_name":"resume_after","restriction":""},{"name":"max_await_time_ms","doc":null,"default_value":"nil","external_name":"max_await_time_ms","restriction":"Int64 | ::Nil"},{"name":"batch_size","doc":null,"default_value":"nil","external_name":"batch_size","restriction":"Int32 | ::Nil"},{"name":"collation","doc":null,"default_value":"nil","external_name":"collation","restriction":"Collation | ::Nil"},{"name":"start_at_operation_time","doc":null,"default_value":"nil","external_name":"start_at_operation_time","restriction":"Time | ::Nil"},{"name":"start_after","doc":null,"default_value":"nil","external_name":"start_after","restriction":""},{"name":"read_concern","doc":null,"default_value":"nil","external_name":"read_concern","restriction":"ReadConcern | ::Nil"},{"name":"read_preference","doc":null,"default_value":"nil","external_name":"read_preference","restriction":"ReadPreference | ::Nil"}],"args_string":"(pipeline : Array = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">BSON</span>, *, full_document : String? = <span class=\"n\">nil</span>, resume_after = <span class=\"n\">nil</span>, max_await_time_ms : Int64? = <span class=\"n\">nil</span>, batch_size : Int32? = <span class=\"n\">nil</span>, collation : Collation? = <span class=\"n\">nil</span>, start_at_operation_time : Time? = <span class=\"n\">nil</span>, start_after = <span class=\"n\">nil</span>, read_concern : ReadConcern? = <span class=\"n\">nil</span>, read_preference : ReadPreference? = <span class=\"n\">nil</span>) : Mongo::ChangeStream::Cursor","source_link":null,"def":{"name":"watch","args":[{"name":"pipeline","doc":null,"default_value":"[] of BSON","external_name":"pipeline","restriction":"Array"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"full_document","doc":null,"default_value":"nil","external_name":"full_document","restriction":"String | ::Nil"},{"name":"resume_after","doc":null,"default_value":"nil","external_name":"resume_after","restriction":""},{"name":"max_await_time_ms","doc":null,"default_value":"nil","external_name":"max_await_time_ms","restriction":"Int64 | ::Nil"},{"name":"batch_size","doc":null,"default_value":"nil","external_name":"batch_size","restriction":"Int32 | ::Nil"},{"name":"collation","doc":null,"default_value":"nil","external_name":"collation","restriction":"Collation | ::Nil"},{"name":"start_at_operation_time","doc":null,"default_value":"nil","external_name":"start_at_operation_time","restriction":"Time | ::Nil"},{"name":"start_after","doc":null,"default_value":"nil","external_name":"start_after","restriction":""},{"name":"read_concern","doc":null,"default_value":"nil","external_name":"read_concern","restriction":"ReadConcern | ::Nil"},{"name":"read_preference","doc":null,"default_value":"nil","external_name":"read_preference","restriction":"ReadPreference | ::Nil"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"Mongo::ChangeStream::Cursor","visibility":"Public","body":"ChangeStream::Cursor.new(client: self, database: \"admin\", collection: 1, pipeline: pipeline.map do |elt|\n  BSON.new(elt)\nend, full_document: full_document, resume_after: resume_after, start_after: start_after, start_at_operation_time: start_at_operation_time, read_concern: read_concern, read_preference: read_preference, max_time_ms: max_await_time_ms, batch_size: batch_size, collation: collation)"}},{"id":"write_concern:WriteConcern?-instance-method","html_id":"write_concern:WriteConcern?-instance-method","name":"write_concern","doc":"Write concern accessor.\n\nSee: [the official documentation](https://docs.mongodb.com/manual/reference/write-concern/index.html)","summary":"<p>Write concern accessor.</p>","abstract":false,"args":[],"args_string":" : WriteConcern?","source_link":null,"def":{"name":"write_concern","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"WriteConcern | ::Nil","visibility":"Public","body":"@write_concern"}},{"id":"write_concern=(write_concern:WriteConcern?)-instance-method","html_id":"write_concern=(write_concern:WriteConcern?)-instance-method","name":"write_concern=","doc":"Write concern accessor.\n\nSee: [the official documentation](https://docs.mongodb.com/manual/reference/write-concern/index.html)","summary":"<p>Write concern accessor.</p>","abstract":false,"args":[{"name":"write_concern","doc":null,"default_value":"","external_name":"write_concern","restriction":"WriteConcern | ::Nil"}],"args_string":"(write_concern : WriteConcern?)","source_link":null,"def":{"name":"write_concern=","args":[{"name":"write_concern","doc":null,"default_value":"","external_name":"write_concern","restriction":"WriteConcern | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@write_concern = write_concern"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Collation","path":"Mongo/Collation.html","kind":"struct","full_name":"Mongo::Collation","name":"Collation","abstract":false,"superclass":{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cryomongo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo","kind":"module","full_name":"Mongo","name":"Mongo"},"doc":"Collation allows users to specify language-specific rules for string comparison, such as rules for lettercase and accent marks.\n\nSee: [the official documentation](https://docs.mongodb.com/manual/reference/collation/index.html)","summary":"<p>Collation allows users to specify language-specific rules for string comparison, such as rules for lettercase and accent marks.</p>","class_methods":[{"id":"from_bson(bson:BSON)-class-method","html_id":"from_bson(bson:BSON)-class-method","name":"from_bson","doc":"NOTE: See `self.new`.","summary":"<p><span class=\"flag purple\">NOTE</span>  See <code>self<a href=\"../Mongo/Collation.html#new(bson:BSON)-class-method\">.new</a></code>.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"from_bson","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.new(bson)"}}],"constructors":[{"id":"new(bson:BSON)-class-method","html_id":"new(bson:BSON)-class-method","name":"new","doc":"Allocate an instance and copies data from a BSON struct.\n\n```\nclass User\n  include BSON::Serializable\n  property name : String\nend\n\ndata = BSON.new\ndata[\"name\"] = \"John\"\nUser.new(data)\n```","summary":"<p>Allocate an instance and copies data from a BSON struct.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"new","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(bson)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(locale,case_level=nil,case_first=nil,strength=nil,numeric_ordering=nil,alternate=nil,max_variable=nil,backwards=nil,normalization=nil)-class-method","html_id":"new(locale,case_level=nil,case_first=nil,strength=nil,numeric_ordering=nil,alternate=nil,max_variable=nil,backwards=nil,normalization=nil)-class-method","name":"new","doc":"Create a new `Collation` instance.\n\n```\ncollation = Mongo::Collation.new(locale: \"fr\")\n```","summary":"<p>Create a new <code><a href=\"../Mongo/Collation.html\">Collation</a></code> instance.</p>","abstract":false,"args":[{"name":"locale","doc":null,"default_value":"","external_name":"locale","restriction":""},{"name":"case_level","doc":null,"default_value":"nil","external_name":"case_level","restriction":""},{"name":"case_first","doc":null,"default_value":"nil","external_name":"case_first","restriction":""},{"name":"strength","doc":null,"default_value":"nil","external_name":"strength","restriction":""},{"name":"numeric_ordering","doc":null,"default_value":"nil","external_name":"numeric_ordering","restriction":""},{"name":"alternate","doc":null,"default_value":"nil","external_name":"alternate","restriction":""},{"name":"max_variable","doc":null,"default_value":"nil","external_name":"max_variable","restriction":""},{"name":"backwards","doc":null,"default_value":"nil","external_name":"backwards","restriction":""},{"name":"normalization","doc":null,"default_value":"nil","external_name":"normalization","restriction":""}],"args_string":"(locale, case_level = <span class=\"n\">nil</span>, case_first = <span class=\"n\">nil</span>, strength = <span class=\"n\">nil</span>, numeric_ordering = <span class=\"n\">nil</span>, alternate = <span class=\"n\">nil</span>, max_variable = <span class=\"n\">nil</span>, backwards = <span class=\"n\">nil</span>, normalization = <span class=\"n\">nil</span>)","source_link":null,"def":{"name":"new","args":[{"name":"locale","doc":null,"default_value":"","external_name":"locale","restriction":""},{"name":"case_level","doc":null,"default_value":"nil","external_name":"case_level","restriction":""},{"name":"case_first","doc":null,"default_value":"nil","external_name":"case_first","restriction":""},{"name":"strength","doc":null,"default_value":"nil","external_name":"strength","restriction":""},{"name":"numeric_ordering","doc":null,"default_value":"nil","external_name":"numeric_ordering","restriction":""},{"name":"alternate","doc":null,"default_value":"nil","external_name":"alternate","restriction":""},{"name":"max_variable","doc":null,"default_value":"nil","external_name":"max_variable","restriction":""},{"name":"backwards","doc":null,"default_value":"nil","external_name":"backwards","restriction":""},{"name":"normalization","doc":null,"default_value":"nil","external_name":"normalization","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(locale, case_level, case_first, strength, numeric_ordering, alternate, max_variable, backwards, normalization)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"alternate:String?-instance-method","html_id":"alternate:String?-instance-method","name":"alternate","doc":"Field that determines whether collation should consider whitespace and punctuation as base characters for purposes of comparison.","summary":"<p>Field that determines whether collation should consider whitespace and punctuation as base characters for purposes of comparison.</p>","abstract":false,"args":[],"args_string":" : String?","source_link":null,"def":{"name":"alternate","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"@alternate"}},{"id":"alternate=(alternate:String?)-instance-method","html_id":"alternate=(alternate:String?)-instance-method","name":"alternate=","doc":"Field that determines whether collation should consider whitespace and punctuation as base characters for purposes of comparison.","summary":"<p>Field that determines whether collation should consider whitespace and punctuation as base characters for purposes of comparison.</p>","abstract":false,"args":[{"name":"alternate","doc":null,"default_value":"","external_name":"alternate","restriction":"String | ::Nil"}],"args_string":"(alternate : String?)","source_link":null,"def":{"name":"alternate=","args":[{"name":"alternate","doc":null,"default_value":"","external_name":"alternate","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@alternate = alternate"}},{"id":"backwards:Bool?-instance-method","html_id":"backwards:Bool?-instance-method","name":"backwards","doc":" Flag that determines whether strings with diacritics sort from back of the string, such as with some French dictionary ordering.","summary":"<p>Flag that determines whether strings with diacritics sort from back of the string, such as with some French dictionary ordering.</p>","abstract":false,"args":[],"args_string":" : Bool?","source_link":null,"def":{"name":"backwards","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool | ::Nil","visibility":"Public","body":"@backwards"}},{"id":"backwards=(backwards:Bool?)-instance-method","html_id":"backwards=(backwards:Bool?)-instance-method","name":"backwards=","doc":" Flag that determines whether strings with diacritics sort from back of the string, such as with some French dictionary ordering.","summary":"<p>Flag that determines whether strings with diacritics sort from back of the string, such as with some French dictionary ordering.</p>","abstract":false,"args":[{"name":"backwards","doc":null,"default_value":"","external_name":"backwards","restriction":"Bool | ::Nil"}],"args_string":"(backwards : Bool?)","source_link":null,"def":{"name":"backwards=","args":[{"name":"backwards","doc":null,"default_value":"","external_name":"backwards","restriction":"Bool | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@backwards = backwards"}},{"id":"case_first:String?-instance-method","html_id":"case_first:String?-instance-method","name":"case_first","doc":"A field that determines sort order of case differences during tertiary level comparisons.","summary":"<p>A field that determines sort order of case differences during tertiary level comparisons.</p>","abstract":false,"args":[],"args_string":" : String?","source_link":null,"def":{"name":"case_first","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"@case_first"}},{"id":"case_first=(case_first:String?)-instance-method","html_id":"case_first=(case_first:String?)-instance-method","name":"case_first=","doc":"A field that determines sort order of case differences during tertiary level comparisons.","summary":"<p>A field that determines sort order of case differences during tertiary level comparisons.</p>","abstract":false,"args":[{"name":"case_first","doc":null,"default_value":"","external_name":"case_first","restriction":"String | ::Nil"}],"args_string":"(case_first : String?)","source_link":null,"def":{"name":"case_first=","args":[{"name":"case_first","doc":null,"default_value":"","external_name":"case_first","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@case_first = case_first"}},{"id":"case_level:Bool?-instance-method","html_id":"case_level:Bool?-instance-method","name":"case_level","doc":"Flag that determines whether to include case comparison at strength level 1 or 2.","summary":"<p>Flag that determines whether to include case comparison at strength level 1 or 2.</p>","abstract":false,"args":[],"args_string":" : Bool?","source_link":null,"def":{"name":"case_level","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool | ::Nil","visibility":"Public","body":"@case_level"}},{"id":"case_level=(case_level:Bool?)-instance-method","html_id":"case_level=(case_level:Bool?)-instance-method","name":"case_level=","doc":"Flag that determines whether to include case comparison at strength level 1 or 2.","summary":"<p>Flag that determines whether to include case comparison at strength level 1 or 2.</p>","abstract":false,"args":[{"name":"case_level","doc":null,"default_value":"","external_name":"case_level","restriction":"Bool | ::Nil"}],"args_string":"(case_level : Bool?)","source_link":null,"def":{"name":"case_level=","args":[{"name":"case_level","doc":null,"default_value":"","external_name":"case_level","restriction":"Bool | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@case_level = case_level"}},{"id":"locale:String-instance-method","html_id":"locale:String-instance-method","name":"locale","doc":"The ICU locale.","summary":"<p>The ICU locale.</p>","abstract":false,"args":[],"args_string":" : String","source_link":null,"def":{"name":"locale","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@locale"}},{"id":"locale=(locale:String)-instance-method","html_id":"locale=(locale:String)-instance-method","name":"locale=","doc":"The ICU locale.","summary":"<p>The ICU locale.</p>","abstract":false,"args":[{"name":"locale","doc":null,"default_value":"","external_name":"locale","restriction":"String"}],"args_string":"(locale : String)","source_link":null,"def":{"name":"locale=","args":[{"name":"locale","doc":null,"default_value":"","external_name":"locale","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@locale = locale"}},{"id":"max_variable:String?-instance-method","html_id":"max_variable:String?-instance-method","name":"max_variable","doc":"Field that determines up to which characters are considered ignorable when `alternate: \"shifted\"`. Has no effect if `alternate: \"non-ignorable\"`","summary":"<p>Field that determines up to which characters are considered ignorable when <code>alternate: \"shifted\"</code>.</p>","abstract":false,"args":[],"args_string":" : String?","source_link":null,"def":{"name":"max_variable","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"@max_variable"}},{"id":"max_variable=(max_variable:String?)-instance-method","html_id":"max_variable=(max_variable:String?)-instance-method","name":"max_variable=","doc":"Field that determines up to which characters are considered ignorable when `alternate: \"shifted\"`. Has no effect if `alternate: \"non-ignorable\"`","summary":"<p>Field that determines up to which characters are considered ignorable when <code>alternate: \"shifted\"</code>.</p>","abstract":false,"args":[{"name":"max_variable","doc":null,"default_value":"","external_name":"max_variable","restriction":"String | ::Nil"}],"args_string":"(max_variable : String?)","source_link":null,"def":{"name":"max_variable=","args":[{"name":"max_variable","doc":null,"default_value":"","external_name":"max_variable","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@max_variable = max_variable"}},{"id":"normalization:Bool?-instance-method","html_id":"normalization:Bool?-instance-method","name":"normalization","doc":"Flag that determines whether to check if text require normalization and to perform normalization.\nGenerally, majority of text does not require this normalization processing.","summary":"<p>Flag that determines whether to check if text require normalization and to perform normalization.</p>","abstract":false,"args":[],"args_string":" : Bool?","source_link":null,"def":{"name":"normalization","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool | ::Nil","visibility":"Public","body":"@normalization"}},{"id":"normalization=(normalization:Bool?)-instance-method","html_id":"normalization=(normalization:Bool?)-instance-method","name":"normalization=","doc":"Flag that determines whether to check if text require normalization and to perform normalization.\nGenerally, majority of text does not require this normalization processing.","summary":"<p>Flag that determines whether to check if text require normalization and to perform normalization.</p>","abstract":false,"args":[{"name":"normalization","doc":null,"default_value":"","external_name":"normalization","restriction":"Bool | ::Nil"}],"args_string":"(normalization : Bool?)","source_link":null,"def":{"name":"normalization=","args":[{"name":"normalization","doc":null,"default_value":"","external_name":"normalization","restriction":"Bool | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@normalization = normalization"}},{"id":"numeric_ordering:Bool?-instance-method","html_id":"numeric_ordering:Bool?-instance-method","name":"numeric_ordering","doc":"Flag that determines whether to compare numeric strings as numbers or as strings.","summary":"<p>Flag that determines whether to compare numeric strings as numbers or as strings.</p>","abstract":false,"args":[],"args_string":" : Bool?","source_link":null,"def":{"name":"numeric_ordering","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool | ::Nil","visibility":"Public","body":"@numeric_ordering"}},{"id":"numeric_ordering=(numeric_ordering:Bool?)-instance-method","html_id":"numeric_ordering=(numeric_ordering:Bool?)-instance-method","name":"numeric_ordering=","doc":"Flag that determines whether to compare numeric strings as numbers or as strings.","summary":"<p>Flag that determines whether to compare numeric strings as numbers or as strings.</p>","abstract":false,"args":[{"name":"numeric_ordering","doc":null,"default_value":"","external_name":"numeric_ordering","restriction":"Bool | ::Nil"}],"args_string":"(numeric_ordering : Bool?)","source_link":null,"def":{"name":"numeric_ordering=","args":[{"name":"numeric_ordering","doc":null,"default_value":"","external_name":"numeric_ordering","restriction":"Bool | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@numeric_ordering = numeric_ordering"}},{"id":"strength:Int32?-instance-method","html_id":"strength:Int32?-instance-method","name":"strength","doc":"The level of comparison to perform.","summary":"<p>The level of comparison to perform.</p>","abstract":false,"args":[],"args_string":" : Int32?","source_link":null,"def":{"name":"strength","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32 | ::Nil","visibility":"Public","body":"@strength"}},{"id":"strength=(strength:Int32?)-instance-method","html_id":"strength=(strength:Int32?)-instance-method","name":"strength=","doc":"The level of comparison to perform.","summary":"<p>The level of comparison to perform.</p>","abstract":false,"args":[{"name":"strength","doc":null,"default_value":"","external_name":"strength","restriction":"Int32 | ::Nil"}],"args_string":"(strength : Int32?)","source_link":null,"def":{"name":"strength=","args":[{"name":"strength","doc":null,"default_value":"","external_name":"strength","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@strength = strength"}},{"id":"to_bson(bson=BSON.new)-instance-method","html_id":"to_bson(bson=BSON.new)-instance-method","name":"to_bson","doc":"Converts to a BSON representation.\n\n```\nuser = User.new name: \"John\"\nbson = user.to_bson\n```","summary":"<p>Converts to a BSON representation.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"args_string":"(bson = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>)","source_link":null,"def":{"name":"to_bson","args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n      {% global_options = @type.annotations(BSON::Options) %}\n      {% camelize = global_options.reduce(false) do |_, a|\n  a[:camelize]\nend %}\n      {% for ivar in @type.instance_vars %}\n        {% ann = ivar.annotation(BSON::Field) %}\n        {% typ = ivar.type.union_types.select do |t|\n  t != Nil\nend[0] %}\n        {% key = ivar.name %}\n        {% bson_key = ann ? ann[:key].id : camelize ? ivar.name.camelcase(lower: camelize == \"lower\") : ivar.name %}\n        {% if ann && ann[:ignore] %}{% else %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            unless self.{{ key }}.nil?\n          {% end %}\n            {% if typ.has_method?(:to_bson) %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}.try &.to_bson\n            {% else %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}\n            {% end %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            end\n          {% end %}\n        {% end %}\n      {% end %}\n      {% end %}\nbson\n"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Collection","path":"Mongo/Collection.html","kind":"class","full_name":"Mongo::Collection","name":"Collection","abstract":false,"superclass":{"html_id":"cryomongo/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"cryomongo/Mongo/WithReadPreference","kind":"module","full_name":"Mongo::WithReadPreference","name":"WithReadPreference"},{"html_id":"cryomongo/Mongo/WithWriteConcern","kind":"module","full_name":"Mongo::WithWriteConcern","name":"WithWriteConcern"},{"html_id":"cryomongo/Mongo/WithReadConcern","kind":"module","full_name":"Mongo::WithReadConcern","name":"WithReadConcern"},{"html_id":"cryomongo/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"cryomongo/Mongo/WithReadConcern","kind":"module","full_name":"Mongo::WithReadConcern","name":"WithReadConcern"},{"html_id":"cryomongo/Mongo/WithReadPreference","kind":"module","full_name":"Mongo::WithReadPreference","name":"WithReadPreference"},{"html_id":"cryomongo/Mongo/WithWriteConcern","kind":"module","full_name":"Mongo::WithWriteConcern","name":"WithWriteConcern"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo","kind":"module","full_name":"Mongo","name":"Mongo"},"doc":"A `Collection` provides access to a MongoDB collection.\n\n```\ncollection = client[\"database_name\"][\"collection_name\"]\n```","summary":"<p>A <code><a href=\"../Mongo/Collection.html\">Collection</a></code> provides access to a MongoDB collection.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"aggregate(pipeline:Array,*,allow_disk_use:Bool?=nil,batch_size:Int32?=nil,max_time_ms:Int64?=nil,bypass_document_validation:Bool?=nil,collation:Collation?=nil,hint:String|H?=nil,comment:String?=nil,read_concern:ReadConcern?=nil,write_concern:WriteConcern?=nil,read_preference:ReadPreference?=nil):Mongo::Cursor?forallH-instance-method","html_id":"aggregate(pipeline:Array,*,allow_disk_use:Bool?=nil,batch_size:Int32?=nil,max_time_ms:Int64?=nil,bypass_document_validation:Bool?=nil,collation:Collation?=nil,hint:String|H?=nil,comment:String?=nil,read_concern:ReadConcern?=nil,write_concern:WriteConcern?=nil,read_preference:ReadPreference?=nil):Mongo::Cursor?forallH-instance-method","name":"aggregate","doc":"Runs an aggregation framework pipeline.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/aggregate/).","summary":"<p>Runs an aggregation framework pipeline.</p>","abstract":false,"args":[{"name":"pipeline","doc":null,"default_value":"","external_name":"pipeline","restriction":"Array"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"allow_disk_use","doc":null,"default_value":"nil","external_name":"allow_disk_use","restriction":"Bool | ::Nil"},{"name":"batch_size","doc":null,"default_value":"nil","external_name":"batch_size","restriction":"Int32 | ::Nil"},{"name":"max_time_ms","doc":null,"default_value":"nil","external_name":"max_time_ms","restriction":"Int64 | ::Nil"},{"name":"bypass_document_validation","doc":null,"default_value":"nil","external_name":"bypass_document_validation","restriction":"Bool | ::Nil"},{"name":"collation","doc":null,"default_value":"nil","external_name":"collation","restriction":"Collation | ::Nil"},{"name":"hint","doc":null,"default_value":"nil","external_name":"hint","restriction":"String | H | ::Nil"},{"name":"comment","doc":null,"default_value":"nil","external_name":"comment","restriction":"String | ::Nil"},{"name":"read_concern","doc":null,"default_value":"nil","external_name":"read_concern","restriction":"ReadConcern | ::Nil"},{"name":"write_concern","doc":null,"default_value":"nil","external_name":"write_concern","restriction":"WriteConcern | ::Nil"},{"name":"read_preference","doc":null,"default_value":"nil","external_name":"read_preference","restriction":"ReadPreference | ::Nil"}],"args_string":"(pipeline : Array, *, allow_disk_use : Bool? = <span class=\"n\">nil</span>, batch_size : Int32? = <span class=\"n\">nil</span>, max_time_ms : Int64? = <span class=\"n\">nil</span>, bypass_document_validation : Bool? = <span class=\"n\">nil</span>, collation : Collation? = <span class=\"n\">nil</span>, hint : String | H? = <span class=\"n\">nil</span>, comment : String? = <span class=\"n\">nil</span>, read_concern : ReadConcern? = <span class=\"n\">nil</span>, write_concern : WriteConcern? = <span class=\"n\">nil</span>, read_preference : ReadPreference? = <span class=\"n\">nil</span>) : Mongo::Cursor? forall H","source_link":null,"def":{"name":"aggregate","args":[{"name":"pipeline","doc":null,"default_value":"","external_name":"pipeline","restriction":"Array"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"allow_disk_use","doc":null,"default_value":"nil","external_name":"allow_disk_use","restriction":"Bool | ::Nil"},{"name":"batch_size","doc":null,"default_value":"nil","external_name":"batch_size","restriction":"Int32 | ::Nil"},{"name":"max_time_ms","doc":null,"default_value":"nil","external_name":"max_time_ms","restriction":"Int64 | ::Nil"},{"name":"bypass_document_validation","doc":null,"default_value":"nil","external_name":"bypass_document_validation","restriction":"Bool | ::Nil"},{"name":"collation","doc":null,"default_value":"nil","external_name":"collation","restriction":"Collation | ::Nil"},{"name":"hint","doc":null,"default_value":"nil","external_name":"hint","restriction":"String | H | ::Nil"},{"name":"comment","doc":null,"default_value":"nil","external_name":"comment","restriction":"String | ::Nil"},{"name":"read_concern","doc":null,"default_value":"nil","external_name":"read_concern","restriction":"ReadConcern | ::Nil"},{"name":"write_concern","doc":null,"default_value":"nil","external_name":"write_concern","restriction":"WriteConcern | ::Nil"},{"name":"read_preference","doc":null,"default_value":"nil","external_name":"read_preference","restriction":"ReadPreference | ::Nil"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"Mongo::Cursor | ::Nil","visibility":"Public","body":"maybe_result = self.command(Commands::Aggregate, pipeline: pipeline, options: {allow_disk_use: allow_disk_use, cursor: batch_size.try do\n  {batchSize: batch_size}\nend, bypass_document_validation: bypass_document_validation, collation: collation, hint: hint.is_a?(String) ? hint : BSON.new(hint), comment: comment, read_concern: read_concern, write_concern: write_concern, read_preference: read_preference})\nmaybe_result.try do |result|\n  Cursor.new(@database.client, result)\nend\n"}},{"id":"bulk(ordered:Bool=true)-instance-method","html_id":"bulk(ordered:Bool=true)-instance-method","name":"bulk","doc":"Create a `Mongo::Bulk` instance.","summary":"<p>Create a <code><a href=\"../Mongo/Bulk.html\">Mongo::Bulk</a></code> instance.</p>","abstract":false,"args":[{"name":"ordered","doc":null,"default_value":"true","external_name":"ordered","restriction":"Bool"}],"args_string":"(ordered : Bool = <span class=\"n\">true</span>)","source_link":null,"def":{"name":"bulk","args":[{"name":"ordered","doc":null,"default_value":"true","external_name":"ordered","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Mongo::Bulk.new(self, ordered)"}},{"id":"bulk_write(requests:Array(Bulk::WriteModel),*,ordered:Bool,bypass_document_validation:Bool?=nil):Bulk::WriteResult-instance-method","html_id":"bulk_write(requests:Array(Bulk::WriteModel),*,ordered:Bool,bypass_document_validation:Bool?=nil):Bulk::WriteResult-instance-method","name":"bulk_write","doc":"Executes multiple write operations.\n\nAn error will be raised if the *requests* parameter is empty.\n\nNOTE: [for more details, please check the official specifications document](https://github.com/mongodb/specifications/blob/master/source/driver-bulk-update.rst).","summary":"<p>Executes multiple write operations.</p>","abstract":false,"args":[{"name":"requests","doc":null,"default_value":"","external_name":"requests","restriction":"Array(Bulk::WriteModel)"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"ordered","doc":null,"default_value":"","external_name":"ordered","restriction":"Bool"},{"name":"bypass_document_validation","doc":null,"default_value":"nil","external_name":"bypass_document_validation","restriction":"Bool | ::Nil"}],"args_string":"(requests : Array(Bulk::WriteModel), *, ordered : Bool, bypass_document_validation : Bool? = <span class=\"n\">nil</span>) : Bulk::WriteResult","source_link":null,"def":{"name":"bulk_write","args":[{"name":"requests","doc":null,"default_value":"","external_name":"requests","restriction":"Array(Bulk::WriteModel)"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"ordered","doc":null,"default_value":"","external_name":"ordered","restriction":"Bool"},{"name":"bypass_document_validation","doc":null,"default_value":"nil","external_name":"bypass_document_validation","restriction":"Bool | ::Nil"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"Bulk::WriteResult","visibility":"Public","body":"if requests.size > 0\nelse\n  raise(Mongo::Bulk::Error.new(\"Tried to execute an empty bulk\"))\nend\nbulk = Mongo::Bulk.new(self, ordered, requests)\nbulk.execute(bypass_document_validation: bypass_document_validation)\n"}},{"id":"command(operation,write_concern:WriteConcern?=nil,read_concern:ReadConcern?=nil,read_preference:ReadPreference?=nil,**args)-instance-method","html_id":"command(operation,write_concern:WriteConcern?=nil,read_concern:ReadConcern?=nil,read_preference:ReadPreference?=nil,**args)-instance-method","name":"command","doc":"Execute a command on the server targeting the collection.\n\nWill automatically set the *collection* and *database* arguments.\n\nSee: `Mongo::Client.command`","summary":"<p>Execute a command on the server targeting the collection.</p>","abstract":false,"args":[{"name":"operation","doc":null,"default_value":"","external_name":"operation","restriction":""},{"name":"write_concern","doc":null,"default_value":"nil","external_name":"write_concern","restriction":"WriteConcern | ::Nil"},{"name":"read_concern","doc":null,"default_value":"nil","external_name":"read_concern","restriction":"ReadConcern | ::Nil"},{"name":"read_preference","doc":null,"default_value":"nil","external_name":"read_preference","restriction":"ReadPreference | ::Nil"}],"args_string":"(operation, write_concern : WriteConcern? = <span class=\"n\">nil</span>, read_concern : ReadConcern? = <span class=\"n\">nil</span>, read_preference : ReadPreference? = <span class=\"n\">nil</span>, **args)","source_link":null,"def":{"name":"command","args":[{"name":"operation","doc":null,"default_value":"","external_name":"operation","restriction":""},{"name":"write_concern","doc":null,"default_value":"nil","external_name":"write_concern","restriction":"WriteConcern | ::Nil"},{"name":"read_concern","doc":null,"default_value":"nil","external_name":"read_concern","restriction":"ReadConcern | ::Nil"},{"name":"read_preference","doc":null,"default_value":"nil","external_name":"read_preference","restriction":"ReadPreference | ::Nil"}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@database.command(operation, **args, collection: @name, write_concern: write_concern || @write_concern, read_concern: read_concern || @read_concern, read_preference: read_preference || @read_preference)"}},{"id":"count_documents(filter=BSON.new,*,skip:Int32?=nil,limit:Int32?=nil,collation:Collation?=nil,hint:String|H?=nil,max_time_ms:Int64?=nil,read_preference:ReadPreference?=nil):Int32forallH-instance-method","html_id":"count_documents(filter=BSON.new,*,skip:Int32?=nil,limit:Int32?=nil,collation:Collation?=nil,hint:String|H?=nil,max_time_ms:Int64?=nil,read_preference:ReadPreference?=nil):Int32forallH-instance-method","name":"count_documents","doc":"Count the number of documents in a collection that match the given filter.\nNote that an empty filter will force a scan of the entire collection.\nFor a fast count of the total documents in a collection see `estimated_document_count`.\n\nSee: [the specification document](https://github.com/mongodb/specifications/blob/master/source/crud/crud.rst#count-api-details).","summary":"<p>Count the number of documents in a collection that match the given filter.</p>","abstract":false,"args":[{"name":"filter","doc":null,"default_value":"BSON.new","external_name":"filter","restriction":""},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"skip","doc":null,"default_value":"nil","external_name":"skip","restriction":"Int32 | ::Nil"},{"name":"limit","doc":null,"default_value":"nil","external_name":"limit","restriction":"Int32 | ::Nil"},{"name":"collation","doc":null,"default_value":"nil","external_name":"collation","restriction":"Collation | ::Nil"},{"name":"hint","doc":null,"default_value":"nil","external_name":"hint","restriction":"String | H | ::Nil"},{"name":"max_time_ms","doc":null,"default_value":"nil","external_name":"max_time_ms","restriction":"Int64 | ::Nil"},{"name":"read_preference","doc":null,"default_value":"nil","external_name":"read_preference","restriction":"ReadPreference | ::Nil"}],"args_string":"(filter = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>, *, skip : Int32? = <span class=\"n\">nil</span>, limit : Int32? = <span class=\"n\">nil</span>, collation : Collation? = <span class=\"n\">nil</span>, hint : String | H? = <span class=\"n\">nil</span>, max_time_ms : Int64? = <span class=\"n\">nil</span>, read_preference : ReadPreference? = <span class=\"n\">nil</span>) : Int32 forall H","source_link":null,"def":{"name":"count_documents","args":[{"name":"filter","doc":null,"default_value":"BSON.new","external_name":"filter","restriction":""},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"skip","doc":null,"default_value":"nil","external_name":"skip","restriction":"Int32 | ::Nil"},{"name":"limit","doc":null,"default_value":"nil","external_name":"limit","restriction":"Int32 | ::Nil"},{"name":"collation","doc":null,"default_value":"nil","external_name":"collation","restriction":"Collation | ::Nil"},{"name":"hint","doc":null,"default_value":"nil","external_name":"hint","restriction":"String | H | ::Nil"},{"name":"max_time_ms","doc":null,"default_value":"nil","external_name":"max_time_ms","restriction":"Int64 | ::Nil"},{"name":"read_preference","doc":null,"default_value":"nil","external_name":"read_preference","restriction":"ReadPreference | ::Nil"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"pipeline = (!filter) || filter.empty? ? [] of BSON : [BSON.new({\"$match\": BSON.new(filter)})]\nskip.try do\n  pipeline << (BSON.new({\"$skip\": skip}))\nend\nlimit.try do\n  pipeline << (BSON.new({\"$limit\": limit}))\nend\npipeline << (BSON.new({\"$group\": {_id: 1, n: {\"$sum\": 1}}}))\nresult = (self.command(Commands::Aggregate, pipeline: pipeline, options: {collation: collation, hint: hint.is_a?(String) ? hint : BSON.new(hint), max_time_ms: max_time_ms, read_preference: read_preference})).not_nil!\ncursor = Cursor.new(@database.client, result)\nif (item = cursor.next).is_a?(BSON)\n  item[\"n\"].as(Int32)\nelse\n  0\nend\n"}},{"id":"create_index(keys,*,options=NamedTuple.new,commit_quorum:Int32|String?=nil,max_time_ms:Int64?=nil,write_concern:WriteConcern?=nil):Commands::CreateIndexes::Result?-instance-method","html_id":"create_index(keys,*,options=NamedTuple.new,commit_quorum:Int32|String?=nil,max_time_ms:Int64?=nil,write_concern:WriteConcern?=nil):Commands::CreateIndexes::Result?-instance-method","name":"create_index","doc":"This is a convenience method for creating a single index.\n\nSee: `create_indexes`","summary":"<p>This is a convenience method for creating a single index.</p>","abstract":false,"args":[{"name":"keys","doc":null,"default_value":"","external_name":"keys","restriction":""},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"options","doc":null,"default_value":"NamedTuple.new","external_name":"options","restriction":""},{"name":"commit_quorum","doc":null,"default_value":"nil","external_name":"commit_quorum","restriction":"Int32 | String | ::Nil"},{"name":"max_time_ms","doc":null,"default_value":"nil","external_name":"max_time_ms","restriction":"Int64 | ::Nil"},{"name":"write_concern","doc":null,"default_value":"nil","external_name":"write_concern","restriction":"WriteConcern | ::Nil"}],"args_string":"(keys, *, options = <span class=\"t\">NamedTuple</span>.<span class=\"k\">new</span>, commit_quorum : Int32 | String? = <span class=\"n\">nil</span>, max_time_ms : Int64? = <span class=\"n\">nil</span>, write_concern : WriteConcern? = <span class=\"n\">nil</span>) : Commands::CreateIndexes::Result?","source_link":null,"def":{"name":"create_index","args":[{"name":"keys","doc":null,"default_value":"","external_name":"keys","restriction":""},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"options","doc":null,"default_value":"NamedTuple.new","external_name":"options","restriction":""},{"name":"commit_quorum","doc":null,"default_value":"nil","external_name":"commit_quorum","restriction":"Int32 | String | ::Nil"},{"name":"max_time_ms","doc":null,"default_value":"nil","external_name":"max_time_ms","restriction":"Int64 | ::Nil"},{"name":"write_concern","doc":null,"default_value":"nil","external_name":"write_concern","restriction":"WriteConcern | ::Nil"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"Commands::CreateIndexes::Result | ::Nil","visibility":"Public","body":"self.create_indexes(models: [{keys: keys, options: options}], commit_quorum: commit_quorum, max_time_ms: max_time_ms, write_concern: write_concern)"}},{"id":"create_indexes(models:Array,*,commit_quorum:Int32|String?=nil,max_time_ms:Int64?=nil,write_concern:WriteConcern?=nil):Commands::CreateIndexes::Result?-instance-method","html_id":"create_indexes(models:Array,*,commit_quorum:Int32|String?=nil,max_time_ms:Int64?=nil,write_concern:WriteConcern?=nil):Commands::CreateIndexes::Result?-instance-method","name":"create_indexes","doc":"Creates multiple indexes in the collection.\n\nNOTE: [for more details, please check the official documentation](https://docs.mongodb.com/manual/reference/command/createIndexes/).","summary":"<p>Creates multiple indexes in the collection.</p>","abstract":false,"args":[{"name":"models","doc":null,"default_value":"","external_name":"models","restriction":"Array"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"commit_quorum","doc":null,"default_value":"nil","external_name":"commit_quorum","restriction":"Int32 | String | ::Nil"},{"name":"max_time_ms","doc":null,"default_value":"nil","external_name":"max_time_ms","restriction":"Int64 | ::Nil"},{"name":"write_concern","doc":null,"default_value":"nil","external_name":"write_concern","restriction":"WriteConcern | ::Nil"}],"args_string":"(models : Array, *, commit_quorum : Int32 | String? = <span class=\"n\">nil</span>, max_time_ms : Int64? = <span class=\"n\">nil</span>, write_concern : WriteConcern? = <span class=\"n\">nil</span>) : Commands::CreateIndexes::Result?","source_link":null,"def":{"name":"create_indexes","args":[{"name":"models","doc":null,"default_value":"","external_name":"models","restriction":"Array"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"commit_quorum","doc":null,"default_value":"nil","external_name":"commit_quorum","restriction":"Int32 | String | ::Nil"},{"name":"max_time_ms","doc":null,"default_value":"nil","external_name":"max_time_ms","restriction":"Int64 | ::Nil"},{"name":"write_concern","doc":null,"default_value":"nil","external_name":"write_concern","restriction":"WriteConcern | ::Nil"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"Commands::CreateIndexes::Result | ::Nil","visibility":"Public","body":"indexes = models.map do |item|\n  if item.is_a?(BSON)\n    keys = item[\"keys\"].as(BSON)\n    options = item[\"options\"]?.try do |__arg2|\n      __arg2.as(BSON)\n    end || BSON.new\n    if options[\"name\"]?\n      (BSON.new({key: keys})).append(options)\n    else\n      index_name = (keys.reduce([] of String) do |acc, __arg3|\n        k = __arg3[0]\n        v = __arg3[1]\n        acc << \"#{k}_#{v}\"\n      end).join(\"_\")\n      options.append(name: index_name)\n      (BSON.new({key: keys})).append(options)\n    end\n  else\n    index_model = Index::Model.new(item[\"keys\"], Index::Options.new(**item[\"options\"]))\n    if index_model.options.name\n    else\n      index_model.options.name = (index_model.keys.reduce([] of String) do |acc, __arg4|\n        k = __arg4[0]\n        v = __arg4[1]\n        acc << \"#{k}_#{v}\"\n      end).join(\"_\")\n    end\n    (BSON.new({key: index_model.keys})).append(index_model.options.to_bson)\n  end\nend\nself.command(Commands::CreateIndexes, indexes: indexes, options: {commit_quorum: commit_quorum, max_time_ms: max_time_ms, write_concern: write_concern})\n"}},{"id":"database:Mongo::Database-instance-method","html_id":"database:Mongo::Database-instance-method","name":"database","doc":"The parent database.","summary":"<p>The parent database.</p>","abstract":false,"args":[],"args_string":" : Mongo::Database","source_link":null,"def":{"name":"database","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Mongo::Database","visibility":"Public","body":"@database"}},{"id":"delete_many(filter,*,collation:Collation?=nil,hint:String|H?=nil,ordered:Bool?=nil,write_concern:WriteConcern?=nil):Commands::Common::DeleteResult?forallH-instance-method","html_id":"delete_many(filter,*,collation:Collation?=nil,hint:String|H?=nil,ordered:Bool?=nil,write_concern:WriteConcern?=nil):Commands::Common::DeleteResult?forallH-instance-method","name":"delete_many","doc":"Deletes multiple documents.\n\nNOTE: [for more details, please check the official documentation](https://docs.mongodb.com/manual/reference/command/delete/).","summary":"<p>Deletes multiple documents.</p>","abstract":false,"args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":""},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"collation","doc":null,"default_value":"nil","external_name":"collation","restriction":"Collation | ::Nil"},{"name":"hint","doc":null,"default_value":"nil","external_name":"hint","restriction":"String | H | ::Nil"},{"name":"ordered","doc":null,"default_value":"nil","external_name":"ordered","restriction":"Bool | ::Nil"},{"name":"write_concern","doc":null,"default_value":"nil","external_name":"write_concern","restriction":"WriteConcern | ::Nil"}],"args_string":"(filter, *, collation : Collation? = <span class=\"n\">nil</span>, hint : String | H? = <span class=\"n\">nil</span>, ordered : Bool? = <span class=\"n\">nil</span>, write_concern : WriteConcern? = <span class=\"n\">nil</span>) : Commands::Common::DeleteResult? forall H","source_link":null,"def":{"name":"delete_many","args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":""},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"collation","doc":null,"default_value":"nil","external_name":"collation","restriction":"Collation | ::Nil"},{"name":"hint","doc":null,"default_value":"nil","external_name":"hint","restriction":"String | H | ::Nil"},{"name":"ordered","doc":null,"default_value":"nil","external_name":"ordered","restriction":"Bool | ::Nil"},{"name":"write_concern","doc":null,"default_value":"nil","external_name":"write_concern","restriction":"WriteConcern | ::Nil"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"Commands::Common::DeleteResult | ::Nil","visibility":"Public","body":"delete = Tools.merge_bson({q: BSON.new(filter), limit: 0}, {collation: collation, hint: hint})\nself.command(Commands::Delete, deletes: [delete], options: {ordered: ordered, write_concern: write_concern})\n"}},{"id":"delete_one(filter,*,collation:Collation?=nil,hint:String|H?=nil,ordered:Bool?=nil,write_concern:WriteConcern?=nil):Commands::Common::DeleteResult?forallH-instance-method","html_id":"delete_one(filter,*,collation:Collation?=nil,hint:String|H?=nil,ordered:Bool?=nil,write_concern:WriteConcern?=nil):Commands::Common::DeleteResult?forallH-instance-method","name":"delete_one","doc":"Deletes one document.\n\nNOTE: [for more details, please check the official documentation](https://docs.mongodb.com/manual/reference/command/delete/).","summary":"<p>Deletes one document.</p>","abstract":false,"args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":""},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"collation","doc":null,"default_value":"nil","external_name":"collation","restriction":"Collation | ::Nil"},{"name":"hint","doc":null,"default_value":"nil","external_name":"hint","restriction":"String | H | ::Nil"},{"name":"ordered","doc":null,"default_value":"nil","external_name":"ordered","restriction":"Bool | ::Nil"},{"name":"write_concern","doc":null,"default_value":"nil","external_name":"write_concern","restriction":"WriteConcern | ::Nil"}],"args_string":"(filter, *, collation : Collation? = <span class=\"n\">nil</span>, hint : String | H? = <span class=\"n\">nil</span>, ordered : Bool? = <span class=\"n\">nil</span>, write_concern : WriteConcern? = <span class=\"n\">nil</span>) : Commands::Common::DeleteResult? forall H","source_link":null,"def":{"name":"delete_one","args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":""},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"collation","doc":null,"default_value":"nil","external_name":"collation","restriction":"Collation | ::Nil"},{"name":"hint","doc":null,"default_value":"nil","external_name":"hint","restriction":"String | H | ::Nil"},{"name":"ordered","doc":null,"default_value":"nil","external_name":"ordered","restriction":"Bool | ::Nil"},{"name":"write_concern","doc":null,"default_value":"nil","external_name":"write_concern","restriction":"WriteConcern | ::Nil"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"Commands::Common::DeleteResult | ::Nil","visibility":"Public","body":"delete = Tools.merge_bson({q: BSON.new(filter), limit: 1}, {collation: collation, hint: hint})\nself.command(Commands::Delete, deletes: [delete], options: {ordered: ordered, write_concern: write_concern})\n"}},{"id":"distinct(key:String,*,filter=nil,read_concern:ReadConcern?=nil,collation:Collation?=nil,read_preference:ReadPreference?=nil):Array-instance-method","html_id":"distinct(key:String,*,filter=nil,read_concern:ReadConcern?=nil,collation:Collation?=nil,read_preference:ReadPreference?=nil):Array-instance-method","name":"distinct","doc":"Finds the distinct values for a specified field across a single collection.\n\nNOTE: the results are backed by the \"values\" array in the distinct command's result\ndocument. This differs from aggregate and find, where results are backed by a cursor.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/distinct/).","summary":"<p>Finds the distinct values for a specified field across a single collection.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"filter","doc":null,"default_value":"nil","external_name":"filter","restriction":""},{"name":"read_concern","doc":null,"default_value":"nil","external_name":"read_concern","restriction":"ReadConcern | ::Nil"},{"name":"collation","doc":null,"default_value":"nil","external_name":"collation","restriction":"Collation | ::Nil"},{"name":"read_preference","doc":null,"default_value":"nil","external_name":"read_preference","restriction":"ReadPreference | ::Nil"}],"args_string":"(key : String, *, filter = <span class=\"n\">nil</span>, read_concern : ReadConcern? = <span class=\"n\">nil</span>, collation : Collation? = <span class=\"n\">nil</span>, read_preference : ReadPreference? = <span class=\"n\">nil</span>) : Array","source_link":null,"def":{"name":"distinct","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"filter","doc":null,"default_value":"nil","external_name":"filter","restriction":""},{"name":"read_concern","doc":null,"default_value":"nil","external_name":"read_concern","restriction":"ReadConcern | ::Nil"},{"name":"collation","doc":null,"default_value":"nil","external_name":"collation","restriction":"Collation | ::Nil"},{"name":"read_preference","doc":null,"default_value":"nil","external_name":"read_preference","restriction":"ReadPreference | ::Nil"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"Array","visibility":"Public","body":"result = (self.command(Commands::Distinct, key: key, options: {query: filter, read_concern: read_concern, collation: collation, read_preference: read_preference})).not_nil!\nresult.values.each.map(&.[](1)).to_a\n"}},{"id":"drop_index(name:String,*,max_time_ms:Int64?=nil,write_concern:WriteConcern?=nil):Commands::Common::BaseResult?-instance-method","html_id":"drop_index(name:String,*,max_time_ms:Int64?=nil,write_concern:WriteConcern?=nil):Commands::Common::BaseResult?-instance-method","name":"drop_index","doc":"Drops a single index from the collection by the index name.\n\nSee: `drop_indexes`","summary":"<p>Drops a single index from the collection by the index name.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"max_time_ms","doc":null,"default_value":"nil","external_name":"max_time_ms","restriction":"Int64 | ::Nil"},{"name":"write_concern","doc":null,"default_value":"nil","external_name":"write_concern","restriction":"WriteConcern | ::Nil"}],"args_string":"(name : String, *, max_time_ms : Int64? = <span class=\"n\">nil</span>, write_concern : WriteConcern? = <span class=\"n\">nil</span>) : Commands::Common::BaseResult?","source_link":null,"def":{"name":"drop_index","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"max_time_ms","doc":null,"default_value":"nil","external_name":"max_time_ms","restriction":"Int64 | ::Nil"},{"name":"write_concern","doc":null,"default_value":"nil","external_name":"write_concern","restriction":"WriteConcern | ::Nil"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"Commands::Common::BaseResult | ::Nil","visibility":"Public","body":"if name == \"*\"\n  raise(Mongo::Error.new(\"'*' cannot be used with drop_index as more than one index would be dropped.\"))\nend\nself.command(Commands::DropIndexes, index: name, options: {max_time_ms: max_time_ms, write_concern: write_concern})\n"}},{"id":"drop_indexes(*,max_time_ms:Int64?=nil,write_concern:WriteConcern?=nil):Commands::Common::BaseResult?-instance-method","html_id":"drop_indexes(*,max_time_ms:Int64?=nil,write_concern:WriteConcern?=nil):Commands::Common::BaseResult?-instance-method","name":"drop_indexes","doc":"Drops all indexes in the collection.\n\nNOTE: [for more details, please check the official documentation](https://docs.mongodb.com/manual/reference/command/dropIndexes/).","summary":"<p>Drops all indexes in the collection.</p>","abstract":false,"args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"max_time_ms","doc":null,"default_value":"nil","external_name":"max_time_ms","restriction":"Int64 | ::Nil"},{"name":"write_concern","doc":null,"default_value":"nil","external_name":"write_concern","restriction":"WriteConcern | ::Nil"}],"args_string":"(*, max_time_ms : Int64? = <span class=\"n\">nil</span>, write_concern : WriteConcern? = <span class=\"n\">nil</span>) : Commands::Common::BaseResult?","source_link":null,"def":{"name":"drop_indexes","args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"max_time_ms","doc":null,"default_value":"nil","external_name":"max_time_ms","restriction":"Int64 | ::Nil"},{"name":"write_concern","doc":null,"default_value":"nil","external_name":"write_concern","restriction":"WriteConcern | ::Nil"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"Commands::Common::BaseResult | ::Nil","visibility":"Public","body":"self.command(Commands::DropIndexes, index: \"*\", options: {max_time_ms: max_time_ms, write_concern: write_concern})"}},{"id":"estimated_document_count(*,max_time_ms:Int64?=nil,read_preference:ReadPreference?=nil):Int32-instance-method","html_id":"estimated_document_count(*,max_time_ms:Int64?=nil,read_preference:ReadPreference?=nil):Int32-instance-method","name":"estimated_document_count","doc":"Gets an estimate of the count of documents in a collection using collection metadata.\n\nSee: [the specification document](https://github.com/mongodb/specifications/blob/master/source/crud/crud.rst#count-api-details).","summary":"<p>Gets an estimate of the count of documents in a collection using collection metadata.</p>","abstract":false,"args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"max_time_ms","doc":null,"default_value":"nil","external_name":"max_time_ms","restriction":"Int64 | ::Nil"},{"name":"read_preference","doc":null,"default_value":"nil","external_name":"read_preference","restriction":"ReadPreference | ::Nil"}],"args_string":"(*, max_time_ms : Int64? = <span class=\"n\">nil</span>, read_preference : ReadPreference? = <span class=\"n\">nil</span>) : Int32","source_link":null,"def":{"name":"estimated_document_count","args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"max_time_ms","doc":null,"default_value":"nil","external_name":"max_time_ms","restriction":"Int64 | ::Nil"},{"name":"read_preference","doc":null,"default_value":"nil","external_name":"read_preference","restriction":"ReadPreference | ::Nil"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"result = (self.command(Commands::Count, options: {max_time_ms: max_time_ms, read_preference: read_preference})).not_nil!\nresult[\"n\"].as(Int32)\n"}},{"id":"find(filter=BSON.new,*,sort=nil,projection=nil,hint:String|H?=nil,skip:Int32?=nil,limit:Int32?=nil,batch_size:Int32?=nil,single_batch:Bool?=nil,comment:String?=nil,max_time_ms:Int64?=nil,read_concern:ReadConcern?=nil,max=nil,min=nil,return_key:Bool?=nil,show_record_id:Bool?=nil,tailable:Bool?=nil,oplog_replay:Bool?=nil,no_cursor_timeout:Bool?=nil,await_data:Bool?=nil,allow_partial_results:Bool?=nil,allow_disk_use:Bool?=nil,collation:Collation?=nil,read_preference:ReadPreference?=nil):Mongo::CursorforallH-instance-method","html_id":"find(filter=BSON.new,*,sort=nil,projection=nil,hint:String|H?=nil,skip:Int32?=nil,limit:Int32?=nil,batch_size:Int32?=nil,single_batch:Bool?=nil,comment:String?=nil,max_time_ms:Int64?=nil,read_concern:ReadConcern?=nil,max=nil,min=nil,return_key:Bool?=nil,show_record_id:Bool?=nil,tailable:Bool?=nil,oplog_replay:Bool?=nil,no_cursor_timeout:Bool?=nil,await_data:Bool?=nil,allow_partial_results:Bool?=nil,allow_disk_use:Bool?=nil,collation:Collation?=nil,read_preference:ReadPreference?=nil):Mongo::CursorforallH-instance-method","name":"find","doc":"Finds the documents matching the model.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/find/).\nNOTE: [for an overview of read operations, check the official manual](https://docs.mongodb.com/manual/core/read-operations-introduction/).","summary":"<p>Finds the documents matching the model.</p>","abstract":false,"args":[{"name":"filter","doc":null,"default_value":"BSON.new","external_name":"filter","restriction":""},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"sort","doc":null,"default_value":"nil","external_name":"sort","restriction":""},{"name":"projection","doc":null,"default_value":"nil","external_name":"projection","restriction":""},{"name":"hint","doc":null,"default_value":"nil","external_name":"hint","restriction":"String | H | ::Nil"},{"name":"skip","doc":null,"default_value":"nil","external_name":"skip","restriction":"Int32 | ::Nil"},{"name":"limit","doc":null,"default_value":"nil","external_name":"limit","restriction":"Int32 | ::Nil"},{"name":"batch_size","doc":null,"default_value":"nil","external_name":"batch_size","restriction":"Int32 | ::Nil"},{"name":"single_batch","doc":null,"default_value":"nil","external_name":"single_batch","restriction":"Bool | ::Nil"},{"name":"comment","doc":null,"default_value":"nil","external_name":"comment","restriction":"String | ::Nil"},{"name":"max_time_ms","doc":null,"default_value":"nil","external_name":"max_time_ms","restriction":"Int64 | ::Nil"},{"name":"read_concern","doc":null,"default_value":"nil","external_name":"read_concern","restriction":"ReadConcern | ::Nil"},{"name":"max","doc":null,"default_value":"nil","external_name":"max","restriction":""},{"name":"min","doc":null,"default_value":"nil","external_name":"min","restriction":""},{"name":"return_key","doc":null,"default_value":"nil","external_name":"return_key","restriction":"Bool | ::Nil"},{"name":"show_record_id","doc":null,"default_value":"nil","external_name":"show_record_id","restriction":"Bool | ::Nil"},{"name":"tailable","doc":null,"default_value":"nil","external_name":"tailable","restriction":"Bool | ::Nil"},{"name":"oplog_replay","doc":null,"default_value":"nil","external_name":"oplog_replay","restriction":"Bool | ::Nil"},{"name":"no_cursor_timeout","doc":null,"default_value":"nil","external_name":"no_cursor_timeout","restriction":"Bool | ::Nil"},{"name":"await_data","doc":null,"default_value":"nil","external_name":"await_data","restriction":"Bool | ::Nil"},{"name":"allow_partial_results","doc":null,"default_value":"nil","external_name":"allow_partial_results","restriction":"Bool | ::Nil"},{"name":"allow_disk_use","doc":null,"default_value":"nil","external_name":"allow_disk_use","restriction":"Bool | ::Nil"},{"name":"collation","doc":null,"default_value":"nil","external_name":"collation","restriction":"Collation | ::Nil"},{"name":"read_preference","doc":null,"default_value":"nil","external_name":"read_preference","restriction":"ReadPreference | ::Nil"}],"args_string":"(filter = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>, *, sort = <span class=\"n\">nil</span>, projection = <span class=\"n\">nil</span>, hint : String | H? = <span class=\"n\">nil</span>, skip : Int32? = <span class=\"n\">nil</span>, limit : Int32? = <span class=\"n\">nil</span>, batch_size : Int32? = <span class=\"n\">nil</span>, single_batch : Bool? = <span class=\"n\">nil</span>, comment : String? = <span class=\"n\">nil</span>, max_time_ms : Int64? = <span class=\"n\">nil</span>, read_concern : ReadConcern? = <span class=\"n\">nil</span>, max = <span class=\"n\">nil</span>, min = <span class=\"n\">nil</span>, return_key : Bool? = <span class=\"n\">nil</span>, show_record_id : Bool? = <span class=\"n\">nil</span>, tailable : Bool? = <span class=\"n\">nil</span>, oplog_replay : Bool? = <span class=\"n\">nil</span>, no_cursor_timeout : Bool? = <span class=\"n\">nil</span>, await_data : Bool? = <span class=\"n\">nil</span>, allow_partial_results : Bool? = <span class=\"n\">nil</span>, allow_disk_use : Bool? = <span class=\"n\">nil</span>, collation : Collation? = <span class=\"n\">nil</span>, read_preference : ReadPreference? = <span class=\"n\">nil</span>) : Mongo::Cursor forall H","source_link":null,"def":{"name":"find","args":[{"name":"filter","doc":null,"default_value":"BSON.new","external_name":"filter","restriction":""},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"sort","doc":null,"default_value":"nil","external_name":"sort","restriction":""},{"name":"projection","doc":null,"default_value":"nil","external_name":"projection","restriction":""},{"name":"hint","doc":null,"default_value":"nil","external_name":"hint","restriction":"String | H | ::Nil"},{"name":"skip","doc":null,"default_value":"nil","external_name":"skip","restriction":"Int32 | ::Nil"},{"name":"limit","doc":null,"default_value":"nil","external_name":"limit","restriction":"Int32 | ::Nil"},{"name":"batch_size","doc":null,"default_value":"nil","external_name":"batch_size","restriction":"Int32 | ::Nil"},{"name":"single_batch","doc":null,"default_value":"nil","external_name":"single_batch","restriction":"Bool | ::Nil"},{"name":"comment","doc":null,"default_value":"nil","external_name":"comment","restriction":"String | ::Nil"},{"name":"max_time_ms","doc":null,"default_value":"nil","external_name":"max_time_ms","restriction":"Int64 | ::Nil"},{"name":"read_concern","doc":null,"default_value":"nil","external_name":"read_concern","restriction":"ReadConcern | ::Nil"},{"name":"max","doc":null,"default_value":"nil","external_name":"max","restriction":""},{"name":"min","doc":null,"default_value":"nil","external_name":"min","restriction":""},{"name":"return_key","doc":null,"default_value":"nil","external_name":"return_key","restriction":"Bool | ::Nil"},{"name":"show_record_id","doc":null,"default_value":"nil","external_name":"show_record_id","restriction":"Bool | ::Nil"},{"name":"tailable","doc":null,"default_value":"nil","external_name":"tailable","restriction":"Bool | ::Nil"},{"name":"oplog_replay","doc":null,"default_value":"nil","external_name":"oplog_replay","restriction":"Bool | ::Nil"},{"name":"no_cursor_timeout","doc":null,"default_value":"nil","external_name":"no_cursor_timeout","restriction":"Bool | ::Nil"},{"name":"await_data","doc":null,"default_value":"nil","external_name":"await_data","restriction":"Bool | ::Nil"},{"name":"allow_partial_results","doc":null,"default_value":"nil","external_name":"allow_partial_results","restriction":"Bool | ::Nil"},{"name":"allow_disk_use","doc":null,"default_value":"nil","external_name":"allow_disk_use","restriction":"Bool | ::Nil"},{"name":"collation","doc":null,"default_value":"nil","external_name":"collation","restriction":"Collation | ::Nil"},{"name":"read_preference","doc":null,"default_value":"nil","external_name":"read_preference","restriction":"ReadPreference | ::Nil"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"Mongo::Cursor","visibility":"Public","body":"result = (self.command(Commands::Find, filter: filter, options: {sort: sort.try do\n  BSON.new(sort)\nend, projection: projection.try do\n  BSON.new(projection)\nend, hint: hint.is_a?(String) ? hint : BSON.new(hint), skip: skip, limit: limit, batch_size: batch_size, single_batch: single_batch, comment: comment, max_time_ms: max_time_ms, read_concern: read_concern, max: max.try do\n  BSON.new(max)\nend, min: min.try do\n  BSON.new(min)\nend, return_key: return_key, show_record_id: show_record_id, tailable: tailable, oplog_replay: oplog_replay, no_cursor_timeout: no_cursor_timeout, await_data: await_data, allow_partial_results: allow_partial_results, allow_disk_use: allow_disk_use, collation: collation, read_preference: read_preference})).not_nil!\nCursor.new(@database.client, result, await_time_ms: tailable && await_data ? max_time_ms : nil, tailable: tailable || false)\n"}},{"id":"find_one(filter=BSON.new,*,sort=nil,projection=nil,hint:String|H?=nil,skip:Int32?=nil,comment:String?=nil,max_time_ms:Int64?=nil,read_concern:ReadConcern?=nil,max=nil,min=nil,return_key:Bool?=nil,show_record_id:Bool?=nil,oplog_replay:Bool?=nil,no_cursor_timeout:Bool?=nil,allow_partial_results:Bool?=nil,collation:Collation?=nil,read_preference:ReadPreference?=nil):BSON?forallH-instance-method","html_id":"find_one(filter=BSON.new,*,sort=nil,projection=nil,hint:String|H?=nil,skip:Int32?=nil,comment:String?=nil,max_time_ms:Int64?=nil,read_concern:ReadConcern?=nil,max=nil,min=nil,return_key:Bool?=nil,show_record_id:Bool?=nil,oplog_replay:Bool?=nil,no_cursor_timeout:Bool?=nil,allow_partial_results:Bool?=nil,collation:Collation?=nil,read_preference:ReadPreference?=nil):BSON?forallH-instance-method","name":"find_one","doc":"Finds the document matching the model.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/find/).","summary":"<p>Finds the document matching the model.</p>","abstract":false,"args":[{"name":"filter","doc":null,"default_value":"BSON.new","external_name":"filter","restriction":""},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"sort","doc":null,"default_value":"nil","external_name":"sort","restriction":""},{"name":"projection","doc":null,"default_value":"nil","external_name":"projection","restriction":""},{"name":"hint","doc":null,"default_value":"nil","external_name":"hint","restriction":"String | H | ::Nil"},{"name":"skip","doc":null,"default_value":"nil","external_name":"skip","restriction":"Int32 | ::Nil"},{"name":"comment","doc":null,"default_value":"nil","external_name":"comment","restriction":"String | ::Nil"},{"name":"max_time_ms","doc":null,"default_value":"nil","external_name":"max_time_ms","restriction":"Int64 | ::Nil"},{"name":"read_concern","doc":null,"default_value":"nil","external_name":"read_concern","restriction":"ReadConcern | ::Nil"},{"name":"max","doc":null,"default_value":"nil","external_name":"max","restriction":""},{"name":"min","doc":null,"default_value":"nil","external_name":"min","restriction":""},{"name":"return_key","doc":null,"default_value":"nil","external_name":"return_key","restriction":"Bool | ::Nil"},{"name":"show_record_id","doc":null,"default_value":"nil","external_name":"show_record_id","restriction":"Bool | ::Nil"},{"name":"oplog_replay","doc":null,"default_value":"nil","external_name":"oplog_replay","restriction":"Bool | ::Nil"},{"name":"no_cursor_timeout","doc":null,"default_value":"nil","external_name":"no_cursor_timeout","restriction":"Bool | ::Nil"},{"name":"allow_partial_results","doc":null,"default_value":"nil","external_name":"allow_partial_results","restriction":"Bool | ::Nil"},{"name":"collation","doc":null,"default_value":"nil","external_name":"collation","restriction":"Collation | ::Nil"},{"name":"read_preference","doc":null,"default_value":"nil","external_name":"read_preference","restriction":"ReadPreference | ::Nil"}],"args_string":"(filter = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>, *, sort = <span class=\"n\">nil</span>, projection = <span class=\"n\">nil</span>, hint : String | H? = <span class=\"n\">nil</span>, skip : Int32? = <span class=\"n\">nil</span>, comment : String? = <span class=\"n\">nil</span>, max_time_ms : Int64? = <span class=\"n\">nil</span>, read_concern : ReadConcern? = <span class=\"n\">nil</span>, max = <span class=\"n\">nil</span>, min = <span class=\"n\">nil</span>, return_key : Bool? = <span class=\"n\">nil</span>, show_record_id : Bool? = <span class=\"n\">nil</span>, oplog_replay : Bool? = <span class=\"n\">nil</span>, no_cursor_timeout : Bool? = <span class=\"n\">nil</span>, allow_partial_results : Bool? = <span class=\"n\">nil</span>, collation : Collation? = <span class=\"n\">nil</span>, read_preference : ReadPreference? = <span class=\"n\">nil</span>) : BSON? forall H","source_link":null,"def":{"name":"find_one","args":[{"name":"filter","doc":null,"default_value":"BSON.new","external_name":"filter","restriction":""},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"sort","doc":null,"default_value":"nil","external_name":"sort","restriction":""},{"name":"projection","doc":null,"default_value":"nil","external_name":"projection","restriction":""},{"name":"hint","doc":null,"default_value":"nil","external_name":"hint","restriction":"String | H | ::Nil"},{"name":"skip","doc":null,"default_value":"nil","external_name":"skip","restriction":"Int32 | ::Nil"},{"name":"comment","doc":null,"default_value":"nil","external_name":"comment","restriction":"String | ::Nil"},{"name":"max_time_ms","doc":null,"default_value":"nil","external_name":"max_time_ms","restriction":"Int64 | ::Nil"},{"name":"read_concern","doc":null,"default_value":"nil","external_name":"read_concern","restriction":"ReadConcern | ::Nil"},{"name":"max","doc":null,"default_value":"nil","external_name":"max","restriction":""},{"name":"min","doc":null,"default_value":"nil","external_name":"min","restriction":""},{"name":"return_key","doc":null,"default_value":"nil","external_name":"return_key","restriction":"Bool | ::Nil"},{"name":"show_record_id","doc":null,"default_value":"nil","external_name":"show_record_id","restriction":"Bool | ::Nil"},{"name":"oplog_replay","doc":null,"default_value":"nil","external_name":"oplog_replay","restriction":"Bool | ::Nil"},{"name":"no_cursor_timeout","doc":null,"default_value":"nil","external_name":"no_cursor_timeout","restriction":"Bool | ::Nil"},{"name":"allow_partial_results","doc":null,"default_value":"nil","external_name":"allow_partial_results","restriction":"Bool | ::Nil"},{"name":"collation","doc":null,"default_value":"nil","external_name":"collation","restriction":"Collation | ::Nil"},{"name":"read_preference","doc":null,"default_value":"nil","external_name":"read_preference","restriction":"ReadPreference | ::Nil"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"BSON | ::Nil","visibility":"Public","body":"cursor = self.find(filter: filter, limit: 1, single_batch: true, batch_size: 1, tailable: false, await_data: false, sort: sort.try do\n  BSON.new(sort)\nend, projection: projection.try do\n  BSON.new(projection)\nend, hint: hint.is_a?(String) ? hint : BSON.new(hint), skip: skip, comment: comment, max_time_ms: max_time_ms, read_concern: read_concern, max: max.try do\n  BSON.new(max)\nend, min: min.try do\n  BSON.new(min)\nend, return_key: return_key, show_record_id: show_record_id, oplog_replay: oplog_replay, no_cursor_timeout: no_cursor_timeout, allow_partial_results: allow_partial_results, collation: collation, read_preference: read_preference).not_nil!\nelement = cursor.next\nif element.is_a?(BSON)\n  return element\nend\nnil\n"}},{"id":"find_one_and_delete(filter,*,sort=nil,fields=nil,bypass_document_validation:Bool?=nil,write_concern:WriteConcern?=nil,collation:Collation?=nil,hint:String|H?=nil,max_time_ms:Int64?=nil):BSON?forallH-instance-method","html_id":"find_one_and_delete(filter,*,sort=nil,fields=nil,bypass_document_validation:Bool?=nil,write_concern:WriteConcern?=nil,collation:Collation?=nil,hint:String|H?=nil,max_time_ms:Int64?=nil):BSON?forallH-instance-method","name":"find_one_and_delete","doc":"Finds a single document and deletes it, returning the original. The document to return may be nil.\n\nNOTE: [for more details, please check the official documentation](https://docs.mongodb.com/manual/reference/command/findAndModify/).","summary":"<p>Finds a single document and deletes it, returning the original.</p>","abstract":false,"args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":""},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"sort","doc":null,"default_value":"nil","external_name":"sort","restriction":""},{"name":"fields","doc":null,"default_value":"nil","external_name":"fields","restriction":""},{"name":"bypass_document_validation","doc":null,"default_value":"nil","external_name":"bypass_document_validation","restriction":"Bool | ::Nil"},{"name":"write_concern","doc":null,"default_value":"nil","external_name":"write_concern","restriction":"WriteConcern | ::Nil"},{"name":"collation","doc":null,"default_value":"nil","external_name":"collation","restriction":"Collation | ::Nil"},{"name":"hint","doc":null,"default_value":"nil","external_name":"hint","restriction":"String | H | ::Nil"},{"name":"max_time_ms","doc":null,"default_value":"nil","external_name":"max_time_ms","restriction":"Int64 | ::Nil"}],"args_string":"(filter, *, sort = <span class=\"n\">nil</span>, fields = <span class=\"n\">nil</span>, bypass_document_validation : Bool? = <span class=\"n\">nil</span>, write_concern : WriteConcern? = <span class=\"n\">nil</span>, collation : Collation? = <span class=\"n\">nil</span>, hint : String | H? = <span class=\"n\">nil</span>, max_time_ms : Int64? = <span class=\"n\">nil</span>) : BSON? forall H","source_link":null,"def":{"name":"find_one_and_delete","args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":""},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"sort","doc":null,"default_value":"nil","external_name":"sort","restriction":""},{"name":"fields","doc":null,"default_value":"nil","external_name":"fields","restriction":""},{"name":"bypass_document_validation","doc":null,"default_value":"nil","external_name":"bypass_document_validation","restriction":"Bool | ::Nil"},{"name":"write_concern","doc":null,"default_value":"nil","external_name":"write_concern","restriction":"WriteConcern | ::Nil"},{"name":"collation","doc":null,"default_value":"nil","external_name":"collation","restriction":"Collation | ::Nil"},{"name":"hint","doc":null,"default_value":"nil","external_name":"hint","restriction":"String | H | ::Nil"},{"name":"max_time_ms","doc":null,"default_value":"nil","external_name":"max_time_ms","restriction":"Int64 | ::Nil"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"BSON | ::Nil","visibility":"Public","body":"result = self.command(Commands::FindAndModify, filter: filter, options: {remove: true, sort: sort.try do\n  BSON.new(sort)\nend, fields: fields.try do\n  BSON.new(fields)\nend, bypass_document_validation: bypass_document_validation, write_concern: write_concern, collation: collation, hint: hint, max_time_ms: max_time_ms})\ncheck_find_and_modify_result!(result)\n"}},{"id":"find_one_and_replace(filter,replacement,*,sort=nil,new:Bool?=nil,fields=nil,upsert:Bool?=nil,bypass_document_validation:Bool?=nil,write_concern:WriteConcern?=nil,collation:Collation?=nil,array_filters=nil,hint:String|H?=nil,max_time_ms:Int64?=nil):BSON?forallH-instance-method","html_id":"find_one_and_replace(filter,replacement,*,sort=nil,new:Bool?=nil,fields=nil,upsert:Bool?=nil,bypass_document_validation:Bool?=nil,write_concern:WriteConcern?=nil,collation:Collation?=nil,array_filters=nil,hint:String|H?=nil,max_time_ms:Int64?=nil):BSON?forallH-instance-method","name":"find_one_and_replace","doc":"Finds a single document and replaces it, returning either the original or the replaced\ndocument. The document to return may be nil.\n\nNOTE: [for more details, please check the official documentation](https://docs.mongodb.com/manual/reference/command/findAndModify/).","summary":"<p>Finds a single document and replaces it, returning either the original or the replaced document.</p>","abstract":false,"args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":""},{"name":"replacement","doc":null,"default_value":"","external_name":"replacement","restriction":""},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"sort","doc":null,"default_value":"nil","external_name":"sort","restriction":""},{"name":"new","doc":null,"default_value":"nil","external_name":"new","restriction":"Bool | ::Nil"},{"name":"fields","doc":null,"default_value":"nil","external_name":"fields","restriction":""},{"name":"upsert","doc":null,"default_value":"nil","external_name":"upsert","restriction":"Bool | ::Nil"},{"name":"bypass_document_validation","doc":null,"default_value":"nil","external_name":"bypass_document_validation","restriction":"Bool | ::Nil"},{"name":"write_concern","doc":null,"default_value":"nil","external_name":"write_concern","restriction":"WriteConcern | ::Nil"},{"name":"collation","doc":null,"default_value":"nil","external_name":"collation","restriction":"Collation | ::Nil"},{"name":"array_filters","doc":null,"default_value":"nil","external_name":"array_filters","restriction":""},{"name":"hint","doc":null,"default_value":"nil","external_name":"hint","restriction":"String | H | ::Nil"},{"name":"max_time_ms","doc":null,"default_value":"nil","external_name":"max_time_ms","restriction":"Int64 | ::Nil"}],"args_string":"(filter, replacement, *, sort = <span class=\"n\">nil</span>, new : Bool? = <span class=\"n\">nil</span>, fields = <span class=\"n\">nil</span>, upsert : Bool? = <span class=\"n\">nil</span>, bypass_document_validation : Bool? = <span class=\"n\">nil</span>, write_concern : WriteConcern? = <span class=\"n\">nil</span>, collation : Collation? = <span class=\"n\">nil</span>, array_filters = <span class=\"n\">nil</span>, hint : String | H? = <span class=\"n\">nil</span>, max_time_ms : Int64? = <span class=\"n\">nil</span>) : BSON? forall H","source_link":null,"def":{"name":"find_one_and_replace","args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":""},{"name":"replacement","doc":null,"default_value":"","external_name":"replacement","restriction":""},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"sort","doc":null,"default_value":"nil","external_name":"sort","restriction":""},{"name":"new","doc":null,"default_value":"nil","external_name":"new","restriction":"Bool | ::Nil"},{"name":"fields","doc":null,"default_value":"nil","external_name":"fields","restriction":""},{"name":"upsert","doc":null,"default_value":"nil","external_name":"upsert","restriction":"Bool | ::Nil"},{"name":"bypass_document_validation","doc":null,"default_value":"nil","external_name":"bypass_document_validation","restriction":"Bool | ::Nil"},{"name":"write_concern","doc":null,"default_value":"nil","external_name":"write_concern","restriction":"WriteConcern | ::Nil"},{"name":"collation","doc":null,"default_value":"nil","external_name":"collation","restriction":"Collation | ::Nil"},{"name":"array_filters","doc":null,"default_value":"nil","external_name":"array_filters","restriction":""},{"name":"hint","doc":null,"default_value":"nil","external_name":"hint","restriction":"String | H | ::Nil"},{"name":"max_time_ms","doc":null,"default_value":"nil","external_name":"max_time_ms","restriction":"Int64 | ::Nil"}],"double_splat":null,"splat_index":2,"yields":null,"block_arg":null,"return_type":"BSON | ::Nil","visibility":"Public","body":"replacement = validate_replacement!(replacement)\nresult = self.command(Commands::FindAndModify, filter: filter, options: {update: replacement, sort: sort.try do\n  BSON.new(sort)\nend, new: new, fields: fields.try do\n  BSON.new(fields)\nend, upsert: upsert, bypass_document_validation: bypass_document_validation, write_concern: write_concern, collation: collation, array_filters: array_filters, hint: hint, max_time_ms: max_time_ms})\ncheck_find_and_modify_result!(result)\n"}},{"id":"find_one_and_update(filter,update,*,sort=nil,new:Bool?=nil,fields=nil,upsert:Bool?=nil,bypass_document_validation:Bool?=nil,write_concern:WriteConcern?=nil,collation:Collation?=nil,array_filters=nil,hint:String|H?=nil,max_time_ms:Int64?=nil):BSON?forallH-instance-method","html_id":"find_one_and_update(filter,update,*,sort=nil,new:Bool?=nil,fields=nil,upsert:Bool?=nil,bypass_document_validation:Bool?=nil,write_concern:WriteConcern?=nil,collation:Collation?=nil,array_filters=nil,hint:String|H?=nil,max_time_ms:Int64?=nil):BSON?forallH-instance-method","name":"find_one_and_update","doc":"Finds a single document and updates it, returning either the original or the updated\ndocument. The document to return may be nil.\n\nNOTE: [for more details, please check the official documentation](https://docs.mongodb.com/manual/reference/command/findAndModify/).","summary":"<p>Finds a single document and updates it, returning either the original or the updated document.</p>","abstract":false,"args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":""},{"name":"update","doc":null,"default_value":"","external_name":"update","restriction":""},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"sort","doc":null,"default_value":"nil","external_name":"sort","restriction":""},{"name":"new","doc":null,"default_value":"nil","external_name":"new","restriction":"Bool | ::Nil"},{"name":"fields","doc":null,"default_value":"nil","external_name":"fields","restriction":""},{"name":"upsert","doc":null,"default_value":"nil","external_name":"upsert","restriction":"Bool | ::Nil"},{"name":"bypass_document_validation","doc":null,"default_value":"nil","external_name":"bypass_document_validation","restriction":"Bool | ::Nil"},{"name":"write_concern","doc":null,"default_value":"nil","external_name":"write_concern","restriction":"WriteConcern | ::Nil"},{"name":"collation","doc":null,"default_value":"nil","external_name":"collation","restriction":"Collation | ::Nil"},{"name":"array_filters","doc":null,"default_value":"nil","external_name":"array_filters","restriction":""},{"name":"hint","doc":null,"default_value":"nil","external_name":"hint","restriction":"String | H | ::Nil"},{"name":"max_time_ms","doc":null,"default_value":"nil","external_name":"max_time_ms","restriction":"Int64 | ::Nil"}],"args_string":"(filter, update, *, sort = <span class=\"n\">nil</span>, new : Bool? = <span class=\"n\">nil</span>, fields = <span class=\"n\">nil</span>, upsert : Bool? = <span class=\"n\">nil</span>, bypass_document_validation : Bool? = <span class=\"n\">nil</span>, write_concern : WriteConcern? = <span class=\"n\">nil</span>, collation : Collation? = <span class=\"n\">nil</span>, array_filters = <span class=\"n\">nil</span>, hint : String | H? = <span class=\"n\">nil</span>, max_time_ms : Int64? = <span class=\"n\">nil</span>) : BSON? forall H","source_link":null,"def":{"name":"find_one_and_update","args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":""},{"name":"update","doc":null,"default_value":"","external_name":"update","restriction":""},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"sort","doc":null,"default_value":"nil","external_name":"sort","restriction":""},{"name":"new","doc":null,"default_value":"nil","external_name":"new","restriction":"Bool | ::Nil"},{"name":"fields","doc":null,"default_value":"nil","external_name":"fields","restriction":""},{"name":"upsert","doc":null,"default_value":"nil","external_name":"upsert","restriction":"Bool | ::Nil"},{"name":"bypass_document_validation","doc":null,"default_value":"nil","external_name":"bypass_document_validation","restriction":"Bool | ::Nil"},{"name":"write_concern","doc":null,"default_value":"nil","external_name":"write_concern","restriction":"WriteConcern | ::Nil"},{"name":"collation","doc":null,"default_value":"nil","external_name":"collation","restriction":"Collation | ::Nil"},{"name":"array_filters","doc":null,"default_value":"nil","external_name":"array_filters","restriction":""},{"name":"hint","doc":null,"default_value":"nil","external_name":"hint","restriction":"String | H | ::Nil"},{"name":"max_time_ms","doc":null,"default_value":"nil","external_name":"max_time_ms","restriction":"Int64 | ::Nil"}],"double_splat":null,"splat_index":2,"yields":null,"block_arg":null,"return_type":"BSON | ::Nil","visibility":"Public","body":"update = validate_update!(update)\nresult = self.command(Commands::FindAndModify, filter: filter, options: {update: update, sort: sort.try do\n  BSON.new(sort)\nend, new: new, fields: fields.try do\n  BSON.new(fields)\nend, upsert: upsert, bypass_document_validation: bypass_document_validation, write_concern: write_concern, collation: collation, array_filters: array_filters, hint: hint, max_time_ms: max_time_ms})\ncheck_find_and_modify_result!(result)\n"}},{"id":"insert_many(documents:Array,*,ordered:Bool?=nil,write_concern:WriteConcern?=nil,bypass_document_validation:Bool?=nil):Commands::Common::InsertResult?-instance-method","html_id":"insert_many(documents:Array,*,ordered:Bool?=nil,write_concern:WriteConcern?=nil,bypass_document_validation:Bool?=nil):Commands::Common::InsertResult?-instance-method","name":"insert_many","doc":"Inserts the provided document. If any documents are missing an identifier, they will be generated.\n\nNOTE: [for more details, please check the official documentation](https://docs.mongodb.com/manual/reference/command/insert/).","summary":"<p>Inserts the provided document.</p>","abstract":false,"args":[{"name":"documents","doc":null,"default_value":"","external_name":"documents","restriction":"Array"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"ordered","doc":null,"default_value":"nil","external_name":"ordered","restriction":"Bool | ::Nil"},{"name":"write_concern","doc":null,"default_value":"nil","external_name":"write_concern","restriction":"WriteConcern | ::Nil"},{"name":"bypass_document_validation","doc":null,"default_value":"nil","external_name":"bypass_document_validation","restriction":"Bool | ::Nil"}],"args_string":"(documents : Array, *, ordered : Bool? = <span class=\"n\">nil</span>, write_concern : WriteConcern? = <span class=\"n\">nil</span>, bypass_document_validation : Bool? = <span class=\"n\">nil</span>) : Commands::Common::InsertResult?","source_link":null,"def":{"name":"insert_many","args":[{"name":"documents","doc":null,"default_value":"","external_name":"documents","restriction":"Array"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"ordered","doc":null,"default_value":"nil","external_name":"ordered","restriction":"Bool | ::Nil"},{"name":"write_concern","doc":null,"default_value":"nil","external_name":"write_concern","restriction":"WriteConcern | ::Nil"},{"name":"bypass_document_validation","doc":null,"default_value":"nil","external_name":"bypass_document_validation","restriction":"Bool | ::Nil"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"Commands::Common::InsertResult | ::Nil","visibility":"Public","body":"if documents.size > 0\nelse\n  raise(Mongo::Error.new(\"Tried to insert an empty document array\"))\nend\nself.command(Commands::Insert, documents: documents, options: {ordered: ordered, write_concern: write_concern, bypass_document_validation: bypass_document_validation})\n"}},{"id":"insert_one(document,*,write_concern:WriteConcern?=nil,bypass_document_validation:Bool?=nil):Commands::Common::InsertResult?-instance-method","html_id":"insert_one(document,*,write_concern:WriteConcern?=nil,bypass_document_validation:Bool?=nil):Commands::Common::InsertResult?-instance-method","name":"insert_one","doc":"Inserts the provided document. If the document is missing an identifier, it will be generated.\n\nNOTE: [for more details, please check the official documentation](https://docs.mongodb.com/manual/reference/command/insert/).","summary":"<p>Inserts the provided document.</p>","abstract":false,"args":[{"name":"document","doc":null,"default_value":"","external_name":"document","restriction":""},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"write_concern","doc":null,"default_value":"nil","external_name":"write_concern","restriction":"WriteConcern | ::Nil"},{"name":"bypass_document_validation","doc":null,"default_value":"nil","external_name":"bypass_document_validation","restriction":"Bool | ::Nil"}],"args_string":"(document, *, write_concern : WriteConcern? = <span class=\"n\">nil</span>, bypass_document_validation : Bool? = <span class=\"n\">nil</span>) : Commands::Common::InsertResult?","source_link":null,"def":{"name":"insert_one","args":[{"name":"document","doc":null,"default_value":"","external_name":"document","restriction":""},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"write_concern","doc":null,"default_value":"nil","external_name":"write_concern","restriction":"WriteConcern | ::Nil"},{"name":"bypass_document_validation","doc":null,"default_value":"nil","external_name":"bypass_document_validation","restriction":"Bool | ::Nil"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"Commands::Common::InsertResult | ::Nil","visibility":"Public","body":"self.command(Commands::Insert, documents: [document], options: {write_concern: write_concern, bypass_document_validation: bypass_document_validation})"}},{"id":"list_indexes:Mongo::Cursor-instance-method","html_id":"list_indexes:Mongo::Cursor-instance-method","name":"list_indexes","doc":"Gets index information for all indexes in the collection.\n\nNOTE: [for more details, please check the official documentation](https://docs.mongodb.com/manual/reference/command/listIndexes/).","summary":"<p>Gets index information for all indexes in the collection.</p>","abstract":false,"args":[],"args_string":" : Mongo::Cursor","source_link":null,"def":{"name":"list_indexes","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Mongo::Cursor","visibility":"Public","body":"result = (self.command(Commands::ListIndexes)).not_nil!\nCursor.new(@database.client, result)\n"}},{"id":"name:CollectionKey-instance-method","html_id":"name:CollectionKey-instance-method","name":"name","doc":"The collection name.","summary":"<p>The collection name.</p>","abstract":false,"args":[],"args_string":" : CollectionKey","source_link":null,"def":{"name":"name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"CollectionKey","visibility":"Public","body":"@name"}},{"id":"read_concern:ReadConcern?-instance-method","html_id":"read_concern:ReadConcern?-instance-method","name":"read_concern","doc":"Read concern accessor.\n\nSee: [the official documentation](https://docs.mongodb.com/manual/reference/read-concern/index.html)","summary":"<p>Read concern accessor.</p>","abstract":false,"args":[],"args_string":" : ReadConcern?","source_link":null,"def":{"name":"read_concern","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"ReadConcern | ::Nil","visibility":"Public","body":"@read_concern"}},{"id":"read_concern=(read_concern:ReadConcern?)-instance-method","html_id":"read_concern=(read_concern:ReadConcern?)-instance-method","name":"read_concern=","doc":"Read concern accessor.\n\nSee: [the official documentation](https://docs.mongodb.com/manual/reference/read-concern/index.html)","summary":"<p>Read concern accessor.</p>","abstract":false,"args":[{"name":"read_concern","doc":null,"default_value":"","external_name":"read_concern","restriction":"ReadConcern | ::Nil"}],"args_string":"(read_concern : ReadConcern?)","source_link":null,"def":{"name":"read_concern=","args":[{"name":"read_concern","doc":null,"default_value":"","external_name":"read_concern","restriction":"ReadConcern | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@read_concern = read_concern"}},{"id":"read_preference:ReadPreference?-instance-method","html_id":"read_preference:ReadPreference?-instance-method","name":"read_preference","doc":"ReadPreference accessor.\n\nSee: [the official documentation](https://docs.mongodb.com/manual/core/read-preference/index.html).","summary":"<p>ReadPreference accessor.</p>","abstract":false,"args":[],"args_string":" : ReadPreference?","source_link":null,"def":{"name":"read_preference","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"ReadPreference | ::Nil","visibility":"Public","body":"@read_preference"}},{"id":"read_preference=(read_preference:ReadPreference?)-instance-method","html_id":"read_preference=(read_preference:ReadPreference?)-instance-method","name":"read_preference=","doc":"ReadPreference accessor.\n\nSee: [the official documentation](https://docs.mongodb.com/manual/core/read-preference/index.html).","summary":"<p>ReadPreference accessor.</p>","abstract":false,"args":[{"name":"read_preference","doc":null,"default_value":"","external_name":"read_preference","restriction":"ReadPreference | ::Nil"}],"args_string":"(read_preference : ReadPreference?)","source_link":null,"def":{"name":"read_preference=","args":[{"name":"read_preference","doc":null,"default_value":"","external_name":"read_preference","restriction":"ReadPreference | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@read_preference = read_preference"}},{"id":"replace_one(filter,replacement,*,upsert:Bool=false,collation:Collation?=nil,hint:String|H?=nil,ordered:Bool?=nil,write_concern:WriteConcern?=nil,bypass_document_validation:Bool?=nil):Commands::Common::UpdateResult?forallH-instance-method","html_id":"replace_one(filter,replacement,*,upsert:Bool=false,collation:Collation?=nil,hint:String|H?=nil,ordered:Bool?=nil,write_concern:WriteConcern?=nil,bypass_document_validation:Bool?=nil):Commands::Common::UpdateResult?forallH-instance-method","name":"replace_one","doc":"Replaces a single document.\n\nNOTE: [for more details, please check the official documentation](https://docs.mongodb.com/manual/reference/command/update/).","summary":"<p>Replaces a single document.</p>","abstract":false,"args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":""},{"name":"replacement","doc":null,"default_value":"","external_name":"replacement","restriction":""},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"upsert","doc":null,"default_value":"false","external_name":"upsert","restriction":"Bool"},{"name":"collation","doc":null,"default_value":"nil","external_name":"collation","restriction":"Collation | ::Nil"},{"name":"hint","doc":null,"default_value":"nil","external_name":"hint","restriction":"String | H | ::Nil"},{"name":"ordered","doc":null,"default_value":"nil","external_name":"ordered","restriction":"Bool | ::Nil"},{"name":"write_concern","doc":null,"default_value":"nil","external_name":"write_concern","restriction":"WriteConcern | ::Nil"},{"name":"bypass_document_validation","doc":null,"default_value":"nil","external_name":"bypass_document_validation","restriction":"Bool | ::Nil"}],"args_string":"(filter, replacement, *, upsert : Bool = <span class=\"n\">false</span>, collation : Collation? = <span class=\"n\">nil</span>, hint : String | H? = <span class=\"n\">nil</span>, ordered : Bool? = <span class=\"n\">nil</span>, write_concern : WriteConcern? = <span class=\"n\">nil</span>, bypass_document_validation : Bool? = <span class=\"n\">nil</span>) : Commands::Common::UpdateResult? forall H","source_link":null,"def":{"name":"replace_one","args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":""},{"name":"replacement","doc":null,"default_value":"","external_name":"replacement","restriction":""},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"upsert","doc":null,"default_value":"false","external_name":"upsert","restriction":"Bool"},{"name":"collation","doc":null,"default_value":"nil","external_name":"collation","restriction":"Collation | ::Nil"},{"name":"hint","doc":null,"default_value":"nil","external_name":"hint","restriction":"String | H | ::Nil"},{"name":"ordered","doc":null,"default_value":"nil","external_name":"ordered","restriction":"Bool | ::Nil"},{"name":"write_concern","doc":null,"default_value":"nil","external_name":"write_concern","restriction":"WriteConcern | ::Nil"},{"name":"bypass_document_validation","doc":null,"default_value":"nil","external_name":"bypass_document_validation","restriction":"Bool | ::Nil"}],"double_splat":null,"splat_index":2,"yields":null,"block_arg":null,"return_type":"Commands::Common::UpdateResult | ::Nil","visibility":"Public","body":"updates = [Tools.merge_bson({q: BSON.new(filter), u: validate_replacement!(replacement), multi: false, upsert: upsert}, {collation: collation, hint: hint})]\nself.command(Commands::Update, updates: updates, options: {ordered: ordered, write_concern: write_concern, bypass_document_validation: bypass_document_validation})\n"}},{"id":"stats(*,scale:Int32?=nil):BSON?-instance-method","html_id":"stats(*,scale:Int32?=nil):BSON?-instance-method","name":"stats","doc":"Returns a variety of storage statistics for the collection.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/collStats/).","summary":"<p>Returns a variety of storage statistics for the collection.</p>","abstract":false,"args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"scale","doc":null,"default_value":"nil","external_name":"scale","restriction":"Int32 | ::Nil"}],"args_string":"(*, scale : Int32? = <span class=\"n\">nil</span>) : BSON?","source_link":null,"def":{"name":"stats","args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"scale","doc":null,"default_value":"nil","external_name":"scale","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"BSON | ::Nil","visibility":"Public","body":"self.command(Commands::CollStats, options: {scale: scale})"}},{"id":"update_many(filter,update,*,upsert:Bool=false,array_filters=nil,collation:Collation?=nil,hint:String|H?=nil,ordered:Bool?=nil,write_concern:WriteConcern?=nil,bypass_document_validation:Bool?=nil):Commands::Common::UpdateResult?forallH-instance-method","html_id":"update_many(filter,update,*,upsert:Bool=false,array_filters=nil,collation:Collation?=nil,hint:String|H?=nil,ordered:Bool?=nil,write_concern:WriteConcern?=nil,bypass_document_validation:Bool?=nil):Commands::Common::UpdateResult?forallH-instance-method","name":"update_many","doc":"Updates multiple documents.\n\nNOTE: [for more details, please check the official documentation](https://docs.mongodb.com/manual/reference/command/update/).","summary":"<p>Updates multiple documents.</p>","abstract":false,"args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":""},{"name":"update","doc":null,"default_value":"","external_name":"update","restriction":""},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"upsert","doc":null,"default_value":"false","external_name":"upsert","restriction":"Bool"},{"name":"array_filters","doc":null,"default_value":"nil","external_name":"array_filters","restriction":""},{"name":"collation","doc":null,"default_value":"nil","external_name":"collation","restriction":"Collation | ::Nil"},{"name":"hint","doc":null,"default_value":"nil","external_name":"hint","restriction":"String | H | ::Nil"},{"name":"ordered","doc":null,"default_value":"nil","external_name":"ordered","restriction":"Bool | ::Nil"},{"name":"write_concern","doc":null,"default_value":"nil","external_name":"write_concern","restriction":"WriteConcern | ::Nil"},{"name":"bypass_document_validation","doc":null,"default_value":"nil","external_name":"bypass_document_validation","restriction":"Bool | ::Nil"}],"args_string":"(filter, update, *, upsert : Bool = <span class=\"n\">false</span>, array_filters = <span class=\"n\">nil</span>, collation : Collation? = <span class=\"n\">nil</span>, hint : String | H? = <span class=\"n\">nil</span>, ordered : Bool? = <span class=\"n\">nil</span>, write_concern : WriteConcern? = <span class=\"n\">nil</span>, bypass_document_validation : Bool? = <span class=\"n\">nil</span>) : Commands::Common::UpdateResult? forall H","source_link":null,"def":{"name":"update_many","args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":""},{"name":"update","doc":null,"default_value":"","external_name":"update","restriction":""},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"upsert","doc":null,"default_value":"false","external_name":"upsert","restriction":"Bool"},{"name":"array_filters","doc":null,"default_value":"nil","external_name":"array_filters","restriction":""},{"name":"collation","doc":null,"default_value":"nil","external_name":"collation","restriction":"Collation | ::Nil"},{"name":"hint","doc":null,"default_value":"nil","external_name":"hint","restriction":"String | H | ::Nil"},{"name":"ordered","doc":null,"default_value":"nil","external_name":"ordered","restriction":"Bool | ::Nil"},{"name":"write_concern","doc":null,"default_value":"nil","external_name":"write_concern","restriction":"WriteConcern | ::Nil"},{"name":"bypass_document_validation","doc":null,"default_value":"nil","external_name":"bypass_document_validation","restriction":"Bool | ::Nil"}],"double_splat":null,"splat_index":2,"yields":null,"block_arg":null,"return_type":"Commands::Common::UpdateResult | ::Nil","visibility":"Public","body":"updates = [Tools.merge_bson({q: BSON.new(filter), u: validate_update!(update), multi: true, upsert: upsert}, {array_filters: array_filters, collation: collation, hint: hint})]\nself.command(Commands::Update, updates: updates, options: {ordered: ordered, write_concern: write_concern, bypass_document_validation: bypass_document_validation})\n"}},{"id":"update_one(filter,update,*,upsert:Bool=false,array_filters=nil,collation:Collation?=nil,hint:String|H?=nil,ordered:Bool?=nil,write_concern:WriteConcern?=nil,bypass_document_validation:Bool?=nil):Commands::Common::UpdateResult?forallH-instance-method","html_id":"update_one(filter,update,*,upsert:Bool=false,array_filters=nil,collation:Collation?=nil,hint:String|H?=nil,ordered:Bool?=nil,write_concern:WriteConcern?=nil,bypass_document_validation:Bool?=nil):Commands::Common::UpdateResult?forallH-instance-method","name":"update_one","doc":"Updates one document.\n\nNOTE: [for more details, please check the official documentation](https://docs.mongodb.com/manual/reference/command/update/).","summary":"<p>Updates one document.</p>","abstract":false,"args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":""},{"name":"update","doc":null,"default_value":"","external_name":"update","restriction":""},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"upsert","doc":null,"default_value":"false","external_name":"upsert","restriction":"Bool"},{"name":"array_filters","doc":null,"default_value":"nil","external_name":"array_filters","restriction":""},{"name":"collation","doc":null,"default_value":"nil","external_name":"collation","restriction":"Collation | ::Nil"},{"name":"hint","doc":null,"default_value":"nil","external_name":"hint","restriction":"String | H | ::Nil"},{"name":"ordered","doc":null,"default_value":"nil","external_name":"ordered","restriction":"Bool | ::Nil"},{"name":"write_concern","doc":null,"default_value":"nil","external_name":"write_concern","restriction":"WriteConcern | ::Nil"},{"name":"bypass_document_validation","doc":null,"default_value":"nil","external_name":"bypass_document_validation","restriction":"Bool | ::Nil"}],"args_string":"(filter, update, *, upsert : Bool = <span class=\"n\">false</span>, array_filters = <span class=\"n\">nil</span>, collation : Collation? = <span class=\"n\">nil</span>, hint : String | H? = <span class=\"n\">nil</span>, ordered : Bool? = <span class=\"n\">nil</span>, write_concern : WriteConcern? = <span class=\"n\">nil</span>, bypass_document_validation : Bool? = <span class=\"n\">nil</span>) : Commands::Common::UpdateResult? forall H","source_link":null,"def":{"name":"update_one","args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":""},{"name":"update","doc":null,"default_value":"","external_name":"update","restriction":""},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"upsert","doc":null,"default_value":"false","external_name":"upsert","restriction":"Bool"},{"name":"array_filters","doc":null,"default_value":"nil","external_name":"array_filters","restriction":""},{"name":"collation","doc":null,"default_value":"nil","external_name":"collation","restriction":"Collation | ::Nil"},{"name":"hint","doc":null,"default_value":"nil","external_name":"hint","restriction":"String | H | ::Nil"},{"name":"ordered","doc":null,"default_value":"nil","external_name":"ordered","restriction":"Bool | ::Nil"},{"name":"write_concern","doc":null,"default_value":"nil","external_name":"write_concern","restriction":"WriteConcern | ::Nil"},{"name":"bypass_document_validation","doc":null,"default_value":"nil","external_name":"bypass_document_validation","restriction":"Bool | ::Nil"}],"double_splat":null,"splat_index":2,"yields":null,"block_arg":null,"return_type":"Commands::Common::UpdateResult | ::Nil","visibility":"Public","body":"updates = [Tools.merge_bson({q: BSON.new(filter), u: validate_update!(update), multi: false, upsert: upsert}, {array_filters: array_filters, collation: collation, hint: hint})]\nself.command(Commands::Update, updates: updates, options: {ordered: ordered, write_concern: write_concern, bypass_document_validation: bypass_document_validation})\n"}},{"id":"watch(pipeline:Array=[]ofBSON,*,full_document:String?=nil,start_at_operation_time:Time?=nil,resume_after:BSON?=nil,start_after:BSON?=nil,max_await_time_ms:Int64?=nil,batch_size:Int32?=nil,collation:Collation?=nil,read_concern:ReadConcern?=nil,read_preference:ReadPreference?=nil):Mongo::ChangeStream::Cursor-instance-method","html_id":"watch(pipeline:Array=[]ofBSON,*,full_document:String?=nil,start_at_operation_time:Time?=nil,resume_after:BSON?=nil,start_after:BSON?=nil,max_await_time_ms:Int64?=nil,batch_size:Int32?=nil,collation:Collation?=nil,read_concern:ReadConcern?=nil,read_preference:ReadPreference?=nil):Mongo::ChangeStream::Cursor-instance-method","name":"watch","doc":"Returns a `ChangeStream::Cursor` watching a specific collection.\n\n```\nclient = Mongo::Client.new\ncollection = client[\"db\"][\"coll\"]\n\nspawn {\n  cursor = collection.watch(\n    [\n      {\"$match\": {\"operationType\": \"insert\"}},\n    ],\n    max_await_time_ms: 10000\n  )\n  # cursor.of(BSON) converts to the Mongo::ChangeStream::Document(BSON) type.\n  cursor.of(BSON).each { |doc|\n    puts doc.to_bson.to_json\n  }\n}\n\n100.times do |i|\n  collection.insert_one({count: i})\nend\n\nsleep\n```\n\nNOTE: [for more details, please check the official manual](https://docs.mongodb.com/manual/changeStreams/index.html).","summary":"<p>Returns a <code><a href=\"../Mongo/ChangeStream/Cursor.html\">ChangeStream::Cursor</a></code> watching a specific collection.</p>","abstract":false,"args":[{"name":"pipeline","doc":null,"default_value":"[] of BSON","external_name":"pipeline","restriction":"Array"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"full_document","doc":null,"default_value":"nil","external_name":"full_document","restriction":"String | ::Nil"},{"name":"start_at_operation_time","doc":null,"default_value":"nil","external_name":"start_at_operation_time","restriction":"Time | ::Nil"},{"name":"resume_after","doc":null,"default_value":"nil","external_name":"resume_after","restriction":"BSON | ::Nil"},{"name":"start_after","doc":null,"default_value":"nil","external_name":"start_after","restriction":"BSON | ::Nil"},{"name":"max_await_time_ms","doc":null,"default_value":"nil","external_name":"max_await_time_ms","restriction":"Int64 | ::Nil"},{"name":"batch_size","doc":null,"default_value":"nil","external_name":"batch_size","restriction":"Int32 | ::Nil"},{"name":"collation","doc":null,"default_value":"nil","external_name":"collation","restriction":"Collation | ::Nil"},{"name":"read_concern","doc":null,"default_value":"nil","external_name":"read_concern","restriction":"ReadConcern | ::Nil"},{"name":"read_preference","doc":null,"default_value":"nil","external_name":"read_preference","restriction":"ReadPreference | ::Nil"}],"args_string":"(pipeline : Array = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">BSON</span>, *, full_document : String? = <span class=\"n\">nil</span>, start_at_operation_time : Time? = <span class=\"n\">nil</span>, resume_after : BSON? = <span class=\"n\">nil</span>, start_after : BSON? = <span class=\"n\">nil</span>, max_await_time_ms : Int64? = <span class=\"n\">nil</span>, batch_size : Int32? = <span class=\"n\">nil</span>, collation : Collation? = <span class=\"n\">nil</span>, read_concern : ReadConcern? = <span class=\"n\">nil</span>, read_preference : ReadPreference? = <span class=\"n\">nil</span>) : Mongo::ChangeStream::Cursor","source_link":null,"def":{"name":"watch","args":[{"name":"pipeline","doc":null,"default_value":"[] of BSON","external_name":"pipeline","restriction":"Array"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"full_document","doc":null,"default_value":"nil","external_name":"full_document","restriction":"String | ::Nil"},{"name":"start_at_operation_time","doc":null,"default_value":"nil","external_name":"start_at_operation_time","restriction":"Time | ::Nil"},{"name":"resume_after","doc":null,"default_value":"nil","external_name":"resume_after","restriction":"BSON | ::Nil"},{"name":"start_after","doc":null,"default_value":"nil","external_name":"start_after","restriction":"BSON | ::Nil"},{"name":"max_await_time_ms","doc":null,"default_value":"nil","external_name":"max_await_time_ms","restriction":"Int64 | ::Nil"},{"name":"batch_size","doc":null,"default_value":"nil","external_name":"batch_size","restriction":"Int32 | ::Nil"},{"name":"collation","doc":null,"default_value":"nil","external_name":"collation","restriction":"Collation | ::Nil"},{"name":"read_concern","doc":null,"default_value":"nil","external_name":"read_concern","restriction":"ReadConcern | ::Nil"},{"name":"read_preference","doc":null,"default_value":"nil","external_name":"read_preference","restriction":"ReadPreference | ::Nil"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"Mongo::ChangeStream::Cursor","visibility":"Public","body":"ChangeStream::Cursor.new(client: @database.client, database: @database.name, collection: name, pipeline: pipeline.map do |elt|\n  BSON.new(elt)\nend, full_document: full_document, resume_after: resume_after, start_after: start_after, start_at_operation_time: start_at_operation_time, read_concern: read_concern, read_preference: read_preference, max_time_ms: max_await_time_ms, batch_size: batch_size, collation: collation)"}},{"id":"write_concern:WriteConcern?-instance-method","html_id":"write_concern:WriteConcern?-instance-method","name":"write_concern","doc":"Write concern accessor.\n\nSee: [the official documentation](https://docs.mongodb.com/manual/reference/write-concern/index.html)","summary":"<p>Write concern accessor.</p>","abstract":false,"args":[],"args_string":" : WriteConcern?","source_link":null,"def":{"name":"write_concern","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"WriteConcern | ::Nil","visibility":"Public","body":"@write_concern"}},{"id":"write_concern=(write_concern:WriteConcern?)-instance-method","html_id":"write_concern=(write_concern:WriteConcern?)-instance-method","name":"write_concern=","doc":"Write concern accessor.\n\nSee: [the official documentation](https://docs.mongodb.com/manual/reference/write-concern/index.html)","summary":"<p>Write concern accessor.</p>","abstract":false,"args":[{"name":"write_concern","doc":null,"default_value":"","external_name":"write_concern","restriction":"WriteConcern | ::Nil"}],"args_string":"(write_concern : WriteConcern?)","source_link":null,"def":{"name":"write_concern=","args":[{"name":"write_concern","doc":null,"default_value":"","external_name":"write_concern","restriction":"WriteConcern | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@write_concern = write_concern"}}],"macros":[],"types":[{"html_id":"cryomongo/Mongo/Collection/CollectionKey","path":"Mongo/Collection/CollectionKey.html","kind":"alias","full_name":"Mongo::Collection::CollectionKey","name":"CollectionKey","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":true,"aliased":"(Int32 | String)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Collection","kind":"class","full_name":"Mongo::Collection","name":"Collection"},"doc":"A collection name can be a String or an Integer.","summary":"<p>A collection name can be a String or an Integer.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"cryomongo/Mongo/Commands","path":"Mongo/Commands.html","kind":"module","full_name":"Mongo::Commands","name":"Commands","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo","kind":"module","full_name":"Mongo","name":"Mongo"},"doc":"This module contains the [Database Commands](https://docs.mongodb.com/manual/reference/command/) supported by the `cryomongo` driver.","summary":"<p>This module contains the <a href=\"https://docs.mongodb.com/manual/reference/command/\" target=\"_blank\">Database Commands</a> supported by the <code>cryomongo</code> driver.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"cryomongo/Mongo/Commands/Aggregate","path":"Mongo/Commands/Aggregate.html","kind":"module","full_name":"Mongo::Commands::Aggregate","name":"Aggregate","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/Aggregate","kind":"module","full_name":"Mongo::Commands::Aggregate","name":"Aggregate"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"Performs aggregation operation using the aggregation pipeline.\nThe pipeline allows users to process data from a collection or other source with a sequence of stage-based manipulations.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/aggregate/).","summary":"<p>Performs aggregation operation using the aggregation pipeline.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command(database:String,collection:Collection::CollectionKey,pipeline:Array,options)-instance-method","html_id":"command(database:String,collection:Collection::CollectionKey,pipeline:Array,options)-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"},{"name":"pipeline","doc":null,"default_value":"","external_name":"pipeline","restriction":"Array"},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"args_string":"(database : String, collection : Collection::CollectionKey, pipeline : Array, options)","source_link":null,"def":{"name":"command","args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"},{"name":"pipeline","doc":null,"default_value":"","external_name":"pipeline","restriction":"Array"},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"need_cursor = true\nbody, sequences = Commands.make({aggregate: collection, pipeline: pipeline.map do |elt|\n  BSON.new(elt)\nend, \"$db\": database}, options) do |_, key, value|\n  if ((key.to_s == \"explain\") || (key.to_s == \"cursor\")) && (!value.nil?)\n    need_cursor = false\n  end\n  false\nend\nif need_cursor\n  body[\"cursor\"] = BSON.new\nend\n{body, sequences}\n"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if bson[\"cursor\"]?\nelse\n  raise(Mongo::Error.new(\"Explain is not supported\"))\nend\nCommon::QueryResult.from_bson(bson)\n"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/BuildInfo","path":"Mongo/Commands/BuildInfo.html","kind":"module","full_name":"Mongo::Commands::BuildInfo","name":"BuildInfo","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/BuildInfo","kind":"module","full_name":"Mongo::Commands::BuildInfo","name":"BuildInfo"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"The *buildInfo* command is an administrative command which returns a build summary for the current mongod.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/buildInfo/).","summary":"<p>The <em>buildInfo</em> command is an administrative command which returns a build summary for the current mongod.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command-instance-method","html_id":"command-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"command","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({buildInfo: 1, \"$db\": \"admin\"})"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Result.from_bson(bson)"}}],"macros":[],"types":[{"html_id":"cryomongo/Mongo/Commands/BuildInfo/Result","path":"Mongo/Commands/BuildInfo/Result.html","kind":"struct","full_name":"Mongo::Commands::BuildInfo::Result","name":"Result","abstract":false,"superclass":{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"cryomongo/Mongo/Commands/Common/Result","kind":"module","full_name":"Mongo::Commands::Common::Result","name":"Result"},{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cryomongo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"cryomongo/Mongo/Commands/Common/Result","kind":"module","full_name":"Mongo::Commands::Common::Result","name":"Result"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands/BuildInfo","kind":"module","full_name":"Mongo::Commands::BuildInfo","name":"BuildInfo"},"doc":null,"summary":null,"class_methods":[{"id":"from_bson(bson:BSON)-class-method","html_id":"from_bson(bson:BSON)-class-method","name":"from_bson","doc":"NOTE: See `self.new`.","summary":"<p><span class=\"flag purple\">NOTE</span>  See <code>self<a href=\"../../../Mongo/Commands/BuildInfo/Result.html#new(bson:BSON)-class-method\">.new</a></code>.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"from_bson","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.new(bson)"}}],"constructors":[{"id":"new(bson:BSON)-class-method","html_id":"new(bson:BSON)-class-method","name":"new","doc":"Allocate an instance and copies data from a BSON struct.\n\n```\nclass User\n  include BSON::Serializable\n  property name : String\nend\n\ndata = BSON.new\ndata[\"name\"] = \"John\"\nUser.new(data)\n```","summary":"<p>Allocate an instance and copies data from a BSON struct.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"new","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(bson)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"allocator:String?-instance-method","html_id":"allocator:String?-instance-method","name":"allocator","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String?","source_link":null,"def":{"name":"allocator","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"@allocator"}},{"id":"allocator=(allocator:String?)-instance-method","html_id":"allocator=(allocator:String?)-instance-method","name":"allocator=","doc":null,"summary":null,"abstract":false,"args":[{"name":"allocator","doc":null,"default_value":"","external_name":"allocator","restriction":"String | ::Nil"}],"args_string":"(allocator : String?)","source_link":null,"def":{"name":"allocator=","args":[{"name":"allocator","doc":null,"default_value":"","external_name":"allocator","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@allocator = allocator"}},{"id":"bits:Float64?-instance-method","html_id":"bits:Float64?-instance-method","name":"bits","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64?","source_link":null,"def":{"name":"bits","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64 | ::Nil","visibility":"Public","body":"@bits"}},{"id":"bits=(bits:Float64?)-instance-method","html_id":"bits=(bits:Float64?)-instance-method","name":"bits=","doc":null,"summary":null,"abstract":false,"args":[{"name":"bits","doc":null,"default_value":"","external_name":"bits","restriction":"Float64 | ::Nil"}],"args_string":"(bits : Float64?)","source_link":null,"def":{"name":"bits=","args":[{"name":"bits","doc":null,"default_value":"","external_name":"bits","restriction":"Float64 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@bits = bits"}},{"id":"cluster_time:BSON?-instance-method","html_id":"cluster_time:BSON?-instance-method","name":"cluster_time","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON?","source_link":null,"def":{"name":"cluster_time","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON | ::Nil","visibility":"Public","body":"@cluster_time"}},{"id":"cluster_time=(cluster_time:BSON?)-instance-method","html_id":"cluster_time=(cluster_time:BSON?)-instance-method","name":"cluster_time=","doc":null,"summary":null,"abstract":false,"args":[{"name":"cluster_time","doc":null,"default_value":"","external_name":"cluster_time","restriction":"BSON | ::Nil"}],"args_string":"(cluster_time : BSON?)","source_link":null,"def":{"name":"cluster_time=","args":[{"name":"cluster_time","doc":null,"default_value":"","external_name":"cluster_time","restriction":"BSON | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@cluster_time = cluster_time"}},{"id":"compiler_flags:String?-instance-method","html_id":"compiler_flags:String?-instance-method","name":"compiler_flags","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String?","source_link":null,"def":{"name":"compiler_flags","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"@compiler_flags"}},{"id":"compiler_flags=(compiler_flags:String?)-instance-method","html_id":"compiler_flags=(compiler_flags:String?)-instance-method","name":"compiler_flags=","doc":null,"summary":null,"abstract":false,"args":[{"name":"compiler_flags","doc":null,"default_value":"","external_name":"compiler_flags","restriction":"String | ::Nil"}],"args_string":"(compiler_flags : String?)","source_link":null,"def":{"name":"compiler_flags=","args":[{"name":"compiler_flags","doc":null,"default_value":"","external_name":"compiler_flags","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@compiler_flags = compiler_flags"}},{"id":"debug:Bool?-instance-method","html_id":"debug:Bool?-instance-method","name":"debug","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool?","source_link":null,"def":{"name":"debug","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool | ::Nil","visibility":"Public","body":"@debug"}},{"id":"debug=(debug:Bool?)-instance-method","html_id":"debug=(debug:Bool?)-instance-method","name":"debug=","doc":null,"summary":null,"abstract":false,"args":[{"name":"debug","doc":null,"default_value":"","external_name":"debug","restriction":"Bool | ::Nil"}],"args_string":"(debug : Bool?)","source_link":null,"def":{"name":"debug=","args":[{"name":"debug","doc":null,"default_value":"","external_name":"debug","restriction":"Bool | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@debug = debug"}},{"id":"git_version:String?-instance-method","html_id":"git_version:String?-instance-method","name":"git_version","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String?","source_link":null,"def":{"name":"git_version","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"@git_version"}},{"id":"git_version=(git_version:String?)-instance-method","html_id":"git_version=(git_version:String?)-instance-method","name":"git_version=","doc":null,"summary":null,"abstract":false,"args":[{"name":"git_version","doc":null,"default_value":"","external_name":"git_version","restriction":"String | ::Nil"}],"args_string":"(git_version : String?)","source_link":null,"def":{"name":"git_version=","args":[{"name":"git_version","doc":null,"default_value":"","external_name":"git_version","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@git_version = git_version"}},{"id":"javascript_engine:String?-instance-method","html_id":"javascript_engine:String?-instance-method","name":"javascript_engine","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String?","source_link":null,"def":{"name":"javascript_engine","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"@javascript_engine"}},{"id":"javascript_engine=(javascript_engine:String?)-instance-method","html_id":"javascript_engine=(javascript_engine:String?)-instance-method","name":"javascript_engine=","doc":null,"summary":null,"abstract":false,"args":[{"name":"javascript_engine","doc":null,"default_value":"","external_name":"javascript_engine","restriction":"String | ::Nil"}],"args_string":"(javascript_engine : String?)","source_link":null,"def":{"name":"javascript_engine=","args":[{"name":"javascript_engine","doc":null,"default_value":"","external_name":"javascript_engine","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@javascript_engine = javascript_engine"}},{"id":"loader_flags:String?-instance-method","html_id":"loader_flags:String?-instance-method","name":"loader_flags","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String?","source_link":null,"def":{"name":"loader_flags","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"@loader_flags"}},{"id":"loader_flags=(loader_flags:String?)-instance-method","html_id":"loader_flags=(loader_flags:String?)-instance-method","name":"loader_flags=","doc":null,"summary":null,"abstract":false,"args":[{"name":"loader_flags","doc":null,"default_value":"","external_name":"loader_flags","restriction":"String | ::Nil"}],"args_string":"(loader_flags : String?)","source_link":null,"def":{"name":"loader_flags=","args":[{"name":"loader_flags","doc":null,"default_value":"","external_name":"loader_flags","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@loader_flags = loader_flags"}},{"id":"max_bson_object_size:Float64?-instance-method","html_id":"max_bson_object_size:Float64?-instance-method","name":"max_bson_object_size","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64?","source_link":null,"def":{"name":"max_bson_object_size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64 | ::Nil","visibility":"Public","body":"@max_bson_object_size"}},{"id":"max_bson_object_size=(max_bson_object_size:Float64?)-instance-method","html_id":"max_bson_object_size=(max_bson_object_size:Float64?)-instance-method","name":"max_bson_object_size=","doc":null,"summary":null,"abstract":false,"args":[{"name":"max_bson_object_size","doc":null,"default_value":"","external_name":"max_bson_object_size","restriction":"Float64 | ::Nil"}],"args_string":"(max_bson_object_size : Float64?)","source_link":null,"def":{"name":"max_bson_object_size=","args":[{"name":"max_bson_object_size","doc":null,"default_value":"","external_name":"max_bson_object_size","restriction":"Float64 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@max_bson_object_size = max_bson_object_size"}},{"id":"ok:Float64-instance-method","html_id":"ok:Float64-instance-method","name":"ok","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","source_link":null,"def":{"name":"ok","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@ok"}},{"id":"ok=(ok:Float64)-instance-method","html_id":"ok=(ok:Float64)-instance-method","name":"ok=","doc":null,"summary":null,"abstract":false,"args":[{"name":"ok","doc":null,"default_value":"","external_name":"ok","restriction":"Float64"}],"args_string":"(ok : Float64)","source_link":null,"def":{"name":"ok=","args":[{"name":"ok","doc":null,"default_value":"","external_name":"ok","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@ok = ok"}},{"id":"openssl:BSON?-instance-method","html_id":"openssl:BSON?-instance-method","name":"openssl","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON?","source_link":null,"def":{"name":"openssl","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON | ::Nil","visibility":"Public","body":"@openssl"}},{"id":"openssl=(openssl:BSON?)-instance-method","html_id":"openssl=(openssl:BSON?)-instance-method","name":"openssl=","doc":null,"summary":null,"abstract":false,"args":[{"name":"openssl","doc":null,"default_value":"","external_name":"openssl","restriction":"BSON | ::Nil"}],"args_string":"(openssl : BSON?)","source_link":null,"def":{"name":"openssl=","args":[{"name":"openssl","doc":null,"default_value":"","external_name":"openssl","restriction":"BSON | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@openssl = openssl"}},{"id":"operation_time:BSON::Timestamp?-instance-method","html_id":"operation_time:BSON::Timestamp?-instance-method","name":"operation_time","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON::Timestamp?","source_link":null,"def":{"name":"operation_time","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON::Timestamp | ::Nil","visibility":"Public","body":"@operation_time"}},{"id":"operation_time=(operation_time:BSON::Timestamp?)-instance-method","html_id":"operation_time=(operation_time:BSON::Timestamp?)-instance-method","name":"operation_time=","doc":null,"summary":null,"abstract":false,"args":[{"name":"operation_time","doc":null,"default_value":"","external_name":"operation_time","restriction":"BSON::Timestamp | ::Nil"}],"args_string":"(operation_time : BSON::Timestamp?)","source_link":null,"def":{"name":"operation_time=","args":[{"name":"operation_time","doc":null,"default_value":"","external_name":"operation_time","restriction":"BSON::Timestamp | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@operation_time = operation_time"}},{"id":"sys_info:String?-instance-method","html_id":"sys_info:String?-instance-method","name":"sys_info","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String?","source_link":null,"def":{"name":"sys_info","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"@sys_info"}},{"id":"sys_info=(sys_info:String?)-instance-method","html_id":"sys_info=(sys_info:String?)-instance-method","name":"sys_info=","doc":null,"summary":null,"abstract":false,"args":[{"name":"sys_info","doc":null,"default_value":"","external_name":"sys_info","restriction":"String | ::Nil"}],"args_string":"(sys_info : String?)","source_link":null,"def":{"name":"sys_info=","args":[{"name":"sys_info","doc":null,"default_value":"","external_name":"sys_info","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@sys_info = sys_info"}},{"id":"to_bson(bson=BSON.new)-instance-method","html_id":"to_bson(bson=BSON.new)-instance-method","name":"to_bson","doc":"Converts to a BSON representation.\n\n```\nuser = User.new name: \"John\"\nbson = user.to_bson\n```","summary":"<p>Converts to a BSON representation.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"args_string":"(bson = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>)","source_link":null,"def":{"name":"to_bson","args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n      {% global_options = @type.annotations(BSON::Options) %}\n      {% camelize = global_options.reduce(false) do |_, a|\n  a[:camelize]\nend %}\n      {% for ivar in @type.instance_vars %}\n        {% ann = ivar.annotation(BSON::Field) %}\n        {% typ = ivar.type.union_types.select do |t|\n  t != Nil\nend[0] %}\n        {% key = ivar.name %}\n        {% bson_key = ann ? ann[:key].id : camelize ? ivar.name.camelcase(lower: camelize == \"lower\") : ivar.name %}\n        {% if ann && ann[:ignore] %}{% else %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            unless self.{{ key }}.nil?\n          {% end %}\n            {% if typ.has_method?(:to_bson) %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}.try &.to_bson\n            {% else %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}\n            {% end %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            end\n          {% end %}\n        {% end %}\n      {% end %}\n      {% end %}\nbson\n"}},{"id":"version:String?-instance-method","html_id":"version:String?-instance-method","name":"version","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String?","source_link":null,"def":{"name":"version","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"@version"}},{"id":"version=(version:String?)-instance-method","html_id":"version=(version:String?)-instance-method","name":"version=","doc":null,"summary":null,"abstract":false,"args":[{"name":"version","doc":null,"default_value":"","external_name":"version","restriction":"String | ::Nil"}],"args_string":"(version : String?)","source_link":null,"def":{"name":"version=","args":[{"name":"version","doc":null,"default_value":"","external_name":"version","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@version = version"}},{"id":"version_array:Array(Float64)?-instance-method","html_id":"version_array:Array(Float64)?-instance-method","name":"version_array","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Float64)?","source_link":null,"def":{"name":"version_array","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Float64) | ::Nil","visibility":"Public","body":"@version_array"}},{"id":"version_array=(version_array:Array(Float64)?)-instance-method","html_id":"version_array=(version_array:Array(Float64)?)-instance-method","name":"version_array=","doc":null,"summary":null,"abstract":false,"args":[{"name":"version_array","doc":null,"default_value":"","external_name":"version_array","restriction":"Array(Float64) | ::Nil"}],"args_string":"(version_array : Array(Float64)?)","source_link":null,"def":{"name":"version_array=","args":[{"name":"version_array","doc":null,"default_value":"","external_name":"version_array","restriction":"Array(Float64) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@version_array = version_array"}}],"macros":[],"types":[]}]},{"html_id":"cryomongo/Mongo/Commands/CloneCollectionAsCapped","path":"Mongo/Commands/CloneCollectionAsCapped.html","kind":"module","full_name":"Mongo::Commands::CloneCollectionAsCapped","name":"CloneCollectionAsCapped","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/CloneCollectionAsCapped","kind":"module","full_name":"Mongo::Commands::CloneCollectionAsCapped","name":"CloneCollectionAsCapped"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"The *cloneCollectionAsCapped* command creates a new capped collection from an existing, non-capped collection within the same database.\nThe operation does not affect the original non-capped collection.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/cloneCollectionAsCapped/#dbcmd.cloneCollectionAsCapped).","summary":"<p>The <em>cloneCollectionAsCapped</em> command creates a new capped collection from an existing, non-capped collection within the same database.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command(database:String,collection:Collection::CollectionKey,to_collection:Collection::CollectionKey,size:Int64,options)-instance-method","html_id":"command(database:String,collection:Collection::CollectionKey,to_collection:Collection::CollectionKey,size:Int64,options)-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"},{"name":"to_collection","doc":null,"default_value":"","external_name":"to_collection","restriction":"Collection::CollectionKey"},{"name":"size","doc":null,"default_value":"","external_name":"size","restriction":"Int64"},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"args_string":"(database : String, collection : Collection::CollectionKey, to_collection : Collection::CollectionKey, size : Int64, options)","source_link":null,"def":{"name":"command","args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"},{"name":"to_collection","doc":null,"default_value":"","external_name":"to_collection","restriction":"Collection::CollectionKey"},{"name":"size","doc":null,"default_value":"","external_name":"size","restriction":"Int64"},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({cloneCollectionAsCapped: collection, toCollection: to_collection, size: size, \"$db\": database}, options)"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Common::BaseResult.from_bson(bson)"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/CollMod","path":"Mongo/Commands/CollMod.html","kind":"module","full_name":"Mongo::Commands::CollMod","name":"CollMod","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/CollMod","kind":"module","full_name":"Mongo::Commands::CollMod","name":"CollMod"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"*collMod* makes it possible to add options to a collection or to modify view definitions.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/collMod/).","summary":"<p><em>collMod</em> makes it possible to add options to a collection or to modify view definitions.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command(database:String,collection:Collection::CollectionKey,options)-instance-method","html_id":"command(database:String,collection:Collection::CollectionKey,options)-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"args_string":"(database : String, collection : Collection::CollectionKey, options)","source_link":null,"def":{"name":"command","args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({collMod: collection, \"$db\": database}, options)"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Common::BaseResult.from_bson(bson)"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/CollStats","path":"Mongo/Commands/CollStats.html","kind":"module","full_name":"Mongo::Commands::CollStats","name":"CollStats","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/CollStats","kind":"module","full_name":"Mongo::Commands::CollStats","name":"CollStats"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"The *collStats* command returns a variety of storage statistics for a given collection.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/collStats/).","summary":"<p>The <em>collStats</em> command returns a variety of storage statistics for a given collection.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command(database:String,collection:Collection::CollectionKey,options)-instance-method","html_id":"command(database:String,collection:Collection::CollectionKey,options)-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"args_string":"(database : String, collection : Collection::CollectionKey, options)","source_link":null,"def":{"name":"command","args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({collStats: collection, \"$db\": database}, options)"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"bson"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/Common","path":"Mongo/Commands/Common.html","kind":"module","full_name":"Mongo::Commands::Common","name":"Common","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"Common results.","summary":"<p>Common results.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"cryomongo/Mongo/Commands/Common/BaseResult","path":"Mongo/Commands/Common/BaseResult.html","kind":"struct","full_name":"Mongo::Commands::Common::BaseResult","name":"BaseResult","abstract":false,"superclass":{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"cryomongo/Mongo/Commands/Common/Result","kind":"module","full_name":"Mongo::Commands::Common::Result","name":"Result"},{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cryomongo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"cryomongo/Mongo/Commands/Common/Result","kind":"module","full_name":"Mongo::Commands::Common::Result","name":"Result"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands/Common","kind":"module","full_name":"Mongo::Commands::Common","name":"Common"},"doc":"A Base MongoDB result.","summary":"<p>A Base MongoDB result.</p>","class_methods":[{"id":"from_bson(bson:BSON)-class-method","html_id":"from_bson(bson:BSON)-class-method","name":"from_bson","doc":"NOTE: See `self.new`.","summary":"<p><span class=\"flag purple\">NOTE</span>  See <code>self<a href=\"../../../Mongo/Commands/Common/BaseResult.html#new(bson:BSON)-class-method\">.new</a></code>.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"from_bson","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.new(bson)"}}],"constructors":[{"id":"new(bson:BSON)-class-method","html_id":"new(bson:BSON)-class-method","name":"new","doc":"Allocate an instance and copies data from a BSON struct.\n\n```\nclass User\n  include BSON::Serializable\n  property name : String\nend\n\ndata = BSON.new\ndata[\"name\"] = \"John\"\nUser.new(data)\n```","summary":"<p>Allocate an instance and copies data from a BSON struct.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"new","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(bson)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"cluster_time:BSON?-instance-method","html_id":"cluster_time:BSON?-instance-method","name":"cluster_time","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON?","source_link":null,"def":{"name":"cluster_time","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON | ::Nil","visibility":"Public","body":"@cluster_time"}},{"id":"cluster_time=(cluster_time:BSON?)-instance-method","html_id":"cluster_time=(cluster_time:BSON?)-instance-method","name":"cluster_time=","doc":null,"summary":null,"abstract":false,"args":[{"name":"cluster_time","doc":null,"default_value":"","external_name":"cluster_time","restriction":"BSON | ::Nil"}],"args_string":"(cluster_time : BSON?)","source_link":null,"def":{"name":"cluster_time=","args":[{"name":"cluster_time","doc":null,"default_value":"","external_name":"cluster_time","restriction":"BSON | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@cluster_time = cluster_time"}},{"id":"ok:Float64-instance-method","html_id":"ok:Float64-instance-method","name":"ok","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","source_link":null,"def":{"name":"ok","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@ok"}},{"id":"ok=(ok:Float64)-instance-method","html_id":"ok=(ok:Float64)-instance-method","name":"ok=","doc":null,"summary":null,"abstract":false,"args":[{"name":"ok","doc":null,"default_value":"","external_name":"ok","restriction":"Float64"}],"args_string":"(ok : Float64)","source_link":null,"def":{"name":"ok=","args":[{"name":"ok","doc":null,"default_value":"","external_name":"ok","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@ok = ok"}},{"id":"operation_time:BSON::Timestamp?-instance-method","html_id":"operation_time:BSON::Timestamp?-instance-method","name":"operation_time","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON::Timestamp?","source_link":null,"def":{"name":"operation_time","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON::Timestamp | ::Nil","visibility":"Public","body":"@operation_time"}},{"id":"operation_time=(operation_time:BSON::Timestamp?)-instance-method","html_id":"operation_time=(operation_time:BSON::Timestamp?)-instance-method","name":"operation_time=","doc":null,"summary":null,"abstract":false,"args":[{"name":"operation_time","doc":null,"default_value":"","external_name":"operation_time","restriction":"BSON::Timestamp | ::Nil"}],"args_string":"(operation_time : BSON::Timestamp?)","source_link":null,"def":{"name":"operation_time=","args":[{"name":"operation_time","doc":null,"default_value":"","external_name":"operation_time","restriction":"BSON::Timestamp | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@operation_time = operation_time"}},{"id":"to_bson(bson=BSON.new)-instance-method","html_id":"to_bson(bson=BSON.new)-instance-method","name":"to_bson","doc":"Converts to a BSON representation.\n\n```\nuser = User.new name: \"John\"\nbson = user.to_bson\n```","summary":"<p>Converts to a BSON representation.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"args_string":"(bson = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>)","source_link":null,"def":{"name":"to_bson","args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n      {% global_options = @type.annotations(BSON::Options) %}\n      {% camelize = global_options.reduce(false) do |_, a|\n  a[:camelize]\nend %}\n      {% for ivar in @type.instance_vars %}\n        {% ann = ivar.annotation(BSON::Field) %}\n        {% typ = ivar.type.union_types.select do |t|\n  t != Nil\nend[0] %}\n        {% key = ivar.name %}\n        {% bson_key = ann ? ann[:key].id : camelize ? ivar.name.camelcase(lower: camelize == \"lower\") : ivar.name %}\n        {% if ann && ann[:ignore] %}{% else %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            unless self.{{ key }}.nil?\n          {% end %}\n            {% if typ.has_method?(:to_bson) %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}.try &.to_bson\n            {% else %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}\n            {% end %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            end\n          {% end %}\n        {% end %}\n      {% end %}\n      {% end %}\nbson\n"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/Common/Cursor","path":"Mongo/Commands/Common/Cursor.html","kind":"struct","full_name":"Mongo::Commands::Common::Cursor","name":"Cursor","abstract":false,"superclass":{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cryomongo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands/Common","kind":"module","full_name":"Mongo::Commands::Common","name":"Common"},"doc":"Cursor bson sub-document.","summary":"<p>Cursor bson sub-document.</p>","class_methods":[{"id":"from_bson(bson:BSON)-class-method","html_id":"from_bson(bson:BSON)-class-method","name":"from_bson","doc":"NOTE: See `self.new`.","summary":"<p><span class=\"flag purple\">NOTE</span>  See <code>self<a href=\"../../../Mongo/Commands/Common/Cursor.html#new(bson:BSON)-class-method\">.new</a></code>.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"from_bson","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.new(bson)"}}],"constructors":[{"id":"new(bson:BSON)-class-method","html_id":"new(bson:BSON)-class-method","name":"new","doc":"Allocate an instance and copies data from a BSON struct.\n\n```\nclass User\n  include BSON::Serializable\n  property name : String\nend\n\ndata = BSON.new\ndata[\"name\"] = \"John\"\nUser.new(data)\n```","summary":"<p>Allocate an instance and copies data from a BSON struct.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"new","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(bson)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"first_batch:Array(BSON)-instance-method","html_id":"first_batch:Array(BSON)-instance-method","name":"first_batch","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(BSON)","source_link":null,"def":{"name":"first_batch","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(BSON)","visibility":"Public","body":"@first_batch"}},{"id":"first_batch=(first_batch:Array(BSON))-instance-method","html_id":"first_batch=(first_batch:Array(BSON))-instance-method","name":"first_batch=","doc":null,"summary":null,"abstract":false,"args":[{"name":"first_batch","doc":null,"default_value":"","external_name":"first_batch","restriction":"Array(BSON)"}],"args_string":"(first_batch : Array(BSON))","source_link":null,"def":{"name":"first_batch=","args":[{"name":"first_batch","doc":null,"default_value":"","external_name":"first_batch","restriction":"Array(BSON)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@first_batch = first_batch"}},{"id":"id:Int64-instance-method","html_id":"id:Int64-instance-method","name":"id","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int64","source_link":null,"def":{"name":"id","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int64","visibility":"Public","body":"@id"}},{"id":"id=(id:Int64)-instance-method","html_id":"id=(id:Int64)-instance-method","name":"id=","doc":null,"summary":null,"abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"Int64"}],"args_string":"(id : Int64)","source_link":null,"def":{"name":"id=","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"Int64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@id = id"}},{"id":"ns:String-instance-method","html_id":"ns:String-instance-method","name":"ns","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":null,"def":{"name":"ns","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@ns"}},{"id":"ns=(ns:String)-instance-method","html_id":"ns=(ns:String)-instance-method","name":"ns=","doc":null,"summary":null,"abstract":false,"args":[{"name":"ns","doc":null,"default_value":"","external_name":"ns","restriction":"String"}],"args_string":"(ns : String)","source_link":null,"def":{"name":"ns=","args":[{"name":"ns","doc":null,"default_value":"","external_name":"ns","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@ns = ns"}},{"id":"to_bson(bson=BSON.new)-instance-method","html_id":"to_bson(bson=BSON.new)-instance-method","name":"to_bson","doc":"Converts to a BSON representation.\n\n```\nuser = User.new name: \"John\"\nbson = user.to_bson\n```","summary":"<p>Converts to a BSON representation.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"args_string":"(bson = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>)","source_link":null,"def":{"name":"to_bson","args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n      {% global_options = @type.annotations(BSON::Options) %}\n      {% camelize = global_options.reduce(false) do |_, a|\n  a[:camelize]\nend %}\n      {% for ivar in @type.instance_vars %}\n        {% ann = ivar.annotation(BSON::Field) %}\n        {% typ = ivar.type.union_types.select do |t|\n  t != Nil\nend[0] %}\n        {% key = ivar.name %}\n        {% bson_key = ann ? ann[:key].id : camelize ? ivar.name.camelcase(lower: camelize == \"lower\") : ivar.name %}\n        {% if ann && ann[:ignore] %}{% else %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            unless self.{{ key }}.nil?\n          {% end %}\n            {% if typ.has_method?(:to_bson) %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}.try &.to_bson\n            {% else %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}\n            {% end %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            end\n          {% end %}\n        {% end %}\n      {% end %}\n      {% end %}\nbson\n"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/Common/DeleteResult","path":"Mongo/Commands/Common/DeleteResult.html","kind":"struct","full_name":"Mongo::Commands::Common::DeleteResult","name":"DeleteResult","abstract":false,"superclass":{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"cryomongo/Mongo/Commands/Common/Result","kind":"module","full_name":"Mongo::Commands::Common::Result","name":"Result"},{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cryomongo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"cryomongo/Mongo/Commands/Common/Result","kind":"module","full_name":"Mongo::Commands::Common::Result","name":"Result"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands/Common","kind":"module","full_name":"Mongo::Commands::Common","name":"Common"},"doc":"In response to delete commands.","summary":"<p>In response to delete commands.</p>","class_methods":[{"id":"from_bson(bson:BSON)-class-method","html_id":"from_bson(bson:BSON)-class-method","name":"from_bson","doc":"NOTE: See `self.new`.","summary":"<p><span class=\"flag purple\">NOTE</span>  See <code>self<a href=\"../../../Mongo/Commands/Common/DeleteResult.html#new(bson:BSON)-class-method\">.new</a></code>.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"from_bson","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.new(bson)"}}],"constructors":[{"id":"new(bson:BSON)-class-method","html_id":"new(bson:BSON)-class-method","name":"new","doc":"Allocate an instance and copies data from a BSON struct.\n\n```\nclass User\n  include BSON::Serializable\n  property name : String\nend\n\ndata = BSON.new\ndata[\"name\"] = \"John\"\nUser.new(data)\n```","summary":"<p>Allocate an instance and copies data from a BSON struct.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"new","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(bson)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"cluster_time:BSON?-instance-method","html_id":"cluster_time:BSON?-instance-method","name":"cluster_time","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON?","source_link":null,"def":{"name":"cluster_time","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON | ::Nil","visibility":"Public","body":"@cluster_time"}},{"id":"cluster_time=(cluster_time:BSON?)-instance-method","html_id":"cluster_time=(cluster_time:BSON?)-instance-method","name":"cluster_time=","doc":null,"summary":null,"abstract":false,"args":[{"name":"cluster_time","doc":null,"default_value":"","external_name":"cluster_time","restriction":"BSON | ::Nil"}],"args_string":"(cluster_time : BSON?)","source_link":null,"def":{"name":"cluster_time=","args":[{"name":"cluster_time","doc":null,"default_value":"","external_name":"cluster_time","restriction":"BSON | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@cluster_time = cluster_time"}},{"id":"n:Int32?-instance-method","html_id":"n:Int32?-instance-method","name":"n","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32?","source_link":null,"def":{"name":"n","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32 | ::Nil","visibility":"Public","body":"@n"}},{"id":"n=(n:Int32?)-instance-method","html_id":"n=(n:Int32?)-instance-method","name":"n=","doc":null,"summary":null,"abstract":false,"args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":"Int32 | ::Nil"}],"args_string":"(n : Int32?)","source_link":null,"def":{"name":"n=","args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@n = n"}},{"id":"ok:Float64-instance-method","html_id":"ok:Float64-instance-method","name":"ok","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","source_link":null,"def":{"name":"ok","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@ok"}},{"id":"ok=(ok:Float64)-instance-method","html_id":"ok=(ok:Float64)-instance-method","name":"ok=","doc":null,"summary":null,"abstract":false,"args":[{"name":"ok","doc":null,"default_value":"","external_name":"ok","restriction":"Float64"}],"args_string":"(ok : Float64)","source_link":null,"def":{"name":"ok=","args":[{"name":"ok","doc":null,"default_value":"","external_name":"ok","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@ok = ok"}},{"id":"operation_time:BSON::Timestamp?-instance-method","html_id":"operation_time:BSON::Timestamp?-instance-method","name":"operation_time","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON::Timestamp?","source_link":null,"def":{"name":"operation_time","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON::Timestamp | ::Nil","visibility":"Public","body":"@operation_time"}},{"id":"operation_time=(operation_time:BSON::Timestamp?)-instance-method","html_id":"operation_time=(operation_time:BSON::Timestamp?)-instance-method","name":"operation_time=","doc":null,"summary":null,"abstract":false,"args":[{"name":"operation_time","doc":null,"default_value":"","external_name":"operation_time","restriction":"BSON::Timestamp | ::Nil"}],"args_string":"(operation_time : BSON::Timestamp?)","source_link":null,"def":{"name":"operation_time=","args":[{"name":"operation_time","doc":null,"default_value":"","external_name":"operation_time","restriction":"BSON::Timestamp | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@operation_time = operation_time"}},{"id":"to_bson(bson=BSON.new)-instance-method","html_id":"to_bson(bson=BSON.new)-instance-method","name":"to_bson","doc":"Converts to a BSON representation.\n\n```\nuser = User.new name: \"John\"\nbson = user.to_bson\n```","summary":"<p>Converts to a BSON representation.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"args_string":"(bson = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>)","source_link":null,"def":{"name":"to_bson","args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n      {% global_options = @type.annotations(BSON::Options) %}\n      {% camelize = global_options.reduce(false) do |_, a|\n  a[:camelize]\nend %}\n      {% for ivar in @type.instance_vars %}\n        {% ann = ivar.annotation(BSON::Field) %}\n        {% typ = ivar.type.union_types.select do |t|\n  t != Nil\nend[0] %}\n        {% key = ivar.name %}\n        {% bson_key = ann ? ann[:key].id : camelize ? ivar.name.camelcase(lower: camelize == \"lower\") : ivar.name %}\n        {% if ann && ann[:ignore] %}{% else %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            unless self.{{ key }}.nil?\n          {% end %}\n            {% if typ.has_method?(:to_bson) %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}.try &.to_bson\n            {% else %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}\n            {% end %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            end\n          {% end %}\n        {% end %}\n      {% end %}\n      {% end %}\nbson\n"}},{"id":"write_concern_error:WriteConcernError?-instance-method","html_id":"write_concern_error:WriteConcernError?-instance-method","name":"write_concern_error","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : WriteConcernError?","source_link":null,"def":{"name":"write_concern_error","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"WriteConcernError | ::Nil","visibility":"Public","body":"@write_concern_error"}},{"id":"write_concern_error=(write_concern_error:WriteConcernError?)-instance-method","html_id":"write_concern_error=(write_concern_error:WriteConcernError?)-instance-method","name":"write_concern_error=","doc":null,"summary":null,"abstract":false,"args":[{"name":"write_concern_error","doc":null,"default_value":"","external_name":"write_concern_error","restriction":"WriteConcernError | ::Nil"}],"args_string":"(write_concern_error : WriteConcernError?)","source_link":null,"def":{"name":"write_concern_error=","args":[{"name":"write_concern_error","doc":null,"default_value":"","external_name":"write_concern_error","restriction":"WriteConcernError | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@write_concern_error = write_concern_error"}},{"id":"write_errors:Array(WriteError)?-instance-method","html_id":"write_errors:Array(WriteError)?-instance-method","name":"write_errors","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(WriteError)?","source_link":null,"def":{"name":"write_errors","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(WriteError) | ::Nil","visibility":"Public","body":"@write_errors"}},{"id":"write_errors=(write_errors:Array(WriteError)?)-instance-method","html_id":"write_errors=(write_errors:Array(WriteError)?)-instance-method","name":"write_errors=","doc":null,"summary":null,"abstract":false,"args":[{"name":"write_errors","doc":null,"default_value":"","external_name":"write_errors","restriction":"Array(WriteError) | ::Nil"}],"args_string":"(write_errors : Array(WriteError)?)","source_link":null,"def":{"name":"write_errors=","args":[{"name":"write_errors","doc":null,"default_value":"","external_name":"write_errors","restriction":"Array(WriteError) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@write_errors = write_errors"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/Common/FindAndModifyResult","path":"Mongo/Commands/Common/FindAndModifyResult.html","kind":"struct","full_name":"Mongo::Commands::Common::FindAndModifyResult","name":"FindAndModifyResult","abstract":false,"superclass":{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"cryomongo/Mongo/Commands/Common/Result","kind":"module","full_name":"Mongo::Commands::Common::Result","name":"Result"},{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cryomongo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"cryomongo/Mongo/Commands/Common/Result","kind":"module","full_name":"Mongo::Commands::Common::Result","name":"Result"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands/Common","kind":"module","full_name":"Mongo::Commands::Common","name":"Common"},"doc":"In response to findAndModify commands.","summary":"<p>In response to findAndModify commands.</p>","class_methods":[{"id":"from_bson(bson:BSON)-class-method","html_id":"from_bson(bson:BSON)-class-method","name":"from_bson","doc":"NOTE: See `self.new`.","summary":"<p><span class=\"flag purple\">NOTE</span>  See <code>self<a href=\"../../../Mongo/Commands/Common/FindAndModifyResult.html#new(bson:BSON)-class-method\">.new</a></code>.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"from_bson","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.new(bson)"}}],"constructors":[{"id":"new(bson:BSON)-class-method","html_id":"new(bson:BSON)-class-method","name":"new","doc":"Allocate an instance and copies data from a BSON struct.\n\n```\nclass User\n  include BSON::Serializable\n  property name : String\nend\n\ndata = BSON.new\ndata[\"name\"] = \"John\"\nUser.new(data)\n```","summary":"<p>Allocate an instance and copies data from a BSON struct.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"new","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(bson)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"cluster_time:BSON?-instance-method","html_id":"cluster_time:BSON?-instance-method","name":"cluster_time","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON?","source_link":null,"def":{"name":"cluster_time","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON | ::Nil","visibility":"Public","body":"@cluster_time"}},{"id":"cluster_time=(cluster_time:BSON?)-instance-method","html_id":"cluster_time=(cluster_time:BSON?)-instance-method","name":"cluster_time=","doc":null,"summary":null,"abstract":false,"args":[{"name":"cluster_time","doc":null,"default_value":"","external_name":"cluster_time","restriction":"BSON | ::Nil"}],"args_string":"(cluster_time : BSON?)","source_link":null,"def":{"name":"cluster_time=","args":[{"name":"cluster_time","doc":null,"default_value":"","external_name":"cluster_time","restriction":"BSON | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@cluster_time = cluster_time"}},{"id":"last_error_object:BSON?-instance-method","html_id":"last_error_object:BSON?-instance-method","name":"last_error_object","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON?","source_link":null,"def":{"name":"last_error_object","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON | ::Nil","visibility":"Public","body":"@last_error_object"}},{"id":"last_error_object=(last_error_object:BSON?)-instance-method","html_id":"last_error_object=(last_error_object:BSON?)-instance-method","name":"last_error_object=","doc":null,"summary":null,"abstract":false,"args":[{"name":"last_error_object","doc":null,"default_value":"","external_name":"last_error_object","restriction":"BSON | ::Nil"}],"args_string":"(last_error_object : BSON?)","source_link":null,"def":{"name":"last_error_object=","args":[{"name":"last_error_object","doc":null,"default_value":"","external_name":"last_error_object","restriction":"BSON | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@last_error_object = last_error_object"}},{"id":"ok:Float64-instance-method","html_id":"ok:Float64-instance-method","name":"ok","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","source_link":null,"def":{"name":"ok","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@ok"}},{"id":"ok=(ok:Float64)-instance-method","html_id":"ok=(ok:Float64)-instance-method","name":"ok=","doc":null,"summary":null,"abstract":false,"args":[{"name":"ok","doc":null,"default_value":"","external_name":"ok","restriction":"Float64"}],"args_string":"(ok : Float64)","source_link":null,"def":{"name":"ok=","args":[{"name":"ok","doc":null,"default_value":"","external_name":"ok","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@ok = ok"}},{"id":"operation_time:BSON::Timestamp?-instance-method","html_id":"operation_time:BSON::Timestamp?-instance-method","name":"operation_time","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON::Timestamp?","source_link":null,"def":{"name":"operation_time","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON::Timestamp | ::Nil","visibility":"Public","body":"@operation_time"}},{"id":"operation_time=(operation_time:BSON::Timestamp?)-instance-method","html_id":"operation_time=(operation_time:BSON::Timestamp?)-instance-method","name":"operation_time=","doc":null,"summary":null,"abstract":false,"args":[{"name":"operation_time","doc":null,"default_value":"","external_name":"operation_time","restriction":"BSON::Timestamp | ::Nil"}],"args_string":"(operation_time : BSON::Timestamp?)","source_link":null,"def":{"name":"operation_time=","args":[{"name":"operation_time","doc":null,"default_value":"","external_name":"operation_time","restriction":"BSON::Timestamp | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@operation_time = operation_time"}},{"id":"to_bson(bson=BSON.new)-instance-method","html_id":"to_bson(bson=BSON.new)-instance-method","name":"to_bson","doc":"Converts to a BSON representation.\n\n```\nuser = User.new name: \"John\"\nbson = user.to_bson\n```","summary":"<p>Converts to a BSON representation.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"args_string":"(bson = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>)","source_link":null,"def":{"name":"to_bson","args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n      {% global_options = @type.annotations(BSON::Options) %}\n      {% camelize = global_options.reduce(false) do |_, a|\n  a[:camelize]\nend %}\n      {% for ivar in @type.instance_vars %}\n        {% ann = ivar.annotation(BSON::Field) %}\n        {% typ = ivar.type.union_types.select do |t|\n  t != Nil\nend[0] %}\n        {% key = ivar.name %}\n        {% bson_key = ann ? ann[:key].id : camelize ? ivar.name.camelcase(lower: camelize == \"lower\") : ivar.name %}\n        {% if ann && ann[:ignore] %}{% else %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            unless self.{{ key }}.nil?\n          {% end %}\n            {% if typ.has_method?(:to_bson) %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}.try &.to_bson\n            {% else %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}\n            {% end %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            end\n          {% end %}\n        {% end %}\n      {% end %}\n      {% end %}\nbson\n"}},{"id":"value:BSON?-instance-method","html_id":"value:BSON?-instance-method","name":"value","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON?","source_link":null,"def":{"name":"value","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON | ::Nil","visibility":"Public","body":"@value"}},{"id":"value=(value:BSON?)-instance-method","html_id":"value=(value:BSON?)-instance-method","name":"value=","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"BSON | ::Nil"}],"args_string":"(value : BSON?)","source_link":null,"def":{"name":"value=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"BSON | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@value = value"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/Common/InsertResult","path":"Mongo/Commands/Common/InsertResult.html","kind":"struct","full_name":"Mongo::Commands::Common::InsertResult","name":"InsertResult","abstract":false,"superclass":{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"cryomongo/Mongo/Commands/Common/Result","kind":"module","full_name":"Mongo::Commands::Common::Result","name":"Result"},{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cryomongo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"cryomongo/Mongo/Commands/Common/Result","kind":"module","full_name":"Mongo::Commands::Common::Result","name":"Result"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands/Common","kind":"module","full_name":"Mongo::Commands::Common","name":"Common"},"doc":"In response to insert commands.","summary":"<p>In response to insert commands.</p>","class_methods":[{"id":"from_bson(bson:BSON)-class-method","html_id":"from_bson(bson:BSON)-class-method","name":"from_bson","doc":"NOTE: See `self.new`.","summary":"<p><span class=\"flag purple\">NOTE</span>  See <code>self<a href=\"../../../Mongo/Commands/Common/InsertResult.html#new(bson:BSON)-class-method\">.new</a></code>.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"from_bson","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.new(bson)"}}],"constructors":[{"id":"new(bson:BSON)-class-method","html_id":"new(bson:BSON)-class-method","name":"new","doc":"Allocate an instance and copies data from a BSON struct.\n\n```\nclass User\n  include BSON::Serializable\n  property name : String\nend\n\ndata = BSON.new\ndata[\"name\"] = \"John\"\nUser.new(data)\n```","summary":"<p>Allocate an instance and copies data from a BSON struct.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"new","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(bson)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"cluster_time:BSON?-instance-method","html_id":"cluster_time:BSON?-instance-method","name":"cluster_time","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON?","source_link":null,"def":{"name":"cluster_time","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON | ::Nil","visibility":"Public","body":"@cluster_time"}},{"id":"cluster_time=(cluster_time:BSON?)-instance-method","html_id":"cluster_time=(cluster_time:BSON?)-instance-method","name":"cluster_time=","doc":null,"summary":null,"abstract":false,"args":[{"name":"cluster_time","doc":null,"default_value":"","external_name":"cluster_time","restriction":"BSON | ::Nil"}],"args_string":"(cluster_time : BSON?)","source_link":null,"def":{"name":"cluster_time=","args":[{"name":"cluster_time","doc":null,"default_value":"","external_name":"cluster_time","restriction":"BSON | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@cluster_time = cluster_time"}},{"id":"n:Int32?-instance-method","html_id":"n:Int32?-instance-method","name":"n","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32?","source_link":null,"def":{"name":"n","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32 | ::Nil","visibility":"Public","body":"@n"}},{"id":"n=(n:Int32?)-instance-method","html_id":"n=(n:Int32?)-instance-method","name":"n=","doc":null,"summary":null,"abstract":false,"args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":"Int32 | ::Nil"}],"args_string":"(n : Int32?)","source_link":null,"def":{"name":"n=","args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@n = n"}},{"id":"ok:Float64-instance-method","html_id":"ok:Float64-instance-method","name":"ok","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","source_link":null,"def":{"name":"ok","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@ok"}},{"id":"ok=(ok:Float64)-instance-method","html_id":"ok=(ok:Float64)-instance-method","name":"ok=","doc":null,"summary":null,"abstract":false,"args":[{"name":"ok","doc":null,"default_value":"","external_name":"ok","restriction":"Float64"}],"args_string":"(ok : Float64)","source_link":null,"def":{"name":"ok=","args":[{"name":"ok","doc":null,"default_value":"","external_name":"ok","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@ok = ok"}},{"id":"operation_time:BSON::Timestamp?-instance-method","html_id":"operation_time:BSON::Timestamp?-instance-method","name":"operation_time","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON::Timestamp?","source_link":null,"def":{"name":"operation_time","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON::Timestamp | ::Nil","visibility":"Public","body":"@operation_time"}},{"id":"operation_time=(operation_time:BSON::Timestamp?)-instance-method","html_id":"operation_time=(operation_time:BSON::Timestamp?)-instance-method","name":"operation_time=","doc":null,"summary":null,"abstract":false,"args":[{"name":"operation_time","doc":null,"default_value":"","external_name":"operation_time","restriction":"BSON::Timestamp | ::Nil"}],"args_string":"(operation_time : BSON::Timestamp?)","source_link":null,"def":{"name":"operation_time=","args":[{"name":"operation_time","doc":null,"default_value":"","external_name":"operation_time","restriction":"BSON::Timestamp | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@operation_time = operation_time"}},{"id":"to_bson(bson=BSON.new)-instance-method","html_id":"to_bson(bson=BSON.new)-instance-method","name":"to_bson","doc":"Converts to a BSON representation.\n\n```\nuser = User.new name: \"John\"\nbson = user.to_bson\n```","summary":"<p>Converts to a BSON representation.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"args_string":"(bson = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>)","source_link":null,"def":{"name":"to_bson","args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n      {% global_options = @type.annotations(BSON::Options) %}\n      {% camelize = global_options.reduce(false) do |_, a|\n  a[:camelize]\nend %}\n      {% for ivar in @type.instance_vars %}\n        {% ann = ivar.annotation(BSON::Field) %}\n        {% typ = ivar.type.union_types.select do |t|\n  t != Nil\nend[0] %}\n        {% key = ivar.name %}\n        {% bson_key = ann ? ann[:key].id : camelize ? ivar.name.camelcase(lower: camelize == \"lower\") : ivar.name %}\n        {% if ann && ann[:ignore] %}{% else %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            unless self.{{ key }}.nil?\n          {% end %}\n            {% if typ.has_method?(:to_bson) %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}.try &.to_bson\n            {% else %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}\n            {% end %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            end\n          {% end %}\n        {% end %}\n      {% end %}\n      {% end %}\nbson\n"}},{"id":"write_concern_error:WriteConcernError?-instance-method","html_id":"write_concern_error:WriteConcernError?-instance-method","name":"write_concern_error","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : WriteConcernError?","source_link":null,"def":{"name":"write_concern_error","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"WriteConcernError | ::Nil","visibility":"Public","body":"@write_concern_error"}},{"id":"write_concern_error=(write_concern_error:WriteConcernError?)-instance-method","html_id":"write_concern_error=(write_concern_error:WriteConcernError?)-instance-method","name":"write_concern_error=","doc":null,"summary":null,"abstract":false,"args":[{"name":"write_concern_error","doc":null,"default_value":"","external_name":"write_concern_error","restriction":"WriteConcernError | ::Nil"}],"args_string":"(write_concern_error : WriteConcernError?)","source_link":null,"def":{"name":"write_concern_error=","args":[{"name":"write_concern_error","doc":null,"default_value":"","external_name":"write_concern_error","restriction":"WriteConcernError | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@write_concern_error = write_concern_error"}},{"id":"write_errors:Array(WriteError)?-instance-method","html_id":"write_errors:Array(WriteError)?-instance-method","name":"write_errors","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(WriteError)?","source_link":null,"def":{"name":"write_errors","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(WriteError) | ::Nil","visibility":"Public","body":"@write_errors"}},{"id":"write_errors=(write_errors:Array(WriteError)?)-instance-method","html_id":"write_errors=(write_errors:Array(WriteError)?)-instance-method","name":"write_errors=","doc":null,"summary":null,"abstract":false,"args":[{"name":"write_errors","doc":null,"default_value":"","external_name":"write_errors","restriction":"Array(WriteError) | ::Nil"}],"args_string":"(write_errors : Array(WriteError)?)","source_link":null,"def":{"name":"write_errors=","args":[{"name":"write_errors","doc":null,"default_value":"","external_name":"write_errors","restriction":"Array(WriteError) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@write_errors = write_errors"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/Common/QueryResult","path":"Mongo/Commands/Common/QueryResult.html","kind":"struct","full_name":"Mongo::Commands::Common::QueryResult","name":"QueryResult","abstract":false,"superclass":{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"cryomongo/Mongo/Commands/Common/Result","kind":"module","full_name":"Mongo::Commands::Common::Result","name":"Result"},{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cryomongo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"cryomongo/Mongo/Commands/Common/Result","kind":"module","full_name":"Mongo::Commands::Common::Result","name":"Result"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands/Common","kind":"module","full_name":"Mongo::Commands::Common","name":"Common"},"doc":"In response to query commands.","summary":"<p>In response to query commands.</p>","class_methods":[{"id":"from_bson(bson:BSON)-class-method","html_id":"from_bson(bson:BSON)-class-method","name":"from_bson","doc":"NOTE: See `self.new`.","summary":"<p><span class=\"flag purple\">NOTE</span>  See <code>self<a href=\"../../../Mongo/Commands/Common/QueryResult.html#new(bson:BSON)-class-method\">.new</a></code>.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"from_bson","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.new(bson)"}}],"constructors":[{"id":"new(bson:BSON)-class-method","html_id":"new(bson:BSON)-class-method","name":"new","doc":"Allocate an instance and copies data from a BSON struct.\n\n```\nclass User\n  include BSON::Serializable\n  property name : String\nend\n\ndata = BSON.new\ndata[\"name\"] = \"John\"\nUser.new(data)\n```","summary":"<p>Allocate an instance and copies data from a BSON struct.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"new","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(bson)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"cluster_time:BSON?-instance-method","html_id":"cluster_time:BSON?-instance-method","name":"cluster_time","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON?","source_link":null,"def":{"name":"cluster_time","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON | ::Nil","visibility":"Public","body":"@cluster_time"}},{"id":"cluster_time=(cluster_time:BSON?)-instance-method","html_id":"cluster_time=(cluster_time:BSON?)-instance-method","name":"cluster_time=","doc":null,"summary":null,"abstract":false,"args":[{"name":"cluster_time","doc":null,"default_value":"","external_name":"cluster_time","restriction":"BSON | ::Nil"}],"args_string":"(cluster_time : BSON?)","source_link":null,"def":{"name":"cluster_time=","args":[{"name":"cluster_time","doc":null,"default_value":"","external_name":"cluster_time","restriction":"BSON | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@cluster_time = cluster_time"}},{"id":"cursor:Cursor-instance-method","html_id":"cursor:Cursor-instance-method","name":"cursor","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Cursor","source_link":null,"def":{"name":"cursor","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Cursor","visibility":"Public","body":"@cursor"}},{"id":"cursor=(cursor:Cursor)-instance-method","html_id":"cursor=(cursor:Cursor)-instance-method","name":"cursor=","doc":null,"summary":null,"abstract":false,"args":[{"name":"cursor","doc":null,"default_value":"","external_name":"cursor","restriction":"Cursor"}],"args_string":"(cursor : Cursor)","source_link":null,"def":{"name":"cursor=","args":[{"name":"cursor","doc":null,"default_value":"","external_name":"cursor","restriction":"Cursor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@cursor = cursor"}},{"id":"ok:Float64-instance-method","html_id":"ok:Float64-instance-method","name":"ok","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","source_link":null,"def":{"name":"ok","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@ok"}},{"id":"ok=(ok:Float64)-instance-method","html_id":"ok=(ok:Float64)-instance-method","name":"ok=","doc":null,"summary":null,"abstract":false,"args":[{"name":"ok","doc":null,"default_value":"","external_name":"ok","restriction":"Float64"}],"args_string":"(ok : Float64)","source_link":null,"def":{"name":"ok=","args":[{"name":"ok","doc":null,"default_value":"","external_name":"ok","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@ok = ok"}},{"id":"operation_time:BSON::Timestamp?-instance-method","html_id":"operation_time:BSON::Timestamp?-instance-method","name":"operation_time","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON::Timestamp?","source_link":null,"def":{"name":"operation_time","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON::Timestamp | ::Nil","visibility":"Public","body":"@operation_time"}},{"id":"operation_time=(operation_time:BSON::Timestamp?)-instance-method","html_id":"operation_time=(operation_time:BSON::Timestamp?)-instance-method","name":"operation_time=","doc":null,"summary":null,"abstract":false,"args":[{"name":"operation_time","doc":null,"default_value":"","external_name":"operation_time","restriction":"BSON::Timestamp | ::Nil"}],"args_string":"(operation_time : BSON::Timestamp?)","source_link":null,"def":{"name":"operation_time=","args":[{"name":"operation_time","doc":null,"default_value":"","external_name":"operation_time","restriction":"BSON::Timestamp | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@operation_time = operation_time"}},{"id":"to_bson(bson=BSON.new)-instance-method","html_id":"to_bson(bson=BSON.new)-instance-method","name":"to_bson","doc":"Converts to a BSON representation.\n\n```\nuser = User.new name: \"John\"\nbson = user.to_bson\n```","summary":"<p>Converts to a BSON representation.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"args_string":"(bson = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>)","source_link":null,"def":{"name":"to_bson","args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n      {% global_options = @type.annotations(BSON::Options) %}\n      {% camelize = global_options.reduce(false) do |_, a|\n  a[:camelize]\nend %}\n      {% for ivar in @type.instance_vars %}\n        {% ann = ivar.annotation(BSON::Field) %}\n        {% typ = ivar.type.union_types.select do |t|\n  t != Nil\nend[0] %}\n        {% key = ivar.name %}\n        {% bson_key = ann ? ann[:key].id : camelize ? ivar.name.camelcase(lower: camelize == \"lower\") : ivar.name %}\n        {% if ann && ann[:ignore] %}{% else %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            unless self.{{ key }}.nil?\n          {% end %}\n            {% if typ.has_method?(:to_bson) %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}.try &.to_bson\n            {% else %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}\n            {% end %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            end\n          {% end %}\n        {% end %}\n      {% end %}\n      {% end %}\nbson\n"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/Common/UpdateResult","path":"Mongo/Commands/Common/UpdateResult.html","kind":"struct","full_name":"Mongo::Commands::Common::UpdateResult","name":"UpdateResult","abstract":false,"superclass":{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"cryomongo/Mongo/Commands/Common/Result","kind":"module","full_name":"Mongo::Commands::Common::Result","name":"Result"},{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cryomongo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"cryomongo/Mongo/Commands/Common/Result","kind":"module","full_name":"Mongo::Commands::Common::Result","name":"Result"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands/Common","kind":"module","full_name":"Mongo::Commands::Common","name":"Common"},"doc":"In response to update commands.","summary":"<p>In response to update commands.</p>","class_methods":[{"id":"from_bson(bson:BSON)-class-method","html_id":"from_bson(bson:BSON)-class-method","name":"from_bson","doc":"NOTE: See `self.new`.","summary":"<p><span class=\"flag purple\">NOTE</span>  See <code>self<a href=\"../../../Mongo/Commands/Common/UpdateResult.html#new(bson:BSON)-class-method\">.new</a></code>.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"from_bson","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.new(bson)"}}],"constructors":[{"id":"new(bson:BSON)-class-method","html_id":"new(bson:BSON)-class-method","name":"new","doc":"Allocate an instance and copies data from a BSON struct.\n\n```\nclass User\n  include BSON::Serializable\n  property name : String\nend\n\ndata = BSON.new\ndata[\"name\"] = \"John\"\nUser.new(data)\n```","summary":"<p>Allocate an instance and copies data from a BSON struct.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"new","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(bson)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"cluster_time:BSON?-instance-method","html_id":"cluster_time:BSON?-instance-method","name":"cluster_time","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON?","source_link":null,"def":{"name":"cluster_time","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON | ::Nil","visibility":"Public","body":"@cluster_time"}},{"id":"cluster_time=(cluster_time:BSON?)-instance-method","html_id":"cluster_time=(cluster_time:BSON?)-instance-method","name":"cluster_time=","doc":null,"summary":null,"abstract":false,"args":[{"name":"cluster_time","doc":null,"default_value":"","external_name":"cluster_time","restriction":"BSON | ::Nil"}],"args_string":"(cluster_time : BSON?)","source_link":null,"def":{"name":"cluster_time=","args":[{"name":"cluster_time","doc":null,"default_value":"","external_name":"cluster_time","restriction":"BSON | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@cluster_time = cluster_time"}},{"id":"n:Int32?-instance-method","html_id":"n:Int32?-instance-method","name":"n","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32?","source_link":null,"def":{"name":"n","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32 | ::Nil","visibility":"Public","body":"@n"}},{"id":"n=(n:Int32?)-instance-method","html_id":"n=(n:Int32?)-instance-method","name":"n=","doc":null,"summary":null,"abstract":false,"args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":"Int32 | ::Nil"}],"args_string":"(n : Int32?)","source_link":null,"def":{"name":"n=","args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@n = n"}},{"id":"n_modified:Int32?-instance-method","html_id":"n_modified:Int32?-instance-method","name":"n_modified","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32?","source_link":null,"def":{"name":"n_modified","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32 | ::Nil","visibility":"Public","body":"@n_modified"}},{"id":"n_modified=(n_modified:Int32?)-instance-method","html_id":"n_modified=(n_modified:Int32?)-instance-method","name":"n_modified=","doc":null,"summary":null,"abstract":false,"args":[{"name":"n_modified","doc":null,"default_value":"","external_name":"n_modified","restriction":"Int32 | ::Nil"}],"args_string":"(n_modified : Int32?)","source_link":null,"def":{"name":"n_modified=","args":[{"name":"n_modified","doc":null,"default_value":"","external_name":"n_modified","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@n_modified = n_modified"}},{"id":"ok:Float64-instance-method","html_id":"ok:Float64-instance-method","name":"ok","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","source_link":null,"def":{"name":"ok","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@ok"}},{"id":"ok=(ok:Float64)-instance-method","html_id":"ok=(ok:Float64)-instance-method","name":"ok=","doc":null,"summary":null,"abstract":false,"args":[{"name":"ok","doc":null,"default_value":"","external_name":"ok","restriction":"Float64"}],"args_string":"(ok : Float64)","source_link":null,"def":{"name":"ok=","args":[{"name":"ok","doc":null,"default_value":"","external_name":"ok","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@ok = ok"}},{"id":"operation_time:BSON::Timestamp?-instance-method","html_id":"operation_time:BSON::Timestamp?-instance-method","name":"operation_time","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON::Timestamp?","source_link":null,"def":{"name":"operation_time","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON::Timestamp | ::Nil","visibility":"Public","body":"@operation_time"}},{"id":"operation_time=(operation_time:BSON::Timestamp?)-instance-method","html_id":"operation_time=(operation_time:BSON::Timestamp?)-instance-method","name":"operation_time=","doc":null,"summary":null,"abstract":false,"args":[{"name":"operation_time","doc":null,"default_value":"","external_name":"operation_time","restriction":"BSON::Timestamp | ::Nil"}],"args_string":"(operation_time : BSON::Timestamp?)","source_link":null,"def":{"name":"operation_time=","args":[{"name":"operation_time","doc":null,"default_value":"","external_name":"operation_time","restriction":"BSON::Timestamp | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@operation_time = operation_time"}},{"id":"to_bson(bson=BSON.new)-instance-method","html_id":"to_bson(bson=BSON.new)-instance-method","name":"to_bson","doc":"Converts to a BSON representation.\n\n```\nuser = User.new name: \"John\"\nbson = user.to_bson\n```","summary":"<p>Converts to a BSON representation.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"args_string":"(bson = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>)","source_link":null,"def":{"name":"to_bson","args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n      {% global_options = @type.annotations(BSON::Options) %}\n      {% camelize = global_options.reduce(false) do |_, a|\n  a[:camelize]\nend %}\n      {% for ivar in @type.instance_vars %}\n        {% ann = ivar.annotation(BSON::Field) %}\n        {% typ = ivar.type.union_types.select do |t|\n  t != Nil\nend[0] %}\n        {% key = ivar.name %}\n        {% bson_key = ann ? ann[:key].id : camelize ? ivar.name.camelcase(lower: camelize == \"lower\") : ivar.name %}\n        {% if ann && ann[:ignore] %}{% else %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            unless self.{{ key }}.nil?\n          {% end %}\n            {% if typ.has_method?(:to_bson) %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}.try &.to_bson\n            {% else %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}\n            {% end %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            end\n          {% end %}\n        {% end %}\n      {% end %}\n      {% end %}\nbson\n"}},{"id":"upserted:Array(Upserted)?-instance-method","html_id":"upserted:Array(Upserted)?-instance-method","name":"upserted","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Upserted)?","source_link":null,"def":{"name":"upserted","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Upserted) | ::Nil","visibility":"Public","body":"@upserted"}},{"id":"upserted=(upserted:Array(Upserted)?)-instance-method","html_id":"upserted=(upserted:Array(Upserted)?)-instance-method","name":"upserted=","doc":null,"summary":null,"abstract":false,"args":[{"name":"upserted","doc":null,"default_value":"","external_name":"upserted","restriction":"Array(Upserted) | ::Nil"}],"args_string":"(upserted : Array(Upserted)?)","source_link":null,"def":{"name":"upserted=","args":[{"name":"upserted","doc":null,"default_value":"","external_name":"upserted","restriction":"Array(Upserted) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@upserted = upserted"}},{"id":"write_concern_error:WriteConcernError?-instance-method","html_id":"write_concern_error:WriteConcernError?-instance-method","name":"write_concern_error","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : WriteConcernError?","source_link":null,"def":{"name":"write_concern_error","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"WriteConcernError | ::Nil","visibility":"Public","body":"@write_concern_error"}},{"id":"write_concern_error=(write_concern_error:WriteConcernError?)-instance-method","html_id":"write_concern_error=(write_concern_error:WriteConcernError?)-instance-method","name":"write_concern_error=","doc":null,"summary":null,"abstract":false,"args":[{"name":"write_concern_error","doc":null,"default_value":"","external_name":"write_concern_error","restriction":"WriteConcernError | ::Nil"}],"args_string":"(write_concern_error : WriteConcernError?)","source_link":null,"def":{"name":"write_concern_error=","args":[{"name":"write_concern_error","doc":null,"default_value":"","external_name":"write_concern_error","restriction":"WriteConcernError | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@write_concern_error = write_concern_error"}},{"id":"write_errors:Array(WriteError)?-instance-method","html_id":"write_errors:Array(WriteError)?-instance-method","name":"write_errors","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(WriteError)?","source_link":null,"def":{"name":"write_errors","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(WriteError) | ::Nil","visibility":"Public","body":"@write_errors"}},{"id":"write_errors=(write_errors:Array(WriteError)?)-instance-method","html_id":"write_errors=(write_errors:Array(WriteError)?)-instance-method","name":"write_errors=","doc":null,"summary":null,"abstract":false,"args":[{"name":"write_errors","doc":null,"default_value":"","external_name":"write_errors","restriction":"Array(WriteError) | ::Nil"}],"args_string":"(write_errors : Array(WriteError)?)","source_link":null,"def":{"name":"write_errors=","args":[{"name":"write_errors","doc":null,"default_value":"","external_name":"write_errors","restriction":"Array(WriteError) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@write_errors = write_errors"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/Common/Upserted","path":"Mongo/Commands/Common/Upserted.html","kind":"struct","full_name":"Mongo::Commands::Common::Upserted","name":"Upserted","abstract":false,"superclass":{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cryomongo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands/Common","kind":"module","full_name":"Mongo::Commands::Common","name":"Common"},"doc":"Upserted bson sub-document.","summary":"<p>Upserted bson sub-document.</p>","class_methods":[{"id":"from_bson(bson:BSON)-class-method","html_id":"from_bson(bson:BSON)-class-method","name":"from_bson","doc":"NOTE: See `self.new`.","summary":"<p><span class=\"flag purple\">NOTE</span>  See <code>self<a href=\"../../../Mongo/Commands/Common/Upserted.html#new(index,_id)-class-method\">.new</a></code>.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"from_bson","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.new(bson)"}}],"constructors":[{"id":"new(index,_id)-class-method","html_id":"new(index,_id)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":""},{"name":"_id","doc":null,"default_value":"","external_name":"_id","restriction":""}],"args_string":"(index, _id)","source_link":null,"def":{"name":"new","args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":""},{"name":"_id","doc":null,"default_value":"","external_name":"_id","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(index, _id)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(bson:BSON)-class-method","html_id":"new(bson:BSON)-class-method","name":"new","doc":"Allocate an instance and copies data from a BSON struct.\n\n```\nclass User\n  include BSON::Serializable\n  property name : String\nend\n\ndata = BSON.new\ndata[\"name\"] = \"John\"\nUser.new(data)\n```","summary":"<p>Allocate an instance and copies data from a BSON struct.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"new","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(bson)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"_id:BSON::Value-instance-method","html_id":"_id:BSON::Value-instance-method","name":"_id","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON::Value","source_link":null,"def":{"name":"_id","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON::Value","visibility":"Public","body":"@_id"}},{"id":"_id=(_id:BSON::Value)-instance-method","html_id":"_id=(_id:BSON::Value)-instance-method","name":"_id=","doc":null,"summary":null,"abstract":false,"args":[{"name":"_id","doc":null,"default_value":"","external_name":"_id","restriction":"BSON::Value"}],"args_string":"(_id : BSON::Value)","source_link":null,"def":{"name":"_id=","args":[{"name":"_id","doc":null,"default_value":"","external_name":"_id","restriction":"BSON::Value"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@_id = _id"}},{"id":"index:Int32-instance-method","html_id":"index:Int32-instance-method","name":"index","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":null,"def":{"name":"index","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@index"}},{"id":"index=(index:Int32)-instance-method","html_id":"index=(index:Int32)-instance-method","name":"index=","doc":null,"summary":null,"abstract":false,"args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int32"}],"args_string":"(index : Int32)","source_link":null,"def":{"name":"index=","args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@index = index"}},{"id":"to_bson(bson=BSON.new)-instance-method","html_id":"to_bson(bson=BSON.new)-instance-method","name":"to_bson","doc":"Converts to a BSON representation.\n\n```\nuser = User.new name: \"John\"\nbson = user.to_bson\n```","summary":"<p>Converts to a BSON representation.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"args_string":"(bson = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>)","source_link":null,"def":{"name":"to_bson","args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n      {% global_options = @type.annotations(BSON::Options) %}\n      {% camelize = global_options.reduce(false) do |_, a|\n  a[:camelize]\nend %}\n      {% for ivar in @type.instance_vars %}\n        {% ann = ivar.annotation(BSON::Field) %}\n        {% typ = ivar.type.union_types.select do |t|\n  t != Nil\nend[0] %}\n        {% key = ivar.name %}\n        {% bson_key = ann ? ann[:key].id : camelize ? ivar.name.camelcase(lower: camelize == \"lower\") : ivar.name %}\n        {% if ann && ann[:ignore] %}{% else %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            unless self.{{ key }}.nil?\n          {% end %}\n            {% if typ.has_method?(:to_bson) %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}.try &.to_bson\n            {% else %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}\n            {% end %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            end\n          {% end %}\n        {% end %}\n      {% end %}\n      {% end %}\nbson\n"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/Common/WriteConcernError","path":"Mongo/Commands/Common/WriteConcernError.html","kind":"struct","full_name":"Mongo::Commands::Common::WriteConcernError","name":"WriteConcernError","abstract":false,"superclass":{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cryomongo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands/Common","kind":"module","full_name":"Mongo::Commands::Common","name":"Common"},"doc":"WriteConcernError bson sub-document.","summary":"<p>WriteConcernError bson sub-document.</p>","class_methods":[{"id":"from_bson(bson:BSON)-class-method","html_id":"from_bson(bson:BSON)-class-method","name":"from_bson","doc":"NOTE: See `self.new`.","summary":"<p><span class=\"flag purple\">NOTE</span>  See <code>self<a href=\"../../../Mongo/Commands/Common/WriteConcernError.html#new(bson:BSON)-class-method\">.new</a></code>.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"from_bson","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.new(bson)"}}],"constructors":[{"id":"new(bson:BSON)-class-method","html_id":"new(bson:BSON)-class-method","name":"new","doc":"Allocate an instance and copies data from a BSON struct.\n\n```\nclass User\n  include BSON::Serializable\n  property name : String\nend\n\ndata = BSON.new\ndata[\"name\"] = \"John\"\nUser.new(data)\n```","summary":"<p>Allocate an instance and copies data from a BSON struct.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"new","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(bson)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"code:Int32-instance-method","html_id":"code:Int32-instance-method","name":"code","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":null,"def":{"name":"code","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@code"}},{"id":"code=(code:Int32)-instance-method","html_id":"code=(code:Int32)-instance-method","name":"code=","doc":null,"summary":null,"abstract":false,"args":[{"name":"code","doc":null,"default_value":"","external_name":"code","restriction":"Int32"}],"args_string":"(code : Int32)","source_link":null,"def":{"name":"code=","args":[{"name":"code","doc":null,"default_value":"","external_name":"code","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@code = code"}},{"id":"errmsg:String-instance-method","html_id":"errmsg:String-instance-method","name":"errmsg","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":null,"def":{"name":"errmsg","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@errmsg"}},{"id":"errmsg=(errmsg:String)-instance-method","html_id":"errmsg=(errmsg:String)-instance-method","name":"errmsg=","doc":null,"summary":null,"abstract":false,"args":[{"name":"errmsg","doc":null,"default_value":"","external_name":"errmsg","restriction":"String"}],"args_string":"(errmsg : String)","source_link":null,"def":{"name":"errmsg=","args":[{"name":"errmsg","doc":null,"default_value":"","external_name":"errmsg","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@errmsg = errmsg"}},{"id":"to_bson(bson=BSON.new)-instance-method","html_id":"to_bson(bson=BSON.new)-instance-method","name":"to_bson","doc":"Converts to a BSON representation.\n\n```\nuser = User.new name: \"John\"\nbson = user.to_bson\n```","summary":"<p>Converts to a BSON representation.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"args_string":"(bson = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>)","source_link":null,"def":{"name":"to_bson","args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n      {% global_options = @type.annotations(BSON::Options) %}\n      {% camelize = global_options.reduce(false) do |_, a|\n  a[:camelize]\nend %}\n      {% for ivar in @type.instance_vars %}\n        {% ann = ivar.annotation(BSON::Field) %}\n        {% typ = ivar.type.union_types.select do |t|\n  t != Nil\nend[0] %}\n        {% key = ivar.name %}\n        {% bson_key = ann ? ann[:key].id : camelize ? ivar.name.camelcase(lower: camelize == \"lower\") : ivar.name %}\n        {% if ann && ann[:ignore] %}{% else %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            unless self.{{ key }}.nil?\n          {% end %}\n            {% if typ.has_method?(:to_bson) %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}.try &.to_bson\n            {% else %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}\n            {% end %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            end\n          {% end %}\n        {% end %}\n      {% end %}\n      {% end %}\nbson\n"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/Common/WriteError","path":"Mongo/Commands/Common/WriteError.html","kind":"struct","full_name":"Mongo::Commands::Common::WriteError","name":"WriteError","abstract":false,"superclass":{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cryomongo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands/Common","kind":"module","full_name":"Mongo::Commands::Common","name":"Common"},"doc":"WriteError bson sub-document.","summary":"<p>WriteError bson sub-document.</p>","class_methods":[{"id":"from_bson(bson:BSON)-class-method","html_id":"from_bson(bson:BSON)-class-method","name":"from_bson","doc":"NOTE: See `self.new`.","summary":"<p><span class=\"flag purple\">NOTE</span>  See <code>self<a href=\"../../../Mongo/Commands/Common/WriteError.html#new(index,code,errmsg)-class-method\">.new</a></code>.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"from_bson","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.new(bson)"}}],"constructors":[{"id":"new(index,code,errmsg)-class-method","html_id":"new(index,code,errmsg)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":""},{"name":"code","doc":null,"default_value":"","external_name":"code","restriction":""},{"name":"errmsg","doc":null,"default_value":"","external_name":"errmsg","restriction":""}],"args_string":"(index, code, errmsg)","source_link":null,"def":{"name":"new","args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":""},{"name":"code","doc":null,"default_value":"","external_name":"code","restriction":""},{"name":"errmsg","doc":null,"default_value":"","external_name":"errmsg","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(index, code, errmsg)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(bson:BSON)-class-method","html_id":"new(bson:BSON)-class-method","name":"new","doc":"Allocate an instance and copies data from a BSON struct.\n\n```\nclass User\n  include BSON::Serializable\n  property name : String\nend\n\ndata = BSON.new\ndata[\"name\"] = \"John\"\nUser.new(data)\n```","summary":"<p>Allocate an instance and copies data from a BSON struct.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"new","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(bson)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"code:Int32-instance-method","html_id":"code:Int32-instance-method","name":"code","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":null,"def":{"name":"code","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@code"}},{"id":"code=(code:Int32)-instance-method","html_id":"code=(code:Int32)-instance-method","name":"code=","doc":null,"summary":null,"abstract":false,"args":[{"name":"code","doc":null,"default_value":"","external_name":"code","restriction":"Int32"}],"args_string":"(code : Int32)","source_link":null,"def":{"name":"code=","args":[{"name":"code","doc":null,"default_value":"","external_name":"code","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@code = code"}},{"id":"errmsg:String-instance-method","html_id":"errmsg:String-instance-method","name":"errmsg","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":null,"def":{"name":"errmsg","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@errmsg"}},{"id":"errmsg=(errmsg:String)-instance-method","html_id":"errmsg=(errmsg:String)-instance-method","name":"errmsg=","doc":null,"summary":null,"abstract":false,"args":[{"name":"errmsg","doc":null,"default_value":"","external_name":"errmsg","restriction":"String"}],"args_string":"(errmsg : String)","source_link":null,"def":{"name":"errmsg=","args":[{"name":"errmsg","doc":null,"default_value":"","external_name":"errmsg","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@errmsg = errmsg"}},{"id":"index:Int32-instance-method","html_id":"index:Int32-instance-method","name":"index","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":null,"def":{"name":"index","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@index"}},{"id":"index=(index:Int32)-instance-method","html_id":"index=(index:Int32)-instance-method","name":"index=","doc":null,"summary":null,"abstract":false,"args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int32"}],"args_string":"(index : Int32)","source_link":null,"def":{"name":"index=","args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@index = index"}},{"id":"to_bson(bson=BSON.new)-instance-method","html_id":"to_bson(bson=BSON.new)-instance-method","name":"to_bson","doc":"Converts to a BSON representation.\n\n```\nuser = User.new name: \"John\"\nbson = user.to_bson\n```","summary":"<p>Converts to a BSON representation.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"args_string":"(bson = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>)","source_link":null,"def":{"name":"to_bson","args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n      {% global_options = @type.annotations(BSON::Options) %}\n      {% camelize = global_options.reduce(false) do |_, a|\n  a[:camelize]\nend %}\n      {% for ivar in @type.instance_vars %}\n        {% ann = ivar.annotation(BSON::Field) %}\n        {% typ = ivar.type.union_types.select do |t|\n  t != Nil\nend[0] %}\n        {% key = ivar.name %}\n        {% bson_key = ann ? ann[:key].id : camelize ? ivar.name.camelcase(lower: camelize == \"lower\") : ivar.name %}\n        {% if ann && ann[:ignore] %}{% else %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            unless self.{{ key }}.nil?\n          {% end %}\n            {% if typ.has_method?(:to_bson) %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}.try &.to_bson\n            {% else %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}\n            {% end %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            end\n          {% end %}\n        {% end %}\n      {% end %}\n      {% end %}\nbson\n"}}],"macros":[],"types":[]}]},{"html_id":"cryomongo/Mongo/Commands/Compact","path":"Mongo/Commands/Compact.html","kind":"module","full_name":"Mongo::Commands::Compact","name":"Compact","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/Compact","kind":"module","full_name":"Mongo::Commands::Compact","name":"Compact"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"Rewrites and defragments all data and indexes in a collection.\nOn WiredTiger databases, this command will release unneeded disk space to the operating system.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/compact/).","summary":"<p>Rewrites and defragments all data and indexes in a collection.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command(database:String,collection:Collection::CollectionKey,options)-instance-method","html_id":"command(database:String,collection:Collection::CollectionKey,options)-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"args_string":"(database : String, collection : Collection::CollectionKey, options)","source_link":null,"def":{"name":"command","args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({compact: collection, \"$db\": database}, options)"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Common::BaseResult.from_bson(bson)"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/ConnectionStatus","path":"Mongo/Commands/ConnectionStatus.html","kind":"module","full_name":"Mongo::Commands::ConnectionStatus","name":"ConnectionStatus","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/ConnectionStatus","kind":"module","full_name":"Mongo::Commands::ConnectionStatus","name":"ConnectionStatus"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"Returns information about the current connection, specifically the state of authenticated users and their available permissions.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/connectionStatus/).","summary":"<p>Returns information about the current connection, specifically the state of authenticated users and their available permissions.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command(options)-instance-method","html_id":"command(options)-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"args_string":"(options)","source_link":null,"def":{"name":"command","args":[{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({connectionStatus: 1, \"$db\": \"admin\"}, options)"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"bson"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/ConnPoolStats","path":"Mongo/Commands/ConnPoolStats.html","kind":"module","full_name":"Mongo::Commands::ConnPoolStats","name":"ConnPoolStats","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/ConnPoolStats","kind":"module","full_name":"Mongo::Commands::ConnPoolStats","name":"ConnPoolStats"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"The command *connPoolStats* returns information regarding the open outgoing connections from the current database\ninstance to other members of the sharded cluster or replica set.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/connPoolStats/).","summary":"<p>The command <em>connPoolStats</em> returns information regarding the open outgoing connections from the current database instance to other members of the sharded cluster or replica set.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command-instance-method","html_id":"command-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"command","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({connPoolStats: 1, \"$db\": \"admin\"}, options)"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"bson"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/ConvertToCapped","path":"Mongo/Commands/ConvertToCapped.html","kind":"module","full_name":"Mongo::Commands::ConvertToCapped","name":"ConvertToCapped","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/ConvertToCapped","kind":"module","full_name":"Mongo::Commands::ConvertToCapped","name":"ConvertToCapped"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"The convertToCapped command converts an existing, non-capped collection to a capped collection within the same database.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/convertToCapped/).","summary":"<p>The convertToCapped command converts an existing, non-capped collection to a capped collection within the same database.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command(database:String,collection:Collection::CollectionKey,size:Int64,options)-instance-method","html_id":"command(database:String,collection:Collection::CollectionKey,size:Int64,options)-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"},{"name":"size","doc":null,"default_value":"","external_name":"size","restriction":"Int64"},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"args_string":"(database : String, collection : Collection::CollectionKey, size : Int64, options)","source_link":null,"def":{"name":"command","args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"},{"name":"size","doc":null,"default_value":"","external_name":"size","restriction":"Int64"},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({convertToCapped: collection, size: size, \"$db\": database}, options)"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Common::BaseResult.from_bson(bson)"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/Count","path":"Mongo/Commands/Count.html","kind":"module","full_name":"Mongo::Commands::Count","name":"Count","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/Count","kind":"module","full_name":"Mongo::Commands::Count","name":"Count"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"Counts the number of documents in a collection or a view.\nReturns a document that contains this count and as well as the command status.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/count/).","summary":"<p>Counts the number of documents in a collection or a view.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command(database:String,collection:Collection::CollectionKey,options)-instance-method","html_id":"command(database:String,collection:Collection::CollectionKey,options)-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"args_string":"(database : String, collection : Collection::CollectionKey, options)","source_link":null,"def":{"name":"command","args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({count: collection, \"$db\": database}, options) do |key|\n  (key == \"query\") && key.nil?\nend"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"bson"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/Create","path":"Mongo/Commands/Create.html","kind":"module","full_name":"Mongo::Commands::Create","name":"Create","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/Create","kind":"module","full_name":"Mongo::Commands::Create","name":"Create"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"Explicitly creates a collection or view.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/create/).","summary":"<p>Explicitly creates a collection or view.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command(database:String,name:Collection::CollectionKey,options)-instance-method","html_id":"command(database:String,name:Collection::CollectionKey,options)-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"Collection::CollectionKey"},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"args_string":"(database : String, name : Collection::CollectionKey, options)","source_link":null,"def":{"name":"command","args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"Collection::CollectionKey"},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({create: name, \"$db\": database}, options)"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Common::BaseResult.from_bson(bson)"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/CreateIndexes","path":"Mongo/Commands/CreateIndexes.html","kind":"module","full_name":"Mongo::Commands::CreateIndexes","name":"CreateIndexes","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/CreateIndexes","kind":"module","full_name":"Mongo::Commands::CreateIndexes","name":"CreateIndexes"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"Builds one or more indexes on a collection.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/createIndexes/).","summary":"<p>Builds one or more indexes on a collection.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command(database:String,collection:Collection::CollectionKey,indexes:Array,options)-instance-method","html_id":"command(database:String,collection:Collection::CollectionKey,indexes:Array,options)-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"},{"name":"indexes","doc":null,"default_value":"","external_name":"indexes","restriction":"Array"},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"args_string":"(database : String, collection : Collection::CollectionKey, indexes : Array, options)","source_link":null,"def":{"name":"command","args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"},{"name":"indexes","doc":null,"default_value":"","external_name":"indexes","restriction":"Array"},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({createIndexes: collection, indexes: indexes.map do |index|\n  BSON.new(index)\nend, \"$db\": database}, options)"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Result.from_bson(bson)"}}],"macros":[],"types":[{"html_id":"cryomongo/Mongo/Commands/CreateIndexes/Result","path":"Mongo/Commands/CreateIndexes/Result.html","kind":"struct","full_name":"Mongo::Commands::CreateIndexes::Result","name":"Result","abstract":false,"superclass":{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"cryomongo/Mongo/Commands/Common/Result","kind":"module","full_name":"Mongo::Commands::Common::Result","name":"Result"},{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cryomongo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"cryomongo/Mongo/Commands/Common/Result","kind":"module","full_name":"Mongo::Commands::Common::Result","name":"Result"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands/CreateIndexes","kind":"module","full_name":"Mongo::Commands::CreateIndexes","name":"CreateIndexes"},"doc":null,"summary":null,"class_methods":[{"id":"from_bson(bson:BSON)-class-method","html_id":"from_bson(bson:BSON)-class-method","name":"from_bson","doc":"NOTE: See `self.new`.","summary":"<p><span class=\"flag purple\">NOTE</span>  See <code>self<a href=\"../../../Mongo/Commands/CreateIndexes/Result.html#new(bson:BSON)-class-method\">.new</a></code>.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"from_bson","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.new(bson)"}}],"constructors":[{"id":"new(bson:BSON)-class-method","html_id":"new(bson:BSON)-class-method","name":"new","doc":"Allocate an instance and copies data from a BSON struct.\n\n```\nclass User\n  include BSON::Serializable\n  property name : String\nend\n\ndata = BSON.new\ndata[\"name\"] = \"John\"\nUser.new(data)\n```","summary":"<p>Allocate an instance and copies data from a BSON struct.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"new","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(bson)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"cluster_time:BSON?-instance-method","html_id":"cluster_time:BSON?-instance-method","name":"cluster_time","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON?","source_link":null,"def":{"name":"cluster_time","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON | ::Nil","visibility":"Public","body":"@cluster_time"}},{"id":"cluster_time=(cluster_time:BSON?)-instance-method","html_id":"cluster_time=(cluster_time:BSON?)-instance-method","name":"cluster_time=","doc":null,"summary":null,"abstract":false,"args":[{"name":"cluster_time","doc":null,"default_value":"","external_name":"cluster_time","restriction":"BSON | ::Nil"}],"args_string":"(cluster_time : BSON?)","source_link":null,"def":{"name":"cluster_time=","args":[{"name":"cluster_time","doc":null,"default_value":"","external_name":"cluster_time","restriction":"BSON | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@cluster_time = cluster_time"}},{"id":"code:Int32?-instance-method","html_id":"code:Int32?-instance-method","name":"code","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32?","source_link":null,"def":{"name":"code","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32 | ::Nil","visibility":"Public","body":"@code"}},{"id":"code=(code:Int32?)-instance-method","html_id":"code=(code:Int32?)-instance-method","name":"code=","doc":null,"summary":null,"abstract":false,"args":[{"name":"code","doc":null,"default_value":"","external_name":"code","restriction":"Int32 | ::Nil"}],"args_string":"(code : Int32?)","source_link":null,"def":{"name":"code=","args":[{"name":"code","doc":null,"default_value":"","external_name":"code","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@code = code"}},{"id":"created_collection_automatically:Bool?-instance-method","html_id":"created_collection_automatically:Bool?-instance-method","name":"created_collection_automatically","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool?","source_link":null,"def":{"name":"created_collection_automatically","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool | ::Nil","visibility":"Public","body":"@created_collection_automatically"}},{"id":"created_collection_automatically=(created_collection_automatically:Bool?)-instance-method","html_id":"created_collection_automatically=(created_collection_automatically:Bool?)-instance-method","name":"created_collection_automatically=","doc":null,"summary":null,"abstract":false,"args":[{"name":"created_collection_automatically","doc":null,"default_value":"","external_name":"created_collection_automatically","restriction":"Bool | ::Nil"}],"args_string":"(created_collection_automatically : Bool?)","source_link":null,"def":{"name":"created_collection_automatically=","args":[{"name":"created_collection_automatically","doc":null,"default_value":"","external_name":"created_collection_automatically","restriction":"Bool | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@created_collection_automatically = created_collection_automatically"}},{"id":"errmsg:String?-instance-method","html_id":"errmsg:String?-instance-method","name":"errmsg","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String?","source_link":null,"def":{"name":"errmsg","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"@errmsg"}},{"id":"errmsg=(errmsg:String?)-instance-method","html_id":"errmsg=(errmsg:String?)-instance-method","name":"errmsg=","doc":null,"summary":null,"abstract":false,"args":[{"name":"errmsg","doc":null,"default_value":"","external_name":"errmsg","restriction":"String | ::Nil"}],"args_string":"(errmsg : String?)","source_link":null,"def":{"name":"errmsg=","args":[{"name":"errmsg","doc":null,"default_value":"","external_name":"errmsg","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@errmsg = errmsg"}},{"id":"note:String?-instance-method","html_id":"note:String?-instance-method","name":"note","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String?","source_link":null,"def":{"name":"note","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"@note"}},{"id":"note=(note:String?)-instance-method","html_id":"note=(note:String?)-instance-method","name":"note=","doc":null,"summary":null,"abstract":false,"args":[{"name":"note","doc":null,"default_value":"","external_name":"note","restriction":"String | ::Nil"}],"args_string":"(note : String?)","source_link":null,"def":{"name":"note=","args":[{"name":"note","doc":null,"default_value":"","external_name":"note","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@note = note"}},{"id":"num_indexes_after:Int32?-instance-method","html_id":"num_indexes_after:Int32?-instance-method","name":"num_indexes_after","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32?","source_link":null,"def":{"name":"num_indexes_after","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32 | ::Nil","visibility":"Public","body":"@num_indexes_after"}},{"id":"num_indexes_after=(num_indexes_after:Int32?)-instance-method","html_id":"num_indexes_after=(num_indexes_after:Int32?)-instance-method","name":"num_indexes_after=","doc":null,"summary":null,"abstract":false,"args":[{"name":"num_indexes_after","doc":null,"default_value":"","external_name":"num_indexes_after","restriction":"Int32 | ::Nil"}],"args_string":"(num_indexes_after : Int32?)","source_link":null,"def":{"name":"num_indexes_after=","args":[{"name":"num_indexes_after","doc":null,"default_value":"","external_name":"num_indexes_after","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@num_indexes_after = num_indexes_after"}},{"id":"num_indexes_before:Int32?-instance-method","html_id":"num_indexes_before:Int32?-instance-method","name":"num_indexes_before","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32?","source_link":null,"def":{"name":"num_indexes_before","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32 | ::Nil","visibility":"Public","body":"@num_indexes_before"}},{"id":"num_indexes_before=(num_indexes_before:Int32?)-instance-method","html_id":"num_indexes_before=(num_indexes_before:Int32?)-instance-method","name":"num_indexes_before=","doc":null,"summary":null,"abstract":false,"args":[{"name":"num_indexes_before","doc":null,"default_value":"","external_name":"num_indexes_before","restriction":"Int32 | ::Nil"}],"args_string":"(num_indexes_before : Int32?)","source_link":null,"def":{"name":"num_indexes_before=","args":[{"name":"num_indexes_before","doc":null,"default_value":"","external_name":"num_indexes_before","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@num_indexes_before = num_indexes_before"}},{"id":"ok:Float64-instance-method","html_id":"ok:Float64-instance-method","name":"ok","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","source_link":null,"def":{"name":"ok","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@ok"}},{"id":"ok=(ok:Float64)-instance-method","html_id":"ok=(ok:Float64)-instance-method","name":"ok=","doc":null,"summary":null,"abstract":false,"args":[{"name":"ok","doc":null,"default_value":"","external_name":"ok","restriction":"Float64"}],"args_string":"(ok : Float64)","source_link":null,"def":{"name":"ok=","args":[{"name":"ok","doc":null,"default_value":"","external_name":"ok","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@ok = ok"}},{"id":"operation_time:BSON::Timestamp?-instance-method","html_id":"operation_time:BSON::Timestamp?-instance-method","name":"operation_time","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON::Timestamp?","source_link":null,"def":{"name":"operation_time","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON::Timestamp | ::Nil","visibility":"Public","body":"@operation_time"}},{"id":"operation_time=(operation_time:BSON::Timestamp?)-instance-method","html_id":"operation_time=(operation_time:BSON::Timestamp?)-instance-method","name":"operation_time=","doc":null,"summary":null,"abstract":false,"args":[{"name":"operation_time","doc":null,"default_value":"","external_name":"operation_time","restriction":"BSON::Timestamp | ::Nil"}],"args_string":"(operation_time : BSON::Timestamp?)","source_link":null,"def":{"name":"operation_time=","args":[{"name":"operation_time","doc":null,"default_value":"","external_name":"operation_time","restriction":"BSON::Timestamp | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@operation_time = operation_time"}},{"id":"to_bson(bson=BSON.new)-instance-method","html_id":"to_bson(bson=BSON.new)-instance-method","name":"to_bson","doc":"Converts to a BSON representation.\n\n```\nuser = User.new name: \"John\"\nbson = user.to_bson\n```","summary":"<p>Converts to a BSON representation.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"args_string":"(bson = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>)","source_link":null,"def":{"name":"to_bson","args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n      {% global_options = @type.annotations(BSON::Options) %}\n      {% camelize = global_options.reduce(false) do |_, a|\n  a[:camelize]\nend %}\n      {% for ivar in @type.instance_vars %}\n        {% ann = ivar.annotation(BSON::Field) %}\n        {% typ = ivar.type.union_types.select do |t|\n  t != Nil\nend[0] %}\n        {% key = ivar.name %}\n        {% bson_key = ann ? ann[:key].id : camelize ? ivar.name.camelcase(lower: camelize == \"lower\") : ivar.name %}\n        {% if ann && ann[:ignore] %}{% else %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            unless self.{{ key }}.nil?\n          {% end %}\n            {% if typ.has_method?(:to_bson) %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}.try &.to_bson\n            {% else %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}\n            {% end %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            end\n          {% end %}\n        {% end %}\n      {% end %}\n      {% end %}\nbson\n"}}],"macros":[],"types":[]}]},{"html_id":"cryomongo/Mongo/Commands/CurrentOp","path":"Mongo/Commands/CurrentOp.html","kind":"module","full_name":"Mongo::Commands::CurrentOp","name":"CurrentOp","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/CurrentOp","kind":"module","full_name":"Mongo::Commands::CurrentOp","name":"CurrentOp"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"Returns a document that contains information on in-progress operations for the mongod instance.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/currentOp/).","summary":"<p>Returns a document that contains information on in-progress operations for the mongod instance.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command(options)-instance-method","html_id":"command(options)-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"args_string":"(options)","source_link":null,"def":{"name":"command","args":[{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({currentOp: 1, \"$db\": \"admin\"}, options)"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"bson"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/DataSize","path":"Mongo/Commands/DataSize.html","kind":"module","full_name":"Mongo::Commands::DataSize","name":"DataSize","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/DataSize","kind":"module","full_name":"Mongo::Commands::DataSize","name":"DataSize"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"The *dataSize* command returns the data size for a set of data within a certain range.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/dataSize/).","summary":"<p>The <em>dataSize</em> command returns the data size for a set of data within a certain range.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command(database:String,collection:Collection::CollectionKey,options)-instance-method","html_id":"command(database:String,collection:Collection::CollectionKey,options)-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"args_string":"(database : String, collection : Collection::CollectionKey, options)","source_link":null,"def":{"name":"command","args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({dataSize: collection, \"$db\": database}, options)"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"bson"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/DbHash","path":"Mongo/Commands/DbHash.html","kind":"module","full_name":"Mongo::Commands::DbHash","name":"DbHash","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/DbHash","kind":"module","full_name":"Mongo::Commands::DbHash","name":"DbHash"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"Returns the hash values of the collections in a database and an MD5 value for these collections.\n*dbHash* is useful to compare databases across mongod instances, such as across members of replica sets.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/dbHash/).","summary":"<p>Returns the hash values of the collections in a database and an MD5 value for these collections.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command(database:String,options)-instance-method","html_id":"command(database:String,options)-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"args_string":"(database : String, options)","source_link":null,"def":{"name":"command","args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({dbHash: 1, \"$db\": database}, options)"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"bson"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/DbStats","path":"Mongo/Commands/DbStats.html","kind":"module","full_name":"Mongo::Commands::DbStats","name":"DbStats","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/DbStats","kind":"module","full_name":"Mongo::Commands::DbStats","name":"DbStats"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"The *dbStats* command returns storage statistics for a given database.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/dbStats/).","summary":"<p>The <em>dbStats</em> command returns storage statistics for a given database.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command(database:String,options)-instance-method","html_id":"command(database:String,options)-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"args_string":"(database : String, options)","source_link":null,"def":{"name":"command","args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({dbStats: 1, \"$db\": database}, options)"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"bson"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/Delete","path":"Mongo/Commands/Delete.html","kind":"module","full_name":"Mongo::Commands::Delete","name":"Delete","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/Delete","kind":"module","full_name":"Mongo::Commands::Delete","name":"Delete"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"The *delete* command removes documents from a collection.\nA single delete command can contain multiple delete specifications.\nThe command cannot operate on capped collections.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/delete/).","summary":"<p>The <em>delete</em> command removes documents from a collection.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command(database:String,collection:Collection::CollectionKey,deletes:Array,options)-instance-method","html_id":"command(database:String,collection:Collection::CollectionKey,deletes:Array,options)-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"},{"name":"deletes","doc":null,"default_value":"","external_name":"deletes","restriction":"Array"},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"args_string":"(database : String, collection : Collection::CollectionKey, deletes : Array, options)","source_link":null,"def":{"name":"command","args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"},{"name":"deletes","doc":null,"default_value":"","external_name":"deletes","restriction":"Array"},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({delete: collection, \"$db\": database}, sequences: {deletes: deletes.map do |elt|\n  BSON.new(elt)\nend}, options: options)"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Common::DeleteResult.from_bson(bson)"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/Distinct","path":"Mongo/Commands/Distinct.html","kind":"module","full_name":"Mongo::Commands::Distinct","name":"Distinct","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/Distinct","kind":"module","full_name":"Mongo::Commands::Distinct","name":"Distinct"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"Finds the distinct values for a specified field across a single collection, and returns a document that contains an array of the distinct values.\nThe return document also contains an embedded document with query statistics and the query plan.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/distinct/).","summary":"<p>Finds the distinct values for a specified field across a single collection, and returns a document that contains an array of the distinct values.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command(database:String,collection:Collection::CollectionKey,key:String,options)-instance-method","html_id":"command(database:String,collection:Collection::CollectionKey,key:String,options)-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"},{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"args_string":"(database : String, collection : Collection::CollectionKey, key : String, options)","source_link":null,"def":{"name":"command","args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"},{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({distinct: collection, key: key, \"$db\": database}, options)"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Result.from_bson(bson)"}}],"macros":[],"types":[{"html_id":"cryomongo/Mongo/Commands/Distinct/Result","path":"Mongo/Commands/Distinct/Result.html","kind":"struct","full_name":"Mongo::Commands::Distinct::Result","name":"Result","abstract":false,"superclass":{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"cryomongo/Mongo/Commands/Common/Result","kind":"module","full_name":"Mongo::Commands::Common::Result","name":"Result"},{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cryomongo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"cryomongo/Mongo/Commands/Common/Result","kind":"module","full_name":"Mongo::Commands::Common::Result","name":"Result"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands/Distinct","kind":"module","full_name":"Mongo::Commands::Distinct","name":"Distinct"},"doc":null,"summary":null,"class_methods":[{"id":"from_bson(bson:BSON)-class-method","html_id":"from_bson(bson:BSON)-class-method","name":"from_bson","doc":"NOTE: See `self.new`.","summary":"<p><span class=\"flag purple\">NOTE</span>  See <code>self<a href=\"../../../Mongo/Commands/Distinct/Result.html#new(bson:BSON)-class-method\">.new</a></code>.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"from_bson","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.new(bson)"}}],"constructors":[{"id":"new(bson:BSON)-class-method","html_id":"new(bson:BSON)-class-method","name":"new","doc":"Allocate an instance and copies data from a BSON struct.\n\n```\nclass User\n  include BSON::Serializable\n  property name : String\nend\n\ndata = BSON.new\ndata[\"name\"] = \"John\"\nUser.new(data)\n```","summary":"<p>Allocate an instance and copies data from a BSON struct.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"new","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(bson)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"cluster_time:BSON?-instance-method","html_id":"cluster_time:BSON?-instance-method","name":"cluster_time","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON?","source_link":null,"def":{"name":"cluster_time","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON | ::Nil","visibility":"Public","body":"@cluster_time"}},{"id":"cluster_time=(cluster_time:BSON?)-instance-method","html_id":"cluster_time=(cluster_time:BSON?)-instance-method","name":"cluster_time=","doc":null,"summary":null,"abstract":false,"args":[{"name":"cluster_time","doc":null,"default_value":"","external_name":"cluster_time","restriction":"BSON | ::Nil"}],"args_string":"(cluster_time : BSON?)","source_link":null,"def":{"name":"cluster_time=","args":[{"name":"cluster_time","doc":null,"default_value":"","external_name":"cluster_time","restriction":"BSON | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@cluster_time = cluster_time"}},{"id":"ok:Float64-instance-method","html_id":"ok:Float64-instance-method","name":"ok","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","source_link":null,"def":{"name":"ok","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@ok"}},{"id":"ok=(ok:Float64)-instance-method","html_id":"ok=(ok:Float64)-instance-method","name":"ok=","doc":null,"summary":null,"abstract":false,"args":[{"name":"ok","doc":null,"default_value":"","external_name":"ok","restriction":"Float64"}],"args_string":"(ok : Float64)","source_link":null,"def":{"name":"ok=","args":[{"name":"ok","doc":null,"default_value":"","external_name":"ok","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@ok = ok"}},{"id":"operation_time:BSON::Timestamp?-instance-method","html_id":"operation_time:BSON::Timestamp?-instance-method","name":"operation_time","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON::Timestamp?","source_link":null,"def":{"name":"operation_time","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON::Timestamp | ::Nil","visibility":"Public","body":"@operation_time"}},{"id":"operation_time=(operation_time:BSON::Timestamp?)-instance-method","html_id":"operation_time=(operation_time:BSON::Timestamp?)-instance-method","name":"operation_time=","doc":null,"summary":null,"abstract":false,"args":[{"name":"operation_time","doc":null,"default_value":"","external_name":"operation_time","restriction":"BSON::Timestamp | ::Nil"}],"args_string":"(operation_time : BSON::Timestamp?)","source_link":null,"def":{"name":"operation_time=","args":[{"name":"operation_time","doc":null,"default_value":"","external_name":"operation_time","restriction":"BSON::Timestamp | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@operation_time = operation_time"}},{"id":"to_bson(bson=BSON.new)-instance-method","html_id":"to_bson(bson=BSON.new)-instance-method","name":"to_bson","doc":"Converts to a BSON representation.\n\n```\nuser = User.new name: \"John\"\nbson = user.to_bson\n```","summary":"<p>Converts to a BSON representation.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"args_string":"(bson = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>)","source_link":null,"def":{"name":"to_bson","args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n      {% global_options = @type.annotations(BSON::Options) %}\n      {% camelize = global_options.reduce(false) do |_, a|\n  a[:camelize]\nend %}\n      {% for ivar in @type.instance_vars %}\n        {% ann = ivar.annotation(BSON::Field) %}\n        {% typ = ivar.type.union_types.select do |t|\n  t != Nil\nend[0] %}\n        {% key = ivar.name %}\n        {% bson_key = ann ? ann[:key].id : camelize ? ivar.name.camelcase(lower: camelize == \"lower\") : ivar.name %}\n        {% if ann && ann[:ignore] %}{% else %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            unless self.{{ key }}.nil?\n          {% end %}\n            {% if typ.has_method?(:to_bson) %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}.try &.to_bson\n            {% else %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}\n            {% end %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            end\n          {% end %}\n        {% end %}\n      {% end %}\n      {% end %}\nbson\n"}},{"id":"values:BSON-instance-method","html_id":"values:BSON-instance-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON","source_link":null,"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON","visibility":"Public","body":"@values"}},{"id":"values=(values:BSON)-instance-method","html_id":"values=(values:BSON)-instance-method","name":"values=","doc":null,"summary":null,"abstract":false,"args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"BSON"}],"args_string":"(values : BSON)","source_link":null,"def":{"name":"values=","args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@values = values"}}],"macros":[],"types":[]}]},{"html_id":"cryomongo/Mongo/Commands/Drop","path":"Mongo/Commands/Drop.html","kind":"module","full_name":"Mongo::Commands::Drop","name":"Drop","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/Drop","kind":"module","full_name":"Mongo::Commands::Drop","name":"Drop"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"The *drop* command removes an entire collection from a database.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/drop/).","summary":"<p>The <em>drop</em> command removes an entire collection from a database.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command(database:String,name:Collection::CollectionKey,options=nil)-instance-method","html_id":"command(database:String,name:Collection::CollectionKey,options=nil)-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"Collection::CollectionKey"},{"name":"options","doc":null,"default_value":"nil","external_name":"options","restriction":""}],"args_string":"(database : String, name : Collection::CollectionKey, options = <span class=\"n\">nil</span>)","source_link":null,"def":{"name":"command","args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"Collection::CollectionKey"},{"name":"options","doc":null,"default_value":"nil","external_name":"options","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({drop: name, \"$db\": database}, options)"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Common::BaseResult.from_bson(bson)"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/DropConnections","path":"Mongo/Commands/DropConnections.html","kind":"module","full_name":"Mongo::Commands::DropConnections","name":"DropConnections","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/DropConnections","kind":"module","full_name":"Mongo::Commands::DropConnections","name":"DropConnections"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"The *dropConnections* command drops the mongod/mongos instance’s outgoing connections to the specified hosts.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/dropConnections/).","summary":"<p>The <em>dropConnections</em> command drops the mongod/mongos instance’s outgoing connections to the specified hosts.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command(host_and_port:Array(String))-instance-method","html_id":"command(host_and_port:Array(String))-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[{"name":"host_and_port","doc":null,"default_value":"","external_name":"host_and_port","restriction":"Array(String)"}],"args_string":"(host_and_port : Array(String))","source_link":null,"def":{"name":"command","args":[{"name":"host_and_port","doc":null,"default_value":"","external_name":"host_and_port","restriction":"Array(String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({dropConnections: 1, hostAndPort: host_and_port, \"$db\": \"admin\"})"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Common::BaseResult.from_bson(bson)"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/DropDatabase","path":"Mongo/Commands/DropDatabase.html","kind":"module","full_name":"Mongo::Commands::DropDatabase","name":"DropDatabase","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/DropDatabase","kind":"module","full_name":"Mongo::Commands::DropDatabase","name":"DropDatabase"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"The *dropDatabase* command drops the current database, deleting the associated data files.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/dropDatabase/).","summary":"<p>The <em>dropDatabase</em> command drops the current database, deleting the associated data files.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command(database:String,options=nil)-instance-method","html_id":"command(database:String,options=nil)-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"options","doc":null,"default_value":"nil","external_name":"options","restriction":""}],"args_string":"(database : String, options = <span class=\"n\">nil</span>)","source_link":null,"def":{"name":"command","args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"options","doc":null,"default_value":"nil","external_name":"options","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({dropDatabase: 1, \"$db\": database}, options)"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Common::BaseResult.from_bson(bson)"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/DropIndexes","path":"Mongo/Commands/DropIndexes.html","kind":"module","full_name":"Mongo::Commands::DropIndexes","name":"DropIndexes","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/DropIndexes","kind":"module","full_name":"Mongo::Commands::DropIndexes","name":"DropIndexes"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"The *dropIndexes* command drops one or more indexes (except the index on the _id field) from the specified collection.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/dropIndexes/).","summary":"<p>The <em>dropIndexes</em> command drops one or more indexes (except the index on the _id field) from the specified collection.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command(database:String,collection:Collection::CollectionKey,index,options)-instance-method","html_id":"command(database:String,collection:Collection::CollectionKey,index,options)-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"},{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":""},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"args_string":"(database : String, collection : Collection::CollectionKey, index, options)","source_link":null,"def":{"name":"command","args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"},{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":""},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({dropIndexes: collection, index: index, \"$db\": database}, options)"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Common::BaseResult.from_bson(bson)"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/Explain","path":"Mongo/Commands/Explain.html","kind":"module","full_name":"Mongo::Commands::Explain","name":"Explain","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/Explain","kind":"module","full_name":"Mongo::Commands::Explain","name":"Explain"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"The *explain* command provides information on the execution of the following commands: *aggregate*, *count*, *distinct*, *find*, *findAndModify*, *delete*, and *update*.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/explain/).","summary":"<p>The <em>explain</em> command provides information on the execution of the following commands: <em>aggregate</em>, <em>count</em>, <em>distinct</em>, <em>find</em>, <em>findAndModify</em>, <em>delete</em>, and <em>update</em>.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command(database:String,explain,options)-instance-method","html_id":"command(database:String,explain,options)-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"explain","doc":null,"default_value":"","external_name":"explain","restriction":""},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"args_string":"(database : String, explain, options)","source_link":null,"def":{"name":"command","args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"explain","doc":null,"default_value":"","external_name":"explain","restriction":""},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({explain: BSON.new(explain), \"$db\": database}, options)"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"bson"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/Find","path":"Mongo/Commands/Find.html","kind":"module","full_name":"Mongo::Commands::Find","name":"Find","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/Find","kind":"module","full_name":"Mongo::Commands::Find","name":"Find"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"Executes a *query* and returns the first batch of results and the cursor id, from which the client can construct a cursor.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/find/).","summary":"<p>Executes a <em>query</em> and returns the first batch of results and the cursor id, from which the client can construct a cursor.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command(database:String,collection:Collection::CollectionKey,filter,options)-instance-method","html_id":"command(database:String,collection:Collection::CollectionKey,filter,options)-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"},{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":""},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"args_string":"(database : String, collection : Collection::CollectionKey, filter, options)","source_link":null,"def":{"name":"command","args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"},{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":""},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({find: collection, filter: BSON.new(filter), \"$db\": database}, options)"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Common::QueryResult.from_bson(bson)"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/FindAndModify","path":"Mongo/Commands/FindAndModify.html","kind":"module","full_name":"Mongo::Commands::FindAndModify","name":"FindAndModify","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/FindAndModify","kind":"module","full_name":"Mongo::Commands::FindAndModify","name":"FindAndModify"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"The *findAndModify* command modifies and returns a single document.\nBy default, the returned document does not include the modifications made on the update.\nTo return the document with the modifications made on the update, use the new option.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/findAndModify/).","summary":"<p>The <em>findAndModify</em> command modifies and returns a single document.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command(database:String,collection:Collection::CollectionKey,filter,options)-instance-method","html_id":"command(database:String,collection:Collection::CollectionKey,filter,options)-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"},{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":""},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"args_string":"(database : String, collection : Collection::CollectionKey, filter, options)","source_link":null,"def":{"name":"command","args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"},{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":""},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({findAndModify: collection, query: BSON.new(filter), \"$db\": database}, options)"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"bson"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/Fsync","path":"Mongo/Commands/Fsync.html","kind":"module","full_name":"Mongo::Commands::Fsync","name":"Fsync","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/Fsync","kind":"module","full_name":"Mongo::Commands::Fsync","name":"Fsync"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"Forces the mongod process to flush all pending writes from the storage layer to disk and locks the entire mongod instance\nto prevent additional writes until the user releases the lock with a corresponding *fsyncUnlock*.\n\nOptionally, you can use *fsync* to lock the mongod instance and block write operations for the purpose of capturing backups.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/fsync/).","summary":"<p>Forces the mongod process to flush all pending writes from the storage layer to disk and locks the entire mongod instance to prevent additional writes until the user releases the lock with a corresponding <em>fsyncUnlock</em>.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command(options)-instance-method","html_id":"command(options)-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"args_string":"(options)","source_link":null,"def":{"name":"command","args":[{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({fsync: 1, \"$db\": \"admin\"}, options)"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Common::BaseResult.from_bson(bson)"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/FsyncUnlock","path":"Mongo/Commands/FsyncUnlock.html","kind":"module","full_name":"Mongo::Commands::FsyncUnlock","name":"FsyncUnlock","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/FsyncUnlock","kind":"module","full_name":"Mongo::Commands::FsyncUnlock","name":"FsyncUnlock"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"Reduces the lock taken by *fsync* (with the lock option) on a mongod instance by 1.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/fsyncUnlock/).","summary":"<p>Reduces the lock taken by <em>fsync</em> (with the lock option) on a mongod instance by 1.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command-instance-method","html_id":"command-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"command","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({fsyncUnlock: 1, \"$db\": \"admin\"})"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Result.from_bson(bson)"}}],"macros":[],"types":[{"html_id":"cryomongo/Mongo/Commands/FsyncUnlock/Result","path":"Mongo/Commands/FsyncUnlock/Result.html","kind":"struct","full_name":"Mongo::Commands::FsyncUnlock::Result","name":"Result","abstract":false,"superclass":{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"cryomongo/Mongo/Commands/Common/Result","kind":"module","full_name":"Mongo::Commands::Common::Result","name":"Result"},{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cryomongo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"cryomongo/Mongo/Commands/Common/Result","kind":"module","full_name":"Mongo::Commands::Common::Result","name":"Result"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands/FsyncUnlock","kind":"module","full_name":"Mongo::Commands::FsyncUnlock","name":"FsyncUnlock"},"doc":null,"summary":null,"class_methods":[{"id":"from_bson(bson:BSON)-class-method","html_id":"from_bson(bson:BSON)-class-method","name":"from_bson","doc":"NOTE: See `self.new`.","summary":"<p><span class=\"flag purple\">NOTE</span>  See <code>self<a href=\"../../../Mongo/Commands/FsyncUnlock/Result.html#new(bson:BSON)-class-method\">.new</a></code>.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"from_bson","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.new(bson)"}}],"constructors":[{"id":"new(bson:BSON)-class-method","html_id":"new(bson:BSON)-class-method","name":"new","doc":"Allocate an instance and copies data from a BSON struct.\n\n```\nclass User\n  include BSON::Serializable\n  property name : String\nend\n\ndata = BSON.new\ndata[\"name\"] = \"John\"\nUser.new(data)\n```","summary":"<p>Allocate an instance and copies data from a BSON struct.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"new","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(bson)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"cluster_time:BSON?-instance-method","html_id":"cluster_time:BSON?-instance-method","name":"cluster_time","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON?","source_link":null,"def":{"name":"cluster_time","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON | ::Nil","visibility":"Public","body":"@cluster_time"}},{"id":"cluster_time=(cluster_time:BSON?)-instance-method","html_id":"cluster_time=(cluster_time:BSON?)-instance-method","name":"cluster_time=","doc":null,"summary":null,"abstract":false,"args":[{"name":"cluster_time","doc":null,"default_value":"","external_name":"cluster_time","restriction":"BSON | ::Nil"}],"args_string":"(cluster_time : BSON?)","source_link":null,"def":{"name":"cluster_time=","args":[{"name":"cluster_time","doc":null,"default_value":"","external_name":"cluster_time","restriction":"BSON | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@cluster_time = cluster_time"}},{"id":"info:String-instance-method","html_id":"info:String-instance-method","name":"info","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":null,"def":{"name":"info","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@info"}},{"id":"info=(info:String)-instance-method","html_id":"info=(info:String)-instance-method","name":"info=","doc":null,"summary":null,"abstract":false,"args":[{"name":"info","doc":null,"default_value":"","external_name":"info","restriction":"String"}],"args_string":"(info : String)","source_link":null,"def":{"name":"info=","args":[{"name":"info","doc":null,"default_value":"","external_name":"info","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@info = info"}},{"id":"lock_count:Int64-instance-method","html_id":"lock_count:Int64-instance-method","name":"lock_count","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int64","source_link":null,"def":{"name":"lock_count","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int64","visibility":"Public","body":"@lock_count"}},{"id":"lock_count=(lock_count:Int64)-instance-method","html_id":"lock_count=(lock_count:Int64)-instance-method","name":"lock_count=","doc":null,"summary":null,"abstract":false,"args":[{"name":"lock_count","doc":null,"default_value":"","external_name":"lock_count","restriction":"Int64"}],"args_string":"(lock_count : Int64)","source_link":null,"def":{"name":"lock_count=","args":[{"name":"lock_count","doc":null,"default_value":"","external_name":"lock_count","restriction":"Int64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@lock_count = lock_count"}},{"id":"ok:Float64-instance-method","html_id":"ok:Float64-instance-method","name":"ok","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","source_link":null,"def":{"name":"ok","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@ok"}},{"id":"ok=(ok:Float64)-instance-method","html_id":"ok=(ok:Float64)-instance-method","name":"ok=","doc":null,"summary":null,"abstract":false,"args":[{"name":"ok","doc":null,"default_value":"","external_name":"ok","restriction":"Float64"}],"args_string":"(ok : Float64)","source_link":null,"def":{"name":"ok=","args":[{"name":"ok","doc":null,"default_value":"","external_name":"ok","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@ok = ok"}},{"id":"operation_time:BSON::Timestamp?-instance-method","html_id":"operation_time:BSON::Timestamp?-instance-method","name":"operation_time","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON::Timestamp?","source_link":null,"def":{"name":"operation_time","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON::Timestamp | ::Nil","visibility":"Public","body":"@operation_time"}},{"id":"operation_time=(operation_time:BSON::Timestamp?)-instance-method","html_id":"operation_time=(operation_time:BSON::Timestamp?)-instance-method","name":"operation_time=","doc":null,"summary":null,"abstract":false,"args":[{"name":"operation_time","doc":null,"default_value":"","external_name":"operation_time","restriction":"BSON::Timestamp | ::Nil"}],"args_string":"(operation_time : BSON::Timestamp?)","source_link":null,"def":{"name":"operation_time=","args":[{"name":"operation_time","doc":null,"default_value":"","external_name":"operation_time","restriction":"BSON::Timestamp | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@operation_time = operation_time"}},{"id":"to_bson(bson=BSON.new)-instance-method","html_id":"to_bson(bson=BSON.new)-instance-method","name":"to_bson","doc":"Converts to a BSON representation.\n\n```\nuser = User.new name: \"John\"\nbson = user.to_bson\n```","summary":"<p>Converts to a BSON representation.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"args_string":"(bson = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>)","source_link":null,"def":{"name":"to_bson","args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n      {% global_options = @type.annotations(BSON::Options) %}\n      {% camelize = global_options.reduce(false) do |_, a|\n  a[:camelize]\nend %}\n      {% for ivar in @type.instance_vars %}\n        {% ann = ivar.annotation(BSON::Field) %}\n        {% typ = ivar.type.union_types.select do |t|\n  t != Nil\nend[0] %}\n        {% key = ivar.name %}\n        {% bson_key = ann ? ann[:key].id : camelize ? ivar.name.camelcase(lower: camelize == \"lower\") : ivar.name %}\n        {% if ann && ann[:ignore] %}{% else %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            unless self.{{ key }}.nil?\n          {% end %}\n            {% if typ.has_method?(:to_bson) %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}.try &.to_bson\n            {% else %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}\n            {% end %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            end\n          {% end %}\n        {% end %}\n      {% end %}\n      {% end %}\nbson\n"}}],"macros":[],"types":[]}]},{"html_id":"cryomongo/Mongo/Commands/GetCmdLineOpts","path":"Mongo/Commands/GetCmdLineOpts.html","kind":"module","full_name":"Mongo::Commands::GetCmdLineOpts","name":"GetCmdLineOpts","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/GetCmdLineOpts","kind":"module","full_name":"Mongo::Commands::GetCmdLineOpts","name":"GetCmdLineOpts"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"The *getCmdLineOpts* command returns a document containing command line options used to start the given mongod or mongos.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/getCmdLineOpts/).","summary":"<p>The <em>getCmdLineOpts</em> command returns a document containing command line options used to start the given mongod or mongos.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command-instance-method","html_id":"command-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"command","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({getCmdLineOpts: 1, \"$db\": \"admin\"})"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"bson"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/GetLog","path":"Mongo/Commands/GetLog.html","kind":"module","full_name":"Mongo::Commands::GetLog","name":"GetLog","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/GetLog","kind":"module","full_name":"Mongo::Commands::GetLog","name":"GetLog"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"*getLog* is an administrative command that returns the most recent 1024 logged mongod events.\n\n*getLog* does not read log data from the mongod log file.\nIt instead reads data from a RAM cache of logged mongod events.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/getLog/).","summary":"<p><em>getLog</em> is an administrative command that returns the most recent 1024 logged mongod events.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command(log_value:String)-instance-method","html_id":"command(log_value:String)-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[{"name":"log_value","doc":null,"default_value":"","external_name":"log_value","restriction":"String"}],"args_string":"(log_value : String)","source_link":null,"def":{"name":"command","args":[{"name":"log_value","doc":null,"default_value":"","external_name":"log_value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({getLog: log_value, \"$db\": \"admin\"})"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"bson"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/GetMore","path":"Mongo/Commands/GetMore.html","kind":"module","full_name":"Mongo::Commands::GetMore","name":"GetMore","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/GetMore","kind":"module","full_name":"Mongo::Commands::GetMore","name":"GetMore"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"Use in conjunction with commands that return a cursor, e.g. *find* and *aggregate*, to return subsequent batches of documents currently pointed to by the cursor.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/getMore/).","summary":"<p>Use in conjunction with commands that return a cursor, e.g.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command(database:String,collection:Collection::CollectionKey,cursor_id:Int64,**options)-instance-method","html_id":"command(database:String,collection:Collection::CollectionKey,cursor_id:Int64,**options)-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"},{"name":"cursor_id","doc":null,"default_value":"","external_name":"cursor_id","restriction":"Int64"}],"args_string":"(database : String, collection : Collection::CollectionKey, cursor_id : Int64, **options)","source_link":null,"def":{"name":"command","args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"},{"name":"cursor_id","doc":null,"default_value":"","external_name":"cursor_id","restriction":"Int64"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({getMore: cursor_id, collection: collection, \"$db\": database}, options)"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Result.from_bson(bson)"}}],"macros":[],"types":[{"html_id":"cryomongo/Mongo/Commands/GetMore/Result","path":"Mongo/Commands/GetMore/Result.html","kind":"struct","full_name":"Mongo::Commands::GetMore::Result","name":"Result","abstract":false,"superclass":{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"cryomongo/Mongo/Commands/Common/Result","kind":"module","full_name":"Mongo::Commands::Common::Result","name":"Result"},{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cryomongo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"cryomongo/Mongo/Commands/Common/Result","kind":"module","full_name":"Mongo::Commands::Common::Result","name":"Result"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands/GetMore","kind":"module","full_name":"Mongo::Commands::GetMore","name":"GetMore"},"doc":null,"summary":null,"class_methods":[{"id":"from_bson(bson:BSON)-class-method","html_id":"from_bson(bson:BSON)-class-method","name":"from_bson","doc":"NOTE: See `self.new`.","summary":"<p><span class=\"flag purple\">NOTE</span>  See <code>self<a href=\"../../../Mongo/Commands/GetMore/Result.html#new(bson:BSON)-class-method\">.new</a></code>.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"from_bson","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.new(bson)"}}],"constructors":[{"id":"new(bson:BSON)-class-method","html_id":"new(bson:BSON)-class-method","name":"new","doc":"Allocate an instance and copies data from a BSON struct.\n\n```\nclass User\n  include BSON::Serializable\n  property name : String\nend\n\ndata = BSON.new\ndata[\"name\"] = \"John\"\nUser.new(data)\n```","summary":"<p>Allocate an instance and copies data from a BSON struct.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"new","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(bson)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"cluster_time:BSON?-instance-method","html_id":"cluster_time:BSON?-instance-method","name":"cluster_time","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON?","source_link":null,"def":{"name":"cluster_time","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON | ::Nil","visibility":"Public","body":"@cluster_time"}},{"id":"cluster_time=(cluster_time:BSON?)-instance-method","html_id":"cluster_time=(cluster_time:BSON?)-instance-method","name":"cluster_time=","doc":null,"summary":null,"abstract":false,"args":[{"name":"cluster_time","doc":null,"default_value":"","external_name":"cluster_time","restriction":"BSON | ::Nil"}],"args_string":"(cluster_time : BSON?)","source_link":null,"def":{"name":"cluster_time=","args":[{"name":"cluster_time","doc":null,"default_value":"","external_name":"cluster_time","restriction":"BSON | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@cluster_time = cluster_time"}},{"id":"cursor:Cursor-instance-method","html_id":"cursor:Cursor-instance-method","name":"cursor","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Cursor","source_link":null,"def":{"name":"cursor","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Cursor","visibility":"Public","body":"@cursor"}},{"id":"cursor=(cursor:Cursor)-instance-method","html_id":"cursor=(cursor:Cursor)-instance-method","name":"cursor=","doc":null,"summary":null,"abstract":false,"args":[{"name":"cursor","doc":null,"default_value":"","external_name":"cursor","restriction":"Cursor"}],"args_string":"(cursor : Cursor)","source_link":null,"def":{"name":"cursor=","args":[{"name":"cursor","doc":null,"default_value":"","external_name":"cursor","restriction":"Cursor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@cursor = cursor"}},{"id":"ok:Float64-instance-method","html_id":"ok:Float64-instance-method","name":"ok","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","source_link":null,"def":{"name":"ok","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@ok"}},{"id":"ok=(ok:Float64)-instance-method","html_id":"ok=(ok:Float64)-instance-method","name":"ok=","doc":null,"summary":null,"abstract":false,"args":[{"name":"ok","doc":null,"default_value":"","external_name":"ok","restriction":"Float64"}],"args_string":"(ok : Float64)","source_link":null,"def":{"name":"ok=","args":[{"name":"ok","doc":null,"default_value":"","external_name":"ok","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@ok = ok"}},{"id":"operation_time:BSON::Timestamp?-instance-method","html_id":"operation_time:BSON::Timestamp?-instance-method","name":"operation_time","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON::Timestamp?","source_link":null,"def":{"name":"operation_time","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON::Timestamp | ::Nil","visibility":"Public","body":"@operation_time"}},{"id":"operation_time=(operation_time:BSON::Timestamp?)-instance-method","html_id":"operation_time=(operation_time:BSON::Timestamp?)-instance-method","name":"operation_time=","doc":null,"summary":null,"abstract":false,"args":[{"name":"operation_time","doc":null,"default_value":"","external_name":"operation_time","restriction":"BSON::Timestamp | ::Nil"}],"args_string":"(operation_time : BSON::Timestamp?)","source_link":null,"def":{"name":"operation_time=","args":[{"name":"operation_time","doc":null,"default_value":"","external_name":"operation_time","restriction":"BSON::Timestamp | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@operation_time = operation_time"}},{"id":"to_bson(bson=BSON.new)-instance-method","html_id":"to_bson(bson=BSON.new)-instance-method","name":"to_bson","doc":"Converts to a BSON representation.\n\n```\nuser = User.new name: \"John\"\nbson = user.to_bson\n```","summary":"<p>Converts to a BSON representation.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"args_string":"(bson = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>)","source_link":null,"def":{"name":"to_bson","args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n      {% global_options = @type.annotations(BSON::Options) %}\n      {% camelize = global_options.reduce(false) do |_, a|\n  a[:camelize]\nend %}\n      {% for ivar in @type.instance_vars %}\n        {% ann = ivar.annotation(BSON::Field) %}\n        {% typ = ivar.type.union_types.select do |t|\n  t != Nil\nend[0] %}\n        {% key = ivar.name %}\n        {% bson_key = ann ? ann[:key].id : camelize ? ivar.name.camelcase(lower: camelize == \"lower\") : ivar.name %}\n        {% if ann && ann[:ignore] %}{% else %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            unless self.{{ key }}.nil?\n          {% end %}\n            {% if typ.has_method?(:to_bson) %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}.try &.to_bson\n            {% else %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}\n            {% end %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            end\n          {% end %}\n        {% end %}\n      {% end %}\n      {% end %}\nbson\n"}}],"macros":[],"types":[{"html_id":"cryomongo/Mongo/Commands/GetMore/Result/Cursor","path":"Mongo/Commands/GetMore/Result/Cursor.html","kind":"struct","full_name":"Mongo::Commands::GetMore::Result::Cursor","name":"Cursor","abstract":false,"superclass":{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cryomongo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands/GetMore/Result","kind":"struct","full_name":"Mongo::Commands::GetMore::Result","name":"Result"},"doc":null,"summary":null,"class_methods":[{"id":"from_bson(bson:BSON)-class-method","html_id":"from_bson(bson:BSON)-class-method","name":"from_bson","doc":"NOTE: See `self.new`.","summary":"<p><span class=\"flag purple\">NOTE</span>  See <code>self<a href=\"../../../../Mongo/Commands/GetMore/Result/Cursor.html#new(bson:BSON)-class-method\">.new</a></code>.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"from_bson","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.new(bson)"}}],"constructors":[{"id":"new(bson:BSON)-class-method","html_id":"new(bson:BSON)-class-method","name":"new","doc":"Allocate an instance and copies data from a BSON struct.\n\n```\nclass User\n  include BSON::Serializable\n  property name : String\nend\n\ndata = BSON.new\ndata[\"name\"] = \"John\"\nUser.new(data)\n```","summary":"<p>Allocate an instance and copies data from a BSON struct.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"new","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(bson)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"id:Int64-instance-method","html_id":"id:Int64-instance-method","name":"id","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int64","source_link":null,"def":{"name":"id","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int64","visibility":"Public","body":"@id"}},{"id":"id=(id:Int64)-instance-method","html_id":"id=(id:Int64)-instance-method","name":"id=","doc":null,"summary":null,"abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"Int64"}],"args_string":"(id : Int64)","source_link":null,"def":{"name":"id=","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"Int64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@id = id"}},{"id":"next_batch:Array(BSON)-instance-method","html_id":"next_batch:Array(BSON)-instance-method","name":"next_batch","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(BSON)","source_link":null,"def":{"name":"next_batch","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(BSON)","visibility":"Public","body":"@next_batch"}},{"id":"next_batch=(next_batch:Array(BSON))-instance-method","html_id":"next_batch=(next_batch:Array(BSON))-instance-method","name":"next_batch=","doc":null,"summary":null,"abstract":false,"args":[{"name":"next_batch","doc":null,"default_value":"","external_name":"next_batch","restriction":"Array(BSON)"}],"args_string":"(next_batch : Array(BSON))","source_link":null,"def":{"name":"next_batch=","args":[{"name":"next_batch","doc":null,"default_value":"","external_name":"next_batch","restriction":"Array(BSON)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@next_batch = next_batch"}},{"id":"ns:String-instance-method","html_id":"ns:String-instance-method","name":"ns","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":null,"def":{"name":"ns","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@ns"}},{"id":"ns=(ns:String)-instance-method","html_id":"ns=(ns:String)-instance-method","name":"ns=","doc":null,"summary":null,"abstract":false,"args":[{"name":"ns","doc":null,"default_value":"","external_name":"ns","restriction":"String"}],"args_string":"(ns : String)","source_link":null,"def":{"name":"ns=","args":[{"name":"ns","doc":null,"default_value":"","external_name":"ns","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@ns = ns"}},{"id":"post_batch_resume_token:BSON?-instance-method","html_id":"post_batch_resume_token:BSON?-instance-method","name":"post_batch_resume_token","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON?","source_link":null,"def":{"name":"post_batch_resume_token","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON | ::Nil","visibility":"Public","body":"@post_batch_resume_token"}},{"id":"post_batch_resume_token=(post_batch_resume_token:BSON?)-instance-method","html_id":"post_batch_resume_token=(post_batch_resume_token:BSON?)-instance-method","name":"post_batch_resume_token=","doc":null,"summary":null,"abstract":false,"args":[{"name":"post_batch_resume_token","doc":null,"default_value":"","external_name":"post_batch_resume_token","restriction":"BSON | ::Nil"}],"args_string":"(post_batch_resume_token : BSON?)","source_link":null,"def":{"name":"post_batch_resume_token=","args":[{"name":"post_batch_resume_token","doc":null,"default_value":"","external_name":"post_batch_resume_token","restriction":"BSON | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@post_batch_resume_token = post_batch_resume_token"}},{"id":"to_bson(bson=BSON.new)-instance-method","html_id":"to_bson(bson=BSON.new)-instance-method","name":"to_bson","doc":"Converts to a BSON representation.\n\n```\nuser = User.new name: \"John\"\nbson = user.to_bson\n```","summary":"<p>Converts to a BSON representation.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"args_string":"(bson = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>)","source_link":null,"def":{"name":"to_bson","args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n      {% global_options = @type.annotations(BSON::Options) %}\n      {% camelize = global_options.reduce(false) do |_, a|\n  a[:camelize]\nend %}\n      {% for ivar in @type.instance_vars %}\n        {% ann = ivar.annotation(BSON::Field) %}\n        {% typ = ivar.type.union_types.select do |t|\n  t != Nil\nend[0] %}\n        {% key = ivar.name %}\n        {% bson_key = ann ? ann[:key].id : camelize ? ivar.name.camelcase(lower: camelize == \"lower\") : ivar.name %}\n        {% if ann && ann[:ignore] %}{% else %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            unless self.{{ key }}.nil?\n          {% end %}\n            {% if typ.has_method?(:to_bson) %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}.try &.to_bson\n            {% else %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}\n            {% end %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            end\n          {% end %}\n        {% end %}\n      {% end %}\n      {% end %}\nbson\n"}}],"macros":[],"types":[]}]}]},{"html_id":"cryomongo/Mongo/Commands/GetParameter","path":"Mongo/Commands/GetParameter.html","kind":"module","full_name":"Mongo::Commands::GetParameter","name":"GetParameter","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/GetParameter","kind":"module","full_name":"Mongo::Commands::GetParameter","name":"GetParameter"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"*getParameter* is an administrative command for retrieving the values of parameters.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/getParameter/).","summary":"<p><em>getParameter</em> is an administrative command for retrieving the values of parameters.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command(parameter:String?)-instance-method","html_id":"command(parameter:String?)-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[{"name":"parameter","doc":null,"default_value":"","external_name":"parameter","restriction":"String | ::Nil"}],"args_string":"(parameter : String?)","source_link":null,"def":{"name":"command","args":[{"name":"parameter","doc":null,"default_value":"","external_name":"parameter","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"bson, _ = Commands.make({getParameter: parameter.nil? ? \"*\" : 1, \"$db\": \"admin\"})\nif parameter.nil?\nelse\n  bson[parameter] = 1\nend\n{bson, nil}\n"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Result.from_bson(bson)"}}],"macros":[],"types":[{"html_id":"cryomongo/Mongo/Commands/GetParameter/Result","path":"Mongo/Commands/GetParameter/Result.html","kind":"struct","full_name":"Mongo::Commands::GetParameter::Result","name":"Result","abstract":false,"superclass":{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"cryomongo/Mongo/Commands/Common/Result","kind":"module","full_name":"Mongo::Commands::Common::Result","name":"Result"},{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cryomongo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"cryomongo/Mongo/Commands/Common/Result","kind":"module","full_name":"Mongo::Commands::Common::Result","name":"Result"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands/GetParameter","kind":"module","full_name":"Mongo::Commands::GetParameter","name":"GetParameter"},"doc":null,"summary":null,"class_methods":[{"id":"from_bson(bson:BSON)-class-method","html_id":"from_bson(bson:BSON)-class-method","name":"from_bson","doc":"NOTE: See `self.new`.","summary":"<p><span class=\"flag purple\">NOTE</span>  See <code>self<a href=\"../../../Mongo/Commands/GetParameter/Result.html#new(bson:BSON)-class-method\">.new</a></code>.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"from_bson","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.new(bson)"}}],"constructors":[{"id":"new(bson:BSON)-class-method","html_id":"new(bson:BSON)-class-method","name":"new","doc":"Allocate an instance and copies data from a BSON struct.\n\n```\nclass User\n  include BSON::Serializable\n  property name : String\nend\n\ndata = BSON.new\ndata[\"name\"] = \"John\"\nUser.new(data)\n```","summary":"<p>Allocate an instance and copies data from a BSON struct.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"new","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(bson)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"cluster_time:BSON?-instance-method","html_id":"cluster_time:BSON?-instance-method","name":"cluster_time","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON?","source_link":null,"def":{"name":"cluster_time","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON | ::Nil","visibility":"Public","body":"@cluster_time"}},{"id":"cluster_time=(cluster_time:BSON?)-instance-method","html_id":"cluster_time=(cluster_time:BSON?)-instance-method","name":"cluster_time=","doc":null,"summary":null,"abstract":false,"args":[{"name":"cluster_time","doc":null,"default_value":"","external_name":"cluster_time","restriction":"BSON | ::Nil"}],"args_string":"(cluster_time : BSON?)","source_link":null,"def":{"name":"cluster_time=","args":[{"name":"cluster_time","doc":null,"default_value":"","external_name":"cluster_time","restriction":"BSON | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@cluster_time = cluster_time"}},{"id":"info:String-instance-method","html_id":"info:String-instance-method","name":"info","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":null,"def":{"name":"info","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@info"}},{"id":"info=(info:String)-instance-method","html_id":"info=(info:String)-instance-method","name":"info=","doc":null,"summary":null,"abstract":false,"args":[{"name":"info","doc":null,"default_value":"","external_name":"info","restriction":"String"}],"args_string":"(info : String)","source_link":null,"def":{"name":"info=","args":[{"name":"info","doc":null,"default_value":"","external_name":"info","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@info = info"}},{"id":"lock_count:Int64-instance-method","html_id":"lock_count:Int64-instance-method","name":"lock_count","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int64","source_link":null,"def":{"name":"lock_count","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int64","visibility":"Public","body":"@lock_count"}},{"id":"lock_count=(lock_count:Int64)-instance-method","html_id":"lock_count=(lock_count:Int64)-instance-method","name":"lock_count=","doc":null,"summary":null,"abstract":false,"args":[{"name":"lock_count","doc":null,"default_value":"","external_name":"lock_count","restriction":"Int64"}],"args_string":"(lock_count : Int64)","source_link":null,"def":{"name":"lock_count=","args":[{"name":"lock_count","doc":null,"default_value":"","external_name":"lock_count","restriction":"Int64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@lock_count = lock_count"}},{"id":"ok:Float64-instance-method","html_id":"ok:Float64-instance-method","name":"ok","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","source_link":null,"def":{"name":"ok","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@ok"}},{"id":"ok=(ok:Float64)-instance-method","html_id":"ok=(ok:Float64)-instance-method","name":"ok=","doc":null,"summary":null,"abstract":false,"args":[{"name":"ok","doc":null,"default_value":"","external_name":"ok","restriction":"Float64"}],"args_string":"(ok : Float64)","source_link":null,"def":{"name":"ok=","args":[{"name":"ok","doc":null,"default_value":"","external_name":"ok","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@ok = ok"}},{"id":"operation_time:BSON::Timestamp?-instance-method","html_id":"operation_time:BSON::Timestamp?-instance-method","name":"operation_time","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON::Timestamp?","source_link":null,"def":{"name":"operation_time","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON::Timestamp | ::Nil","visibility":"Public","body":"@operation_time"}},{"id":"operation_time=(operation_time:BSON::Timestamp?)-instance-method","html_id":"operation_time=(operation_time:BSON::Timestamp?)-instance-method","name":"operation_time=","doc":null,"summary":null,"abstract":false,"args":[{"name":"operation_time","doc":null,"default_value":"","external_name":"operation_time","restriction":"BSON::Timestamp | ::Nil"}],"args_string":"(operation_time : BSON::Timestamp?)","source_link":null,"def":{"name":"operation_time=","args":[{"name":"operation_time","doc":null,"default_value":"","external_name":"operation_time","restriction":"BSON::Timestamp | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@operation_time = operation_time"}},{"id":"to_bson(bson=BSON.new)-instance-method","html_id":"to_bson(bson=BSON.new)-instance-method","name":"to_bson","doc":"Converts to a BSON representation.\n\n```\nuser = User.new name: \"John\"\nbson = user.to_bson\n```","summary":"<p>Converts to a BSON representation.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"args_string":"(bson = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>)","source_link":null,"def":{"name":"to_bson","args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n      {% global_options = @type.annotations(BSON::Options) %}\n      {% camelize = global_options.reduce(false) do |_, a|\n  a[:camelize]\nend %}\n      {% for ivar in @type.instance_vars %}\n        {% ann = ivar.annotation(BSON::Field) %}\n        {% typ = ivar.type.union_types.select do |t|\n  t != Nil\nend[0] %}\n        {% key = ivar.name %}\n        {% bson_key = ann ? ann[:key].id : camelize ? ivar.name.camelcase(lower: camelize == \"lower\") : ivar.name %}\n        {% if ann && ann[:ignore] %}{% else %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            unless self.{{ key }}.nil?\n          {% end %}\n            {% if typ.has_method?(:to_bson) %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}.try &.to_bson\n            {% else %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}\n            {% end %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            end\n          {% end %}\n        {% end %}\n      {% end %}\n      {% end %}\nbson\n"}}],"macros":[],"types":[]}]},{"html_id":"cryomongo/Mongo/Commands/HostInfo","path":"Mongo/Commands/HostInfo.html","kind":"module","full_name":"Mongo::Commands::HostInfo","name":"HostInfo","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/HostInfo","kind":"module","full_name":"Mongo::Commands::HostInfo","name":"HostInfo"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"Returns a document with information about the underlying system that the mongod or mongos runs on.\nSome of the returned fields are only included on some platforms.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/hostInfo/).","summary":"<p>Returns a document with information about the underlying system that the mongod or mongos runs on.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command-instance-method","html_id":"command-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"command","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({hostInfo: 1, \"$db\": \"admin\"})"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"bson"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/Insert","path":"Mongo/Commands/Insert.html","kind":"module","full_name":"Mongo::Commands::Insert","name":"Insert","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/Insert","kind":"module","full_name":"Mongo::Commands::Insert","name":"Insert"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"The *insert* command inserts one or more documents and returns a document containing the status of all inserts.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/insert/).","summary":"<p>The <em>insert</em> command inserts one or more documents and returns a document containing the status of all inserts.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command(database:String,collection:Collection::CollectionKey,documents:Array,options)-instance-method","html_id":"command(database:String,collection:Collection::CollectionKey,documents:Array,options)-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"},{"name":"documents","doc":null,"default_value":"","external_name":"documents","restriction":"Array"},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"args_string":"(database : String, collection : Collection::CollectionKey, documents : Array, options)","source_link":null,"def":{"name":"command","args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"},{"name":"documents","doc":null,"default_value":"","external_name":"documents","restriction":"Array"},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({insert: collection, \"$db\": database}, sequences: {documents: documents.map do |elt|\n  BSON.new(elt)\nend}, options: options)"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Common::InsertResult.from_bson(bson)"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/IsMaster","path":"Mongo/Commands/IsMaster.html","kind":"module","full_name":"Mongo::Commands::IsMaster","name":"IsMaster","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"OS_TYPE","name":"OS_TYPE","value":"{% if host_flag?(:linux) %} \"Linux\" {% else %}{% if host_flag?(:darwin) %} \"Darwin\" {% else %}{% if host_flag?(:win32) %} \"Windows\" {% else %} \"Unknown\" {% end %}{% end %}{% end %}","doc":null,"summary":null}],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/IsMaster","kind":"module","full_name":"Mongo::Commands::IsMaster","name":"IsMaster"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"*isMaster* returns a document that describes the role of the mongod instance.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/isMaster/).","summary":"<p><em>isMaster</em> returns a document that describes the role of the mongod instance.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command(appname:String?=nil)-instance-method","html_id":"command(appname:String?=nil)-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[{"name":"appname","doc":null,"default_value":"nil","external_name":"appname","restriction":"String | ::Nil"}],"args_string":"(appname : String? = <span class=\"n\">nil</span>)","source_link":null,"def":{"name":"command","args":[{"name":"appname","doc":null,"default_value":"nil","external_name":"appname","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{BSON.new({isMaster: 1, \"$db\": \"admin\", client: {application: {name: appname || \"cryomongo\"}, driver: {name: \"cryomongo\", version: Mongo::VERSION}, os: {type: OS_TYPE}}}), nil}"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"result = Result.from_bson(bson)\nresult.null_logical_session_timeout_minutes = (bson.has_key?(\"logicalSessionTimeoutMinutes\")) && result.logical_session_timeout_minutes.nil?\nresult\n"}}],"macros":[],"types":[{"html_id":"cryomongo/Mongo/Commands/IsMaster/Result","path":"Mongo/Commands/IsMaster/Result.html","kind":"struct","full_name":"Mongo::Commands::IsMaster::Result","name":"Result","abstract":false,"superclass":{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"cryomongo/Mongo/Commands/Common/Result","kind":"module","full_name":"Mongo::Commands::Common::Result","name":"Result"},{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cryomongo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"cryomongo/Mongo/Commands/Common/Result","kind":"module","full_name":"Mongo::Commands::Common::Result","name":"Result"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands/IsMaster","kind":"module","full_name":"Mongo::Commands::IsMaster","name":"IsMaster"},"doc":null,"summary":null,"class_methods":[{"id":"from_bson(bson:BSON)-class-method","html_id":"from_bson(bson:BSON)-class-method","name":"from_bson","doc":"NOTE: See `self.new`.","summary":"<p><span class=\"flag purple\">NOTE</span>  See <code>self<a href=\"../../../Mongo/Commands/IsMaster/Result.html#new(bson:BSON)-class-method\">.new</a></code>.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"from_bson","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.new(bson)"}}],"constructors":[{"id":"new(bson:BSON)-class-method","html_id":"new(bson:BSON)-class-method","name":"new","doc":"Allocate an instance and copies data from a BSON struct.\n\n```\nclass User\n  include BSON::Serializable\n  property name : String\nend\n\ndata = BSON.new\ndata[\"name\"] = \"John\"\nUser.new(data)\n```","summary":"<p>Allocate an instance and copies data from a BSON struct.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"new","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(bson)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"arbiter_only:Bool?-instance-method","html_id":"arbiter_only:Bool?-instance-method","name":"arbiter_only","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool?","source_link":null,"def":{"name":"arbiter_only","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool | ::Nil","visibility":"Public","body":"@arbiter_only"}},{"id":"arbiter_only=(arbiter_only:Bool?)-instance-method","html_id":"arbiter_only=(arbiter_only:Bool?)-instance-method","name":"arbiter_only=","doc":null,"summary":null,"abstract":false,"args":[{"name":"arbiter_only","doc":null,"default_value":"","external_name":"arbiter_only","restriction":"Bool | ::Nil"}],"args_string":"(arbiter_only : Bool?)","source_link":null,"def":{"name":"arbiter_only=","args":[{"name":"arbiter_only","doc":null,"default_value":"","external_name":"arbiter_only","restriction":"Bool | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@arbiter_only = arbiter_only"}},{"id":"arbiters:Array(String)?-instance-method","html_id":"arbiters:Array(String)?-instance-method","name":"arbiters","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(String)?","source_link":null,"def":{"name":"arbiters","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(String) | ::Nil","visibility":"Public","body":"@arbiters"}},{"id":"arbiters=(arbiters:Array(String)?)-instance-method","html_id":"arbiters=(arbiters:Array(String)?)-instance-method","name":"arbiters=","doc":null,"summary":null,"abstract":false,"args":[{"name":"arbiters","doc":null,"default_value":"","external_name":"arbiters","restriction":"Array(String) | ::Nil"}],"args_string":"(arbiters : Array(String)?)","source_link":null,"def":{"name":"arbiters=","args":[{"name":"arbiters","doc":null,"default_value":"","external_name":"arbiters","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@arbiters = arbiters"}},{"id":"cluster_time:BSON?-instance-method","html_id":"cluster_time:BSON?-instance-method","name":"cluster_time","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON?","source_link":null,"def":{"name":"cluster_time","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON | ::Nil","visibility":"Public","body":"@cluster_time"}},{"id":"cluster_time=(cluster_time:BSON?)-instance-method","html_id":"cluster_time=(cluster_time:BSON?)-instance-method","name":"cluster_time=","doc":null,"summary":null,"abstract":false,"args":[{"name":"cluster_time","doc":null,"default_value":"","external_name":"cluster_time","restriction":"BSON | ::Nil"}],"args_string":"(cluster_time : BSON?)","source_link":null,"def":{"name":"cluster_time=","args":[{"name":"cluster_time","doc":null,"default_value":"","external_name":"cluster_time","restriction":"BSON | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@cluster_time = cluster_time"}},{"id":"compression:Array(String)?-instance-method","html_id":"compression:Array(String)?-instance-method","name":"compression","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(String)?","source_link":null,"def":{"name":"compression","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(String) | ::Nil","visibility":"Public","body":"@compression"}},{"id":"compression=(compression:Array(String)?)-instance-method","html_id":"compression=(compression:Array(String)?)-instance-method","name":"compression=","doc":null,"summary":null,"abstract":false,"args":[{"name":"compression","doc":null,"default_value":"","external_name":"compression","restriction":"Array(String) | ::Nil"}],"args_string":"(compression : Array(String)?)","source_link":null,"def":{"name":"compression=","args":[{"name":"compression","doc":null,"default_value":"","external_name":"compression","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@compression = compression"}},{"id":"connection_id:Int32?-instance-method","html_id":"connection_id:Int32?-instance-method","name":"connection_id","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32?","source_link":null,"def":{"name":"connection_id","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32 | ::Nil","visibility":"Public","body":"@connection_id"}},{"id":"connection_id=(connection_id:Int32?)-instance-method","html_id":"connection_id=(connection_id:Int32?)-instance-method","name":"connection_id=","doc":null,"summary":null,"abstract":false,"args":[{"name":"connection_id","doc":null,"default_value":"","external_name":"connection_id","restriction":"Int32 | ::Nil"}],"args_string":"(connection_id : Int32?)","source_link":null,"def":{"name":"connection_id=","args":[{"name":"connection_id","doc":null,"default_value":"","external_name":"connection_id","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@connection_id = connection_id"}},{"id":"election_id:BSON::ObjectId?-instance-method","html_id":"election_id:BSON::ObjectId?-instance-method","name":"election_id","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON::ObjectId?","source_link":null,"def":{"name":"election_id","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON::ObjectId | ::Nil","visibility":"Public","body":"@election_id"}},{"id":"election_id=(election_id:BSON::ObjectId?)-instance-method","html_id":"election_id=(election_id:BSON::ObjectId?)-instance-method","name":"election_id=","doc":null,"summary":null,"abstract":false,"args":[{"name":"election_id","doc":null,"default_value":"","external_name":"election_id","restriction":"BSON::ObjectId | ::Nil"}],"args_string":"(election_id : BSON::ObjectId?)","source_link":null,"def":{"name":"election_id=","args":[{"name":"election_id","doc":null,"default_value":"","external_name":"election_id","restriction":"BSON::ObjectId | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@election_id = election_id"}},{"id":"hidden:Bool?-instance-method","html_id":"hidden:Bool?-instance-method","name":"hidden","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool?","source_link":null,"def":{"name":"hidden","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool | ::Nil","visibility":"Public","body":"@hidden"}},{"id":"hidden=(hidden:Bool?)-instance-method","html_id":"hidden=(hidden:Bool?)-instance-method","name":"hidden=","doc":null,"summary":null,"abstract":false,"args":[{"name":"hidden","doc":null,"default_value":"","external_name":"hidden","restriction":"Bool | ::Nil"}],"args_string":"(hidden : Bool?)","source_link":null,"def":{"name":"hidden=","args":[{"name":"hidden","doc":null,"default_value":"","external_name":"hidden","restriction":"Bool | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@hidden = hidden"}},{"id":"hosts:Array(String)?-instance-method","html_id":"hosts:Array(String)?-instance-method","name":"hosts","doc":"Replica sets","summary":"<p>Replica sets</p>","abstract":false,"args":[],"args_string":" : Array(String)?","source_link":null,"def":{"name":"hosts","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(String) | ::Nil","visibility":"Public","body":"@hosts"}},{"id":"hosts=(hosts:Array(String)?)-instance-method","html_id":"hosts=(hosts:Array(String)?)-instance-method","name":"hosts=","doc":"Replica sets","summary":"<p>Replica sets</p>","abstract":false,"args":[{"name":"hosts","doc":null,"default_value":"","external_name":"hosts","restriction":"Array(String) | ::Nil"}],"args_string":"(hosts : Array(String)?)","source_link":null,"def":{"name":"hosts=","args":[{"name":"hosts","doc":null,"default_value":"","external_name":"hosts","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@hosts = hosts"}},{"id":"ismaster:Bool-instance-method","html_id":"ismaster:Bool-instance-method","name":"ismaster","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","source_link":null,"def":{"name":"ismaster","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@ismaster"}},{"id":"ismaster=(ismaster:Bool)-instance-method","html_id":"ismaster=(ismaster:Bool)-instance-method","name":"ismaster=","doc":null,"summary":null,"abstract":false,"args":[{"name":"ismaster","doc":null,"default_value":"","external_name":"ismaster","restriction":"Bool"}],"args_string":"(ismaster : Bool)","source_link":null,"def":{"name":"ismaster=","args":[{"name":"ismaster","doc":null,"default_value":"","external_name":"ismaster","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@ismaster = ismaster"}},{"id":"isreplicaset:Bool?-instance-method","html_id":"isreplicaset:Bool?-instance-method","name":"isreplicaset","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool?","source_link":null,"def":{"name":"isreplicaset","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool | ::Nil","visibility":"Public","body":"@isreplicaset"}},{"id":"isreplicaset=(isreplicaset:Bool?)-instance-method","html_id":"isreplicaset=(isreplicaset:Bool?)-instance-method","name":"isreplicaset=","doc":null,"summary":null,"abstract":false,"args":[{"name":"isreplicaset","doc":null,"default_value":"","external_name":"isreplicaset","restriction":"Bool | ::Nil"}],"args_string":"(isreplicaset : Bool?)","source_link":null,"def":{"name":"isreplicaset=","args":[{"name":"isreplicaset","doc":null,"default_value":"","external_name":"isreplicaset","restriction":"Bool | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@isreplicaset = isreplicaset"}},{"id":"last_write:BSON?-instance-method","html_id":"last_write:BSON?-instance-method","name":"last_write","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON?","source_link":null,"def":{"name":"last_write","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON | ::Nil","visibility":"Public","body":"@last_write"}},{"id":"last_write=(last_write:BSON?)-instance-method","html_id":"last_write=(last_write:BSON?)-instance-method","name":"last_write=","doc":null,"summary":null,"abstract":false,"args":[{"name":"last_write","doc":null,"default_value":"","external_name":"last_write","restriction":"BSON | ::Nil"}],"args_string":"(last_write : BSON?)","source_link":null,"def":{"name":"last_write=","args":[{"name":"last_write","doc":null,"default_value":"","external_name":"last_write","restriction":"BSON | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@last_write = last_write"}},{"id":"local_time:Time?-instance-method","html_id":"local_time:Time?-instance-method","name":"local_time","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Time?","source_link":null,"def":{"name":"local_time","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Time | ::Nil","visibility":"Public","body":"@local_time"}},{"id":"local_time=(local_time:Time?)-instance-method","html_id":"local_time=(local_time:Time?)-instance-method","name":"local_time=","doc":null,"summary":null,"abstract":false,"args":[{"name":"local_time","doc":null,"default_value":"","external_name":"local_time","restriction":"Time | ::Nil"}],"args_string":"(local_time : Time?)","source_link":null,"def":{"name":"local_time=","args":[{"name":"local_time","doc":null,"default_value":"","external_name":"local_time","restriction":"Time | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@local_time = local_time"}},{"id":"logical_session_timeout_minutes:Int32?-instance-method","html_id":"logical_session_timeout_minutes:Int32?-instance-method","name":"logical_session_timeout_minutes","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32?","source_link":null,"def":{"name":"logical_session_timeout_minutes","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32 | ::Nil","visibility":"Public","body":"@logical_session_timeout_minutes"}},{"id":"logical_session_timeout_minutes=(logical_session_timeout_minutes:Int32?)-instance-method","html_id":"logical_session_timeout_minutes=(logical_session_timeout_minutes:Int32?)-instance-method","name":"logical_session_timeout_minutes=","doc":null,"summary":null,"abstract":false,"args":[{"name":"logical_session_timeout_minutes","doc":null,"default_value":"","external_name":"logical_session_timeout_minutes","restriction":"Int32 | ::Nil"}],"args_string":"(logical_session_timeout_minutes : Int32?)","source_link":null,"def":{"name":"logical_session_timeout_minutes=","args":[{"name":"logical_session_timeout_minutes","doc":null,"default_value":"","external_name":"logical_session_timeout_minutes","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@logical_session_timeout_minutes = logical_session_timeout_minutes"}},{"id":"max_bson_object_size:Int32-instance-method","html_id":"max_bson_object_size:Int32-instance-method","name":"max_bson_object_size","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":null,"def":{"name":"max_bson_object_size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@max_bson_object_size"}},{"id":"max_bson_object_size=(max_bson_object_size:Int32)-instance-method","html_id":"max_bson_object_size=(max_bson_object_size:Int32)-instance-method","name":"max_bson_object_size=","doc":null,"summary":null,"abstract":false,"args":[{"name":"max_bson_object_size","doc":null,"default_value":"","external_name":"max_bson_object_size","restriction":"Int32"}],"args_string":"(max_bson_object_size : Int32)","source_link":null,"def":{"name":"max_bson_object_size=","args":[{"name":"max_bson_object_size","doc":null,"default_value":"","external_name":"max_bson_object_size","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@max_bson_object_size = max_bson_object_size"}},{"id":"max_message_size_bytes:Int32-instance-method","html_id":"max_message_size_bytes:Int32-instance-method","name":"max_message_size_bytes","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":null,"def":{"name":"max_message_size_bytes","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@max_message_size_bytes"}},{"id":"max_message_size_bytes=(max_message_size_bytes:Int32)-instance-method","html_id":"max_message_size_bytes=(max_message_size_bytes:Int32)-instance-method","name":"max_message_size_bytes=","doc":null,"summary":null,"abstract":false,"args":[{"name":"max_message_size_bytes","doc":null,"default_value":"","external_name":"max_message_size_bytes","restriction":"Int32"}],"args_string":"(max_message_size_bytes : Int32)","source_link":null,"def":{"name":"max_message_size_bytes=","args":[{"name":"max_message_size_bytes","doc":null,"default_value":"","external_name":"max_message_size_bytes","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@max_message_size_bytes = max_message_size_bytes"}},{"id":"max_wire_version:Int32-instance-method","html_id":"max_wire_version:Int32-instance-method","name":"max_wire_version","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":null,"def":{"name":"max_wire_version","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@max_wire_version"}},{"id":"max_wire_version=(max_wire_version:Int32)-instance-method","html_id":"max_wire_version=(max_wire_version:Int32)-instance-method","name":"max_wire_version=","doc":null,"summary":null,"abstract":false,"args":[{"name":"max_wire_version","doc":null,"default_value":"","external_name":"max_wire_version","restriction":"Int32"}],"args_string":"(max_wire_version : Int32)","source_link":null,"def":{"name":"max_wire_version=","args":[{"name":"max_wire_version","doc":null,"default_value":"","external_name":"max_wire_version","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@max_wire_version = max_wire_version"}},{"id":"max_write_batch_size:Int32-instance-method","html_id":"max_write_batch_size:Int32-instance-method","name":"max_write_batch_size","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":null,"def":{"name":"max_write_batch_size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@max_write_batch_size"}},{"id":"max_write_batch_size=(max_write_batch_size:Int32)-instance-method","html_id":"max_write_batch_size=(max_write_batch_size:Int32)-instance-method","name":"max_write_batch_size=","doc":null,"summary":null,"abstract":false,"args":[{"name":"max_write_batch_size","doc":null,"default_value":"","external_name":"max_write_batch_size","restriction":"Int32"}],"args_string":"(max_write_batch_size : Int32)","source_link":null,"def":{"name":"max_write_batch_size=","args":[{"name":"max_write_batch_size","doc":null,"default_value":"","external_name":"max_write_batch_size","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@max_write_batch_size = max_write_batch_size"}},{"id":"me:String?-instance-method","html_id":"me:String?-instance-method","name":"me","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String?","source_link":null,"def":{"name":"me","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"@me"}},{"id":"me=(me:String?)-instance-method","html_id":"me=(me:String?)-instance-method","name":"me=","doc":null,"summary":null,"abstract":false,"args":[{"name":"me","doc":null,"default_value":"","external_name":"me","restriction":"String | ::Nil"}],"args_string":"(me : String?)","source_link":null,"def":{"name":"me=","args":[{"name":"me","doc":null,"default_value":"","external_name":"me","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@me = me"}},{"id":"min_wire_version:Int32-instance-method","html_id":"min_wire_version:Int32-instance-method","name":"min_wire_version","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":null,"def":{"name":"min_wire_version","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@min_wire_version"}},{"id":"min_wire_version=(min_wire_version:Int32)-instance-method","html_id":"min_wire_version=(min_wire_version:Int32)-instance-method","name":"min_wire_version=","doc":null,"summary":null,"abstract":false,"args":[{"name":"min_wire_version","doc":null,"default_value":"","external_name":"min_wire_version","restriction":"Int32"}],"args_string":"(min_wire_version : Int32)","source_link":null,"def":{"name":"min_wire_version=","args":[{"name":"min_wire_version","doc":null,"default_value":"","external_name":"min_wire_version","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@min_wire_version = min_wire_version"}},{"id":"msg:String?-instance-method","html_id":"msg:String?-instance-method","name":"msg","doc":"Sharded instances","summary":"<p>Sharded instances</p>","abstract":false,"args":[],"args_string":" : String?","source_link":null,"def":{"name":"msg","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"@msg"}},{"id":"msg=(msg:String?)-instance-method","html_id":"msg=(msg:String?)-instance-method","name":"msg=","doc":"Sharded instances","summary":"<p>Sharded instances</p>","abstract":false,"args":[{"name":"msg","doc":null,"default_value":"","external_name":"msg","restriction":"String | ::Nil"}],"args_string":"(msg : String?)","source_link":null,"def":{"name":"msg=","args":[{"name":"msg","doc":null,"default_value":"","external_name":"msg","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@msg = msg"}},{"id":"null_logical_session_timeout_minutes:Bool-instance-method","html_id":"null_logical_session_timeout_minutes:Bool-instance-method","name":"null_logical_session_timeout_minutes","doc":"Custom","summary":"<p>Custom</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":null,"def":{"name":"null_logical_session_timeout_minutes","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@null_logical_session_timeout_minutes"}},{"id":"null_logical_session_timeout_minutes=(null_logical_session_timeout_minutes:Bool)-instance-method","html_id":"null_logical_session_timeout_minutes=(null_logical_session_timeout_minutes:Bool)-instance-method","name":"null_logical_session_timeout_minutes=","doc":"Custom","summary":"<p>Custom</p>","abstract":false,"args":[{"name":"null_logical_session_timeout_minutes","doc":null,"default_value":"","external_name":"null_logical_session_timeout_minutes","restriction":"Bool"}],"args_string":"(null_logical_session_timeout_minutes : Bool)","source_link":null,"def":{"name":"null_logical_session_timeout_minutes=","args":[{"name":"null_logical_session_timeout_minutes","doc":null,"default_value":"","external_name":"null_logical_session_timeout_minutes","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@null_logical_session_timeout_minutes = null_logical_session_timeout_minutes"}},{"id":"ok:Float64-instance-method","html_id":"ok:Float64-instance-method","name":"ok","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","source_link":null,"def":{"name":"ok","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@ok"}},{"id":"ok=(ok:Float64)-instance-method","html_id":"ok=(ok:Float64)-instance-method","name":"ok=","doc":null,"summary":null,"abstract":false,"args":[{"name":"ok","doc":null,"default_value":"","external_name":"ok","restriction":"Float64"}],"args_string":"(ok : Float64)","source_link":null,"def":{"name":"ok=","args":[{"name":"ok","doc":null,"default_value":"","external_name":"ok","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@ok = ok"}},{"id":"operation_time:BSON::Timestamp?-instance-method","html_id":"operation_time:BSON::Timestamp?-instance-method","name":"operation_time","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON::Timestamp?","source_link":null,"def":{"name":"operation_time","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON::Timestamp | ::Nil","visibility":"Public","body":"@operation_time"}},{"id":"operation_time=(operation_time:BSON::Timestamp?)-instance-method","html_id":"operation_time=(operation_time:BSON::Timestamp?)-instance-method","name":"operation_time=","doc":null,"summary":null,"abstract":false,"args":[{"name":"operation_time","doc":null,"default_value":"","external_name":"operation_time","restriction":"BSON::Timestamp | ::Nil"}],"args_string":"(operation_time : BSON::Timestamp?)","source_link":null,"def":{"name":"operation_time=","args":[{"name":"operation_time","doc":null,"default_value":"","external_name":"operation_time","restriction":"BSON::Timestamp | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@operation_time = operation_time"}},{"id":"passive:Bool?-instance-method","html_id":"passive:Bool?-instance-method","name":"passive","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool?","source_link":null,"def":{"name":"passive","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool | ::Nil","visibility":"Public","body":"@passive"}},{"id":"passive=(passive:Bool?)-instance-method","html_id":"passive=(passive:Bool?)-instance-method","name":"passive=","doc":null,"summary":null,"abstract":false,"args":[{"name":"passive","doc":null,"default_value":"","external_name":"passive","restriction":"Bool | ::Nil"}],"args_string":"(passive : Bool?)","source_link":null,"def":{"name":"passive=","args":[{"name":"passive","doc":null,"default_value":"","external_name":"passive","restriction":"Bool | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@passive = passive"}},{"id":"passives:Array(String)?-instance-method","html_id":"passives:Array(String)?-instance-method","name":"passives","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(String)?","source_link":null,"def":{"name":"passives","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(String) | ::Nil","visibility":"Public","body":"@passives"}},{"id":"passives=(passives:Array(String)?)-instance-method","html_id":"passives=(passives:Array(String)?)-instance-method","name":"passives=","doc":null,"summary":null,"abstract":false,"args":[{"name":"passives","doc":null,"default_value":"","external_name":"passives","restriction":"Array(String) | ::Nil"}],"args_string":"(passives : Array(String)?)","source_link":null,"def":{"name":"passives=","args":[{"name":"passives","doc":null,"default_value":"","external_name":"passives","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@passives = passives"}},{"id":"primary:String?-instance-method","html_id":"primary:String?-instance-method","name":"primary","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String?","source_link":null,"def":{"name":"primary","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"@primary"}},{"id":"primary=(primary:String?)-instance-method","html_id":"primary=(primary:String?)-instance-method","name":"primary=","doc":null,"summary":null,"abstract":false,"args":[{"name":"primary","doc":null,"default_value":"","external_name":"primary","restriction":"String | ::Nil"}],"args_string":"(primary : String?)","source_link":null,"def":{"name":"primary=","args":[{"name":"primary","doc":null,"default_value":"","external_name":"primary","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@primary = primary"}},{"id":"read_only:Bool?-instance-method","html_id":"read_only:Bool?-instance-method","name":"read_only","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool?","source_link":null,"def":{"name":"read_only","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool | ::Nil","visibility":"Public","body":"@read_only"}},{"id":"read_only=(read_only:Bool?)-instance-method","html_id":"read_only=(read_only:Bool?)-instance-method","name":"read_only=","doc":null,"summary":null,"abstract":false,"args":[{"name":"read_only","doc":null,"default_value":"","external_name":"read_only","restriction":"Bool | ::Nil"}],"args_string":"(read_only : Bool?)","source_link":null,"def":{"name":"read_only=","args":[{"name":"read_only","doc":null,"default_value":"","external_name":"read_only","restriction":"Bool | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@read_only = read_only"}},{"id":"sasl_supported_mechs:Array(String)?-instance-method","html_id":"sasl_supported_mechs:Array(String)?-instance-method","name":"sasl_supported_mechs","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(String)?","source_link":null,"def":{"name":"sasl_supported_mechs","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(String) | ::Nil","visibility":"Public","body":"@sasl_supported_mechs"}},{"id":"sasl_supported_mechs=(sasl_supported_mechs:Array(String)?)-instance-method","html_id":"sasl_supported_mechs=(sasl_supported_mechs:Array(String)?)-instance-method","name":"sasl_supported_mechs=","doc":null,"summary":null,"abstract":false,"args":[{"name":"sasl_supported_mechs","doc":null,"default_value":"","external_name":"sasl_supported_mechs","restriction":"Array(String) | ::Nil"}],"args_string":"(sasl_supported_mechs : Array(String)?)","source_link":null,"def":{"name":"sasl_supported_mechs=","args":[{"name":"sasl_supported_mechs","doc":null,"default_value":"","external_name":"sasl_supported_mechs","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@sasl_supported_mechs = sasl_supported_mechs"}},{"id":"secondary:Bool?-instance-method","html_id":"secondary:Bool?-instance-method","name":"secondary","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool?","source_link":null,"def":{"name":"secondary","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool | ::Nil","visibility":"Public","body":"@secondary"}},{"id":"secondary=(secondary:Bool?)-instance-method","html_id":"secondary=(secondary:Bool?)-instance-method","name":"secondary=","doc":null,"summary":null,"abstract":false,"args":[{"name":"secondary","doc":null,"default_value":"","external_name":"secondary","restriction":"Bool | ::Nil"}],"args_string":"(secondary : Bool?)","source_link":null,"def":{"name":"secondary=","args":[{"name":"secondary","doc":null,"default_value":"","external_name":"secondary","restriction":"Bool | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@secondary = secondary"}},{"id":"set_name:String?-instance-method","html_id":"set_name:String?-instance-method","name":"set_name","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String?","source_link":null,"def":{"name":"set_name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"@set_name"}},{"id":"set_name=(set_name:String?)-instance-method","html_id":"set_name=(set_name:String?)-instance-method","name":"set_name=","doc":null,"summary":null,"abstract":false,"args":[{"name":"set_name","doc":null,"default_value":"","external_name":"set_name","restriction":"String | ::Nil"}],"args_string":"(set_name : String?)","source_link":null,"def":{"name":"set_name=","args":[{"name":"set_name","doc":null,"default_value":"","external_name":"set_name","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@set_name = set_name"}},{"id":"set_version:Int32?-instance-method","html_id":"set_version:Int32?-instance-method","name":"set_version","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32?","source_link":null,"def":{"name":"set_version","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32 | ::Nil","visibility":"Public","body":"@set_version"}},{"id":"set_version=(set_version:Int32?)-instance-method","html_id":"set_version=(set_version:Int32?)-instance-method","name":"set_version=","doc":null,"summary":null,"abstract":false,"args":[{"name":"set_version","doc":null,"default_value":"","external_name":"set_version","restriction":"Int32 | ::Nil"}],"args_string":"(set_version : Int32?)","source_link":null,"def":{"name":"set_version=","args":[{"name":"set_version","doc":null,"default_value":"","external_name":"set_version","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@set_version = set_version"}},{"id":"tags:BSON?-instance-method","html_id":"tags:BSON?-instance-method","name":"tags","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON?","source_link":null,"def":{"name":"tags","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON | ::Nil","visibility":"Public","body":"@tags"}},{"id":"tags=(tags:BSON?)-instance-method","html_id":"tags=(tags:BSON?)-instance-method","name":"tags=","doc":null,"summary":null,"abstract":false,"args":[{"name":"tags","doc":null,"default_value":"","external_name":"tags","restriction":"BSON | ::Nil"}],"args_string":"(tags : BSON?)","source_link":null,"def":{"name":"tags=","args":[{"name":"tags","doc":null,"default_value":"","external_name":"tags","restriction":"BSON | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@tags = tags"}},{"id":"to_bson(bson=BSON.new)-instance-method","html_id":"to_bson(bson=BSON.new)-instance-method","name":"to_bson","doc":"Converts to a BSON representation.\n\n```\nuser = User.new name: \"John\"\nbson = user.to_bson\n```","summary":"<p>Converts to a BSON representation.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"args_string":"(bson = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>)","source_link":null,"def":{"name":"to_bson","args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n      {% global_options = @type.annotations(BSON::Options) %}\n      {% camelize = global_options.reduce(false) do |_, a|\n  a[:camelize]\nend %}\n      {% for ivar in @type.instance_vars %}\n        {% ann = ivar.annotation(BSON::Field) %}\n        {% typ = ivar.type.union_types.select do |t|\n  t != Nil\nend[0] %}\n        {% key = ivar.name %}\n        {% bson_key = ann ? ann[:key].id : camelize ? ivar.name.camelcase(lower: camelize == \"lower\") : ivar.name %}\n        {% if ann && ann[:ignore] %}{% else %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            unless self.{{ key }}.nil?\n          {% end %}\n            {% if typ.has_method?(:to_bson) %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}.try &.to_bson\n            {% else %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}\n            {% end %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            end\n          {% end %}\n        {% end %}\n      {% end %}\n      {% end %}\nbson\n"}}],"macros":[],"types":[]}]},{"html_id":"cryomongo/Mongo/Commands/KillCursors","path":"Mongo/Commands/KillCursors.html","kind":"module","full_name":"Mongo::Commands::KillCursors","name":"KillCursors","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/KillCursors","kind":"module","full_name":"Mongo::Commands::KillCursors","name":"KillCursors"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"Kills the specified cursor or cursors for a collection.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/killCursors/).","summary":"<p>Kills the specified cursor or cursors for a collection.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command(database:String,collection:Collection::CollectionKey,cursor_ids:Array(Int64))-instance-method","html_id":"command(database:String,collection:Collection::CollectionKey,cursor_ids:Array(Int64))-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"},{"name":"cursor_ids","doc":null,"default_value":"","external_name":"cursor_ids","restriction":"Array(Int64)"}],"args_string":"(database : String, collection : Collection::CollectionKey, cursor_ids : Array(Int64))","source_link":null,"def":{"name":"command","args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"},{"name":"cursor_ids","doc":null,"default_value":"","external_name":"cursor_ids","restriction":"Array(Int64)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({killCursors: collection, cursors: cursor_ids, \"$db\": database})"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Result.from_bson(bson)"}}],"macros":[],"types":[{"html_id":"cryomongo/Mongo/Commands/KillCursors/Result","path":"Mongo/Commands/KillCursors/Result.html","kind":"struct","full_name":"Mongo::Commands::KillCursors::Result","name":"Result","abstract":false,"superclass":{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"cryomongo/Mongo/Commands/Common/Result","kind":"module","full_name":"Mongo::Commands::Common::Result","name":"Result"},{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cryomongo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"cryomongo/Mongo/Commands/Common/Result","kind":"module","full_name":"Mongo::Commands::Common::Result","name":"Result"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands/KillCursors","kind":"module","full_name":"Mongo::Commands::KillCursors","name":"KillCursors"},"doc":null,"summary":null,"class_methods":[{"id":"from_bson(bson:BSON)-class-method","html_id":"from_bson(bson:BSON)-class-method","name":"from_bson","doc":"NOTE: See `self.new`.","summary":"<p><span class=\"flag purple\">NOTE</span>  See <code>self<a href=\"../../../Mongo/Commands/KillCursors/Result.html#new(bson:BSON)-class-method\">.new</a></code>.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"from_bson","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.new(bson)"}}],"constructors":[{"id":"new(bson:BSON)-class-method","html_id":"new(bson:BSON)-class-method","name":"new","doc":"Allocate an instance and copies data from a BSON struct.\n\n```\nclass User\n  include BSON::Serializable\n  property name : String\nend\n\ndata = BSON.new\ndata[\"name\"] = \"John\"\nUser.new(data)\n```","summary":"<p>Allocate an instance and copies data from a BSON struct.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"new","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(bson)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"cluster_time:BSON?-instance-method","html_id":"cluster_time:BSON?-instance-method","name":"cluster_time","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON?","source_link":null,"def":{"name":"cluster_time","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON | ::Nil","visibility":"Public","body":"@cluster_time"}},{"id":"cluster_time=(cluster_time:BSON?)-instance-method","html_id":"cluster_time=(cluster_time:BSON?)-instance-method","name":"cluster_time=","doc":null,"summary":null,"abstract":false,"args":[{"name":"cluster_time","doc":null,"default_value":"","external_name":"cluster_time","restriction":"BSON | ::Nil"}],"args_string":"(cluster_time : BSON?)","source_link":null,"def":{"name":"cluster_time=","args":[{"name":"cluster_time","doc":null,"default_value":"","external_name":"cluster_time","restriction":"BSON | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@cluster_time = cluster_time"}},{"id":"cursors_alive:Array(Int64)-instance-method","html_id":"cursors_alive:Array(Int64)-instance-method","name":"cursors_alive","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Int64)","source_link":null,"def":{"name":"cursors_alive","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Int64)","visibility":"Public","body":"@cursors_alive"}},{"id":"cursors_alive=(cursors_alive:Array(Int64))-instance-method","html_id":"cursors_alive=(cursors_alive:Array(Int64))-instance-method","name":"cursors_alive=","doc":null,"summary":null,"abstract":false,"args":[{"name":"cursors_alive","doc":null,"default_value":"","external_name":"cursors_alive","restriction":"Array(Int64)"}],"args_string":"(cursors_alive : Array(Int64))","source_link":null,"def":{"name":"cursors_alive=","args":[{"name":"cursors_alive","doc":null,"default_value":"","external_name":"cursors_alive","restriction":"Array(Int64)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@cursors_alive = cursors_alive"}},{"id":"cursors_killed:Array(Int64)-instance-method","html_id":"cursors_killed:Array(Int64)-instance-method","name":"cursors_killed","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Int64)","source_link":null,"def":{"name":"cursors_killed","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Int64)","visibility":"Public","body":"@cursors_killed"}},{"id":"cursors_killed=(cursors_killed:Array(Int64))-instance-method","html_id":"cursors_killed=(cursors_killed:Array(Int64))-instance-method","name":"cursors_killed=","doc":null,"summary":null,"abstract":false,"args":[{"name":"cursors_killed","doc":null,"default_value":"","external_name":"cursors_killed","restriction":"Array(Int64)"}],"args_string":"(cursors_killed : Array(Int64))","source_link":null,"def":{"name":"cursors_killed=","args":[{"name":"cursors_killed","doc":null,"default_value":"","external_name":"cursors_killed","restriction":"Array(Int64)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@cursors_killed = cursors_killed"}},{"id":"cursors_not_found:Array(Int64)-instance-method","html_id":"cursors_not_found:Array(Int64)-instance-method","name":"cursors_not_found","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Int64)","source_link":null,"def":{"name":"cursors_not_found","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Int64)","visibility":"Public","body":"@cursors_not_found"}},{"id":"cursors_not_found=(cursors_not_found:Array(Int64))-instance-method","html_id":"cursors_not_found=(cursors_not_found:Array(Int64))-instance-method","name":"cursors_not_found=","doc":null,"summary":null,"abstract":false,"args":[{"name":"cursors_not_found","doc":null,"default_value":"","external_name":"cursors_not_found","restriction":"Array(Int64)"}],"args_string":"(cursors_not_found : Array(Int64))","source_link":null,"def":{"name":"cursors_not_found=","args":[{"name":"cursors_not_found","doc":null,"default_value":"","external_name":"cursors_not_found","restriction":"Array(Int64)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@cursors_not_found = cursors_not_found"}},{"id":"cursors_unknown:Array(Int64)-instance-method","html_id":"cursors_unknown:Array(Int64)-instance-method","name":"cursors_unknown","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Int64)","source_link":null,"def":{"name":"cursors_unknown","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Int64)","visibility":"Public","body":"@cursors_unknown"}},{"id":"cursors_unknown=(cursors_unknown:Array(Int64))-instance-method","html_id":"cursors_unknown=(cursors_unknown:Array(Int64))-instance-method","name":"cursors_unknown=","doc":null,"summary":null,"abstract":false,"args":[{"name":"cursors_unknown","doc":null,"default_value":"","external_name":"cursors_unknown","restriction":"Array(Int64)"}],"args_string":"(cursors_unknown : Array(Int64))","source_link":null,"def":{"name":"cursors_unknown=","args":[{"name":"cursors_unknown","doc":null,"default_value":"","external_name":"cursors_unknown","restriction":"Array(Int64)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@cursors_unknown = cursors_unknown"}},{"id":"ok:Float64-instance-method","html_id":"ok:Float64-instance-method","name":"ok","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","source_link":null,"def":{"name":"ok","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@ok"}},{"id":"ok=(ok:Float64)-instance-method","html_id":"ok=(ok:Float64)-instance-method","name":"ok=","doc":null,"summary":null,"abstract":false,"args":[{"name":"ok","doc":null,"default_value":"","external_name":"ok","restriction":"Float64"}],"args_string":"(ok : Float64)","source_link":null,"def":{"name":"ok=","args":[{"name":"ok","doc":null,"default_value":"","external_name":"ok","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@ok = ok"}},{"id":"operation_time:BSON::Timestamp?-instance-method","html_id":"operation_time:BSON::Timestamp?-instance-method","name":"operation_time","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON::Timestamp?","source_link":null,"def":{"name":"operation_time","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON::Timestamp | ::Nil","visibility":"Public","body":"@operation_time"}},{"id":"operation_time=(operation_time:BSON::Timestamp?)-instance-method","html_id":"operation_time=(operation_time:BSON::Timestamp?)-instance-method","name":"operation_time=","doc":null,"summary":null,"abstract":false,"args":[{"name":"operation_time","doc":null,"default_value":"","external_name":"operation_time","restriction":"BSON::Timestamp | ::Nil"}],"args_string":"(operation_time : BSON::Timestamp?)","source_link":null,"def":{"name":"operation_time=","args":[{"name":"operation_time","doc":null,"default_value":"","external_name":"operation_time","restriction":"BSON::Timestamp | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@operation_time = operation_time"}},{"id":"to_bson(bson=BSON.new)-instance-method","html_id":"to_bson(bson=BSON.new)-instance-method","name":"to_bson","doc":"Converts to a BSON representation.\n\n```\nuser = User.new name: \"John\"\nbson = user.to_bson\n```","summary":"<p>Converts to a BSON representation.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"args_string":"(bson = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>)","source_link":null,"def":{"name":"to_bson","args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n      {% global_options = @type.annotations(BSON::Options) %}\n      {% camelize = global_options.reduce(false) do |_, a|\n  a[:camelize]\nend %}\n      {% for ivar in @type.instance_vars %}\n        {% ann = ivar.annotation(BSON::Field) %}\n        {% typ = ivar.type.union_types.select do |t|\n  t != Nil\nend[0] %}\n        {% key = ivar.name %}\n        {% bson_key = ann ? ann[:key].id : camelize ? ivar.name.camelcase(lower: camelize == \"lower\") : ivar.name %}\n        {% if ann && ann[:ignore] %}{% else %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            unless self.{{ key }}.nil?\n          {% end %}\n            {% if typ.has_method?(:to_bson) %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}.try &.to_bson\n            {% else %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}\n            {% end %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            end\n          {% end %}\n        {% end %}\n      {% end %}\n      {% end %}\nbson\n"}}],"macros":[],"types":[]}]},{"html_id":"cryomongo/Mongo/Commands/KillOp","path":"Mongo/Commands/KillOp.html","kind":"module","full_name":"Mongo::Commands::KillOp","name":"KillOp","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/KillOp","kind":"module","full_name":"Mongo::Commands::KillOp","name":"KillOp"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"Terminates an operation as specified by the operation ID.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/killOp/).","summary":"<p>Terminates an operation as specified by the operation ID.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command(op:Int32)-instance-method","html_id":"command(op:Int32)-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[{"name":"op","doc":null,"default_value":"","external_name":"op","restriction":"Int32"}],"args_string":"(op : Int32)","source_link":null,"def":{"name":"command","args":[{"name":"op","doc":null,"default_value":"","external_name":"op","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({killOp: 1, op: op, \"$db\": \"admin\"})"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Common::BaseResult.from_bson(bson)"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/ListCollections","path":"Mongo/Commands/ListCollections.html","kind":"module","full_name":"Mongo::Commands::ListCollections","name":"ListCollections","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/ListCollections","kind":"module","full_name":"Mongo::Commands::ListCollections","name":"ListCollections"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"Retrieve information, i.e. the name and options, about the collections and views in a database.\n\nSpecifically, the command returns a document that contains information with which to create a cursor to the collection information.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/listCollections/).","summary":"<p>Retrieve information, i.e.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command(database:String,options)-instance-method","html_id":"command(database:String,options)-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"args_string":"(database : String, options)","source_link":null,"def":{"name":"command","args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({listCollections: 1, \"$db\": database}, options)"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Common::QueryResult.from_bson(bson)"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/ListCommands","path":"Mongo/Commands/ListCommands.html","kind":"module","full_name":"Mongo::Commands::ListCommands","name":"ListCommands","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/ListCommands","kind":"module","full_name":"Mongo::Commands::ListCommands","name":"ListCommands"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"The *listCommands* command generates a list of all database commands implemented for the current mongod or mongos instance.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/listCommands/).","summary":"<p>The <em>listCommands</em> command generates a list of all database commands implemented for the current mongod or mongos instance.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command-instance-method","html_id":"command-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"command","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({listCommands: 1, \"$db\": \"admin\"})"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"bson"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/ListDatabases","path":"Mongo/Commands/ListDatabases.html","kind":"module","full_name":"Mongo::Commands::ListDatabases","name":"ListDatabases","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/ListDatabases","kind":"module","full_name":"Mongo::Commands::ListDatabases","name":"ListDatabases"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"The *listDatabases* command provides a list of all existing databases along with basic statistics about them.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/listDatabases/).","summary":"<p>The <em>listDatabases</em> command provides a list of all existing databases along with basic statistics about them.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command(options)-instance-method","html_id":"command(options)-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"args_string":"(options)","source_link":null,"def":{"name":"command","args":[{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({listDatabases: 1, \"$db\": \"admin\"}, options)"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Result.from_bson(bson)"}}],"macros":[],"types":[{"html_id":"cryomongo/Mongo/Commands/ListDatabases/Result","path":"Mongo/Commands/ListDatabases/Result.html","kind":"struct","full_name":"Mongo::Commands::ListDatabases::Result","name":"Result","abstract":false,"superclass":{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"cryomongo/Mongo/Commands/Common/Result","kind":"module","full_name":"Mongo::Commands::Common::Result","name":"Result"},{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cryomongo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"cryomongo/Mongo/Commands/Common/Result","kind":"module","full_name":"Mongo::Commands::Common::Result","name":"Result"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands/ListDatabases","kind":"module","full_name":"Mongo::Commands::ListDatabases","name":"ListDatabases"},"doc":null,"summary":null,"class_methods":[{"id":"from_bson(bson:BSON)-class-method","html_id":"from_bson(bson:BSON)-class-method","name":"from_bson","doc":"NOTE: See `self.new`.","summary":"<p><span class=\"flag purple\">NOTE</span>  See <code>self<a href=\"../../../Mongo/Commands/ListDatabases/Result.html#new(bson:BSON)-class-method\">.new</a></code>.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"from_bson","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.new(bson)"}}],"constructors":[{"id":"new(bson:BSON)-class-method","html_id":"new(bson:BSON)-class-method","name":"new","doc":"Allocate an instance and copies data from a BSON struct.\n\n```\nclass User\n  include BSON::Serializable\n  property name : String\nend\n\ndata = BSON.new\ndata[\"name\"] = \"John\"\nUser.new(data)\n```","summary":"<p>Allocate an instance and copies data from a BSON struct.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"new","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(bson)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"cluster_time:BSON?-instance-method","html_id":"cluster_time:BSON?-instance-method","name":"cluster_time","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON?","source_link":null,"def":{"name":"cluster_time","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON | ::Nil","visibility":"Public","body":"@cluster_time"}},{"id":"cluster_time=(cluster_time:BSON?)-instance-method","html_id":"cluster_time=(cluster_time:BSON?)-instance-method","name":"cluster_time=","doc":null,"summary":null,"abstract":false,"args":[{"name":"cluster_time","doc":null,"default_value":"","external_name":"cluster_time","restriction":"BSON | ::Nil"}],"args_string":"(cluster_time : BSON?)","source_link":null,"def":{"name":"cluster_time=","args":[{"name":"cluster_time","doc":null,"default_value":"","external_name":"cluster_time","restriction":"BSON | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@cluster_time = cluster_time"}},{"id":"databases:Array(Database)?-instance-method","html_id":"databases:Array(Database)?-instance-method","name":"databases","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Database)?","source_link":null,"def":{"name":"databases","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Database) | ::Nil","visibility":"Public","body":"@databases"}},{"id":"databases=(databases:Array(Database)?)-instance-method","html_id":"databases=(databases:Array(Database)?)-instance-method","name":"databases=","doc":null,"summary":null,"abstract":false,"args":[{"name":"databases","doc":null,"default_value":"","external_name":"databases","restriction":"Array(Database) | ::Nil"}],"args_string":"(databases : Array(Database)?)","source_link":null,"def":{"name":"databases=","args":[{"name":"databases","doc":null,"default_value":"","external_name":"databases","restriction":"Array(Database) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@databases = databases"}},{"id":"ok:Float64-instance-method","html_id":"ok:Float64-instance-method","name":"ok","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","source_link":null,"def":{"name":"ok","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@ok"}},{"id":"ok=(ok:Float64)-instance-method","html_id":"ok=(ok:Float64)-instance-method","name":"ok=","doc":null,"summary":null,"abstract":false,"args":[{"name":"ok","doc":null,"default_value":"","external_name":"ok","restriction":"Float64"}],"args_string":"(ok : Float64)","source_link":null,"def":{"name":"ok=","args":[{"name":"ok","doc":null,"default_value":"","external_name":"ok","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@ok = ok"}},{"id":"operation_time:BSON::Timestamp?-instance-method","html_id":"operation_time:BSON::Timestamp?-instance-method","name":"operation_time","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON::Timestamp?","source_link":null,"def":{"name":"operation_time","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON::Timestamp | ::Nil","visibility":"Public","body":"@operation_time"}},{"id":"operation_time=(operation_time:BSON::Timestamp?)-instance-method","html_id":"operation_time=(operation_time:BSON::Timestamp?)-instance-method","name":"operation_time=","doc":null,"summary":null,"abstract":false,"args":[{"name":"operation_time","doc":null,"default_value":"","external_name":"operation_time","restriction":"BSON::Timestamp | ::Nil"}],"args_string":"(operation_time : BSON::Timestamp?)","source_link":null,"def":{"name":"operation_time=","args":[{"name":"operation_time","doc":null,"default_value":"","external_name":"operation_time","restriction":"BSON::Timestamp | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@operation_time = operation_time"}},{"id":"to_bson(bson=BSON.new)-instance-method","html_id":"to_bson(bson=BSON.new)-instance-method","name":"to_bson","doc":"Converts to a BSON representation.\n\n```\nuser = User.new name: \"John\"\nbson = user.to_bson\n```","summary":"<p>Converts to a BSON representation.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"args_string":"(bson = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>)","source_link":null,"def":{"name":"to_bson","args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n      {% global_options = @type.annotations(BSON::Options) %}\n      {% camelize = global_options.reduce(false) do |_, a|\n  a[:camelize]\nend %}\n      {% for ivar in @type.instance_vars %}\n        {% ann = ivar.annotation(BSON::Field) %}\n        {% typ = ivar.type.union_types.select do |t|\n  t != Nil\nend[0] %}\n        {% key = ivar.name %}\n        {% bson_key = ann ? ann[:key].id : camelize ? ivar.name.camelcase(lower: camelize == \"lower\") : ivar.name %}\n        {% if ann && ann[:ignore] %}{% else %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            unless self.{{ key }}.nil?\n          {% end %}\n            {% if typ.has_method?(:to_bson) %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}.try &.to_bson\n            {% else %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}\n            {% end %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            end\n          {% end %}\n        {% end %}\n      {% end %}\n      {% end %}\nbson\n"}},{"id":"total_size:Float64?-instance-method","html_id":"total_size:Float64?-instance-method","name":"total_size","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64?","source_link":null,"def":{"name":"total_size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64 | ::Nil","visibility":"Public","body":"@total_size"}},{"id":"total_size=(total_size:Float64?)-instance-method","html_id":"total_size=(total_size:Float64?)-instance-method","name":"total_size=","doc":null,"summary":null,"abstract":false,"args":[{"name":"total_size","doc":null,"default_value":"","external_name":"total_size","restriction":"Float64 | ::Nil"}],"args_string":"(total_size : Float64?)","source_link":null,"def":{"name":"total_size=","args":[{"name":"total_size","doc":null,"default_value":"","external_name":"total_size","restriction":"Float64 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@total_size = total_size"}}],"macros":[],"types":[{"html_id":"cryomongo/Mongo/Commands/ListDatabases/Result/Database","path":"Mongo/Commands/ListDatabases/Result/Database.html","kind":"struct","full_name":"Mongo::Commands::ListDatabases::Result::Database","name":"Database","abstract":false,"superclass":{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cryomongo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands/ListDatabases/Result","kind":"struct","full_name":"Mongo::Commands::ListDatabases::Result","name":"Result"},"doc":null,"summary":null,"class_methods":[{"id":"from_bson(bson:BSON)-class-method","html_id":"from_bson(bson:BSON)-class-method","name":"from_bson","doc":"NOTE: See `self.new`.","summary":"<p><span class=\"flag purple\">NOTE</span>  See <code>self<a href=\"../../../../Mongo/Commands/ListDatabases/Result/Database.html#new(bson:BSON)-class-method\">.new</a></code>.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"from_bson","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.new(bson)"}}],"constructors":[{"id":"new(bson:BSON)-class-method","html_id":"new(bson:BSON)-class-method","name":"new","doc":"Allocate an instance and copies data from a BSON struct.\n\n```\nclass User\n  include BSON::Serializable\n  property name : String\nend\n\ndata = BSON.new\ndata[\"name\"] = \"John\"\nUser.new(data)\n```","summary":"<p>Allocate an instance and copies data from a BSON struct.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"new","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(bson)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"empty:Bool?-instance-method","html_id":"empty:Bool?-instance-method","name":"empty","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool?","source_link":null,"def":{"name":"empty","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool | ::Nil","visibility":"Public","body":"@empty"}},{"id":"empty=(empty:Bool?)-instance-method","html_id":"empty=(empty:Bool?)-instance-method","name":"empty=","doc":null,"summary":null,"abstract":false,"args":[{"name":"empty","doc":null,"default_value":"","external_name":"empty","restriction":"Bool | ::Nil"}],"args_string":"(empty : Bool?)","source_link":null,"def":{"name":"empty=","args":[{"name":"empty","doc":null,"default_value":"","external_name":"empty","restriction":"Bool | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@empty = empty"}},{"id":"name:String-instance-method","html_id":"name:String-instance-method","name":"name","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":null,"def":{"name":"name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@name"}},{"id":"name=(name:String)-instance-method","html_id":"name=(name:String)-instance-method","name":"name=","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"args_string":"(name : String)","source_link":null,"def":{"name":"name=","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@name = name"}},{"id":"shards:BSON?-instance-method","html_id":"shards:BSON?-instance-method","name":"shards","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON?","source_link":null,"def":{"name":"shards","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON | ::Nil","visibility":"Public","body":"@shards"}},{"id":"shards=(shards:BSON?)-instance-method","html_id":"shards=(shards:BSON?)-instance-method","name":"shards=","doc":null,"summary":null,"abstract":false,"args":[{"name":"shards","doc":null,"default_value":"","external_name":"shards","restriction":"BSON | ::Nil"}],"args_string":"(shards : BSON?)","source_link":null,"def":{"name":"shards=","args":[{"name":"shards","doc":null,"default_value":"","external_name":"shards","restriction":"BSON | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@shards = shards"}},{"id":"size_on_disk:Float64?-instance-method","html_id":"size_on_disk:Float64?-instance-method","name":"size_on_disk","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64?","source_link":null,"def":{"name":"size_on_disk","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64 | ::Nil","visibility":"Public","body":"@size_on_disk"}},{"id":"size_on_disk=(size_on_disk:Float64?)-instance-method","html_id":"size_on_disk=(size_on_disk:Float64?)-instance-method","name":"size_on_disk=","doc":null,"summary":null,"abstract":false,"args":[{"name":"size_on_disk","doc":null,"default_value":"","external_name":"size_on_disk","restriction":"Float64 | ::Nil"}],"args_string":"(size_on_disk : Float64?)","source_link":null,"def":{"name":"size_on_disk=","args":[{"name":"size_on_disk","doc":null,"default_value":"","external_name":"size_on_disk","restriction":"Float64 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@size_on_disk = size_on_disk"}},{"id":"to_bson(bson=BSON.new)-instance-method","html_id":"to_bson(bson=BSON.new)-instance-method","name":"to_bson","doc":"Converts to a BSON representation.\n\n```\nuser = User.new name: \"John\"\nbson = user.to_bson\n```","summary":"<p>Converts to a BSON representation.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"args_string":"(bson = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>)","source_link":null,"def":{"name":"to_bson","args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n      {% global_options = @type.annotations(BSON::Options) %}\n      {% camelize = global_options.reduce(false) do |_, a|\n  a[:camelize]\nend %}\n      {% for ivar in @type.instance_vars %}\n        {% ann = ivar.annotation(BSON::Field) %}\n        {% typ = ivar.type.union_types.select do |t|\n  t != Nil\nend[0] %}\n        {% key = ivar.name %}\n        {% bson_key = ann ? ann[:key].id : camelize ? ivar.name.camelcase(lower: camelize == \"lower\") : ivar.name %}\n        {% if ann && ann[:ignore] %}{% else %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            unless self.{{ key }}.nil?\n          {% end %}\n            {% if typ.has_method?(:to_bson) %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}.try &.to_bson\n            {% else %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}\n            {% end %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            end\n          {% end %}\n        {% end %}\n      {% end %}\n      {% end %}\nbson\n"}}],"macros":[],"types":[]}]}]},{"html_id":"cryomongo/Mongo/Commands/ListIndexes","path":"Mongo/Commands/ListIndexes.html","kind":"module","full_name":"Mongo::Commands::ListIndexes","name":"ListIndexes","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/ListIndexes","kind":"module","full_name":"Mongo::Commands::ListIndexes","name":"ListIndexes"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"Returns information about the indexes on the specified collection.\n\nSpecifically, the command returns a document that contains information with which to create a cursor to the index information.\nIndex information includes the keys and options used to create the index.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/listIndexes/).","summary":"<p>Returns information about the indexes on the specified collection.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command(database:String,collection:Collection::CollectionKey)-instance-method","html_id":"command(database:String,collection:Collection::CollectionKey)-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"}],"args_string":"(database : String, collection : Collection::CollectionKey)","source_link":null,"def":{"name":"command","args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({listIndexes: collection, \"$db\": database})"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Common::QueryResult.from_bson(bson)"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/LogRotate","path":"Mongo/Commands/LogRotate.html","kind":"module","full_name":"Mongo::Commands::LogRotate","name":"LogRotate","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/LogRotate","kind":"module","full_name":"Mongo::Commands::LogRotate","name":"LogRotate"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"The *logRotate* command is an administrative command that allows you to rotate the MongoDB logs to prevent a single logfile from consuming too much disk space.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/logRotate/).","summary":"<p>The <em>logRotate</em> command is an administrative command that allows you to rotate the MongoDB logs to prevent a single logfile from consuming too much disk space.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command-instance-method","html_id":"command-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"command","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({logRotate: 1, \"$db\": \"admin\"})"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Common::BaseResult.from_bson(bson)"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/Ping","path":"Mongo/Commands/Ping.html","kind":"module","full_name":"Mongo::Commands::Ping","name":"Ping","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/Ping","kind":"module","full_name":"Mongo::Commands::Ping","name":"Ping"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"The *ping* command is a no-op used to test whether a server is responding to commands.\nThis command will return immediately even if the server is write-locked.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/ping/).","summary":"<p>The <em>ping</em> command is a no-op used to test whether a server is responding to commands.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command-instance-method","html_id":"command-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"command","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({ping: 1, \"$db\": \"admin\"})"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Common::BaseResult.from_bson(bson)"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/Profile","path":"Mongo/Commands/Profile.html","kind":"module","full_name":"Mongo::Commands::Profile","name":"Profile","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/Profile","kind":"module","full_name":"Mongo::Commands::Profile","name":"Profile"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"For a mongod instance, the command enables, disables, or configures the Database Profiler.\nFor mongos instance, the command sets the slowms and sampleRate configuration settings, which configure how operations get written to the diagnostic log.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/profile/).","summary":"<p>For a mongod instance, the command enables, disables, or configures the Database Profiler.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command(level:Int32,options)-instance-method","html_id":"command(level:Int32,options)-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[{"name":"level","doc":null,"default_value":"","external_name":"level","restriction":"Int32"},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"args_string":"(level : Int32, options)","source_link":null,"def":{"name":"command","args":[{"name":"level","doc":null,"default_value":"","external_name":"level","restriction":"Int32"},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({profile: level, \"$db\": \"admin\"})"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Common::BaseResult.from_bson(bson)"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/ReIndex","path":"Mongo/Commands/ReIndex.html","kind":"module","full_name":"Mongo::Commands::ReIndex","name":"ReIndex","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/ReIndex","kind":"module","full_name":"Mongo::Commands::ReIndex","name":"ReIndex"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"The *reIndex* command drops all indexes on a collection and recreates them.\n\nThis operation may be expensive for collections that have a large amount of data and/or a large number of indexes.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/reIndex/).","summary":"<p>The <em>reIndex</em> command drops all indexes on a collection and recreates them.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command(database:String,collection:Collection::CollectionKey)-instance-method","html_id":"command(database:String,collection:Collection::CollectionKey)-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"}],"args_string":"(database : String, collection : Collection::CollectionKey)","source_link":null,"def":{"name":"command","args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({reIndex: collection, \"$db\": database})"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Common::BaseResult.from_bson(bson)"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/RenameCollection","path":"Mongo/Commands/RenameCollection.html","kind":"module","full_name":"Mongo::Commands::RenameCollection","name":"RenameCollection","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/RenameCollection","kind":"module","full_name":"Mongo::Commands::RenameCollection","name":"RenameCollection"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"Changes the name of an existing collection.\n\nSpecify collection names to renameCollection in the form of a complete namespace (<database>.<collection>).\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/renameCollection/).","summary":"<p>Changes the name of an existing collection.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command(database:String,collection:Collection::CollectionKey,to:String,options)-instance-method","html_id":"command(database:String,collection:Collection::CollectionKey,to:String,options)-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"},{"name":"to","doc":null,"default_value":"","external_name":"to","restriction":"String"},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"args_string":"(database : String, collection : Collection::CollectionKey, to : String, options)","source_link":null,"def":{"name":"command","args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"},{"name":"to","doc":null,"default_value":"","external_name":"to","restriction":"String"},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({renameCollection: \"#{database}.#{collection}\", to: to, \"$db\": \"admin\"}, options)"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Common::BaseResult.from_bson(bson)"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/ServerStatus","path":"Mongo/Commands/ServerStatus.html","kind":"module","full_name":"Mongo::Commands::ServerStatus","name":"ServerStatus","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/ServerStatus","kind":"module","full_name":"Mongo::Commands::ServerStatus","name":"ServerStatus"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"The *serverStatus* command returns a document that provides an overview of the database’s state.\nMonitoring applications can run this command at a regular interval to collect statistics about the instance.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/serverStatus/).","summary":"<p>The <em>serverStatus</em> command returns a document that provides an overview of the database’s state.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command(options)-instance-method","html_id":"command(options)-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"args_string":"(options)","source_link":null,"def":{"name":"command","args":[{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({serverStatus: 1, \"$db\": \"admin\"}, options)"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"bson"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/SetFeatureCompatibilityVersion","path":"Mongo/Commands/SetFeatureCompatibilityVersion.html","kind":"module","full_name":"Mongo::Commands::SetFeatureCompatibilityVersion","name":"SetFeatureCompatibilityVersion","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/SetFeatureCompatibilityVersion","kind":"module","full_name":"Mongo::Commands::SetFeatureCompatibilityVersion","name":"SetFeatureCompatibilityVersion"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"Enables or disables the features that persist data incompatible with earlier versions of MongoDB.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/setFeatureCompatibilityVersion/).","summary":"<p>Enables or disables the features that persist data incompatible with earlier versions of MongoDB.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command(version:String)-instance-method","html_id":"command(version:String)-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[{"name":"version","doc":null,"default_value":"","external_name":"version","restriction":"String"}],"args_string":"(version : String)","source_link":null,"def":{"name":"command","args":[{"name":"version","doc":null,"default_value":"","external_name":"version","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({setFeatureCompatibilityVersion: version, \"$db\": \"admin\"})"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Common::BaseResult.from_bson(bson)"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/SetParameter","path":"Mongo/Commands/SetParameter.html","kind":"module","full_name":"Mongo::Commands::SetParameter","name":"SetParameter","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/SetParameter","kind":"module","full_name":"Mongo::Commands::SetParameter","name":"SetParameter"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"*setParameter* is an administrative command for modifying options normally set on the command line.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/setParameter/).","summary":"<p><em>setParameter</em> is an administrative command for modifying options normally set on the command line.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command(parameter:String,value)-instance-method","html_id":"command(parameter:String,value)-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[{"name":"parameter","doc":null,"default_value":"","external_name":"parameter","restriction":"String"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(parameter : String, value)","source_link":null,"def":{"name":"command","args":[{"name":"parameter","doc":null,"default_value":"","external_name":"parameter","restriction":"String"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"bson, _ = Commands.make({setParameter: 1, \"$db\": \"admin\"})\nbson[parameter] = value\n{bson, nil}\n"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Common::BaseResult.from_bson(bson)"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/ShardConnPoolStats","path":"Mongo/Commands/ShardConnPoolStats.html","kind":"module","full_name":"Mongo::Commands::ShardConnPoolStats","name":"ShardConnPoolStats","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/ShardConnPoolStats","kind":"module","full_name":"Mongo::Commands::ShardConnPoolStats","name":"ShardConnPoolStats"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"Returns information on the pooled and cached connections in the sharded connection pool.\nThe command also returns information on the per-thread connection cache in the connection pool.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/shardConnPoolStats/).","summary":"<p>Returns information on the pooled and cached connections in the sharded connection pool.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command-instance-method","html_id":"command-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"command","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({shardConnPoolStats: 1, \"$db\": \"admin\"})"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"bson"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/Shutdown","path":"Mongo/Commands/Shutdown.html","kind":"module","full_name":"Mongo::Commands::Shutdown","name":"Shutdown","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/Shutdown","kind":"module","full_name":"Mongo::Commands::Shutdown","name":"Shutdown"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"The *shutdown* command cleans up all database resources and then terminates the process.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/shutdown/).","summary":"<p>The <em>shutdown</em> command cleans up all database resources and then terminates the process.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command(options)-instance-method","html_id":"command(options)-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"args_string":"(options)","source_link":null,"def":{"name":"command","args":[{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({shutdown: 1, \"$db\": \"admin\"}, options)"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Common::BaseResult.from_bson(bson)"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/Top","path":"Mongo/Commands/Top.html","kind":"module","full_name":"Mongo::Commands::Top","name":"Top","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/Top","kind":"module","full_name":"Mongo::Commands::Top","name":"Top"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"*top* is an administrative command that returns usage statistics for each collection.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/top/).","summary":"<p><em>top</em> is an administrative command that returns usage statistics for each collection.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command-instance-method","html_id":"command-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"command","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({top: 1, \"$db\": \"admin\"})"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"bson"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/Update","path":"Mongo/Commands/Update.html","kind":"module","full_name":"Mongo::Commands::Update","name":"Update","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/Update","kind":"module","full_name":"Mongo::Commands::Update","name":"Update"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"The *update* command modifies documents in a collection.\nA single update command can contain multiple update statements.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/update/).","summary":"<p>The <em>update</em> command modifies documents in a collection.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command(database:String,collection:Collection::CollectionKey,updates:Array,options)-instance-method","html_id":"command(database:String,collection:Collection::CollectionKey,updates:Array,options)-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"},{"name":"updates","doc":null,"default_value":"","external_name":"updates","restriction":"Array"},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"args_string":"(database : String, collection : Collection::CollectionKey, updates : Array, options)","source_link":null,"def":{"name":"command","args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"},{"name":"updates","doc":null,"default_value":"","external_name":"updates","restriction":"Array"},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({update: collection, \"$db\": database}, sequences: {updates: updates.map do |elt|\n  BSON.new(elt)\nend}, options: options)"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Common::UpdateResult.from_bson(bson)"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Commands/Validate","path":"Mongo/Commands/Validate.html","kind":"module","full_name":"Mongo::Commands::Validate","name":"Validate","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"cryomongo/Mongo/Commands/Validate","kind":"module","full_name":"Mongo::Commands::Validate","name":"Validate"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Commands","kind":"module","full_name":"Mongo::Commands","name":"Commands"},"doc":"The *validate* command checks a collection’s data and indexes for correctness and returns the results.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/validate/).","summary":"<p>The <em>validate</em> command checks a collection’s data and indexes for correctness and returns the results.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"command(database:String,collection:Collection::CollectionKey,options)-instance-method","html_id":"command(database:String,collection:Collection::CollectionKey,options)-instance-method","name":"command","doc":"Returns a pair of OP_MSG body and sequences associated with the command and arguments.","summary":"<p>Returns a pair of OP_MSG body and sequences associated with the command and arguments.</p>","abstract":false,"args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"args_string":"(database : String, collection : Collection::CollectionKey, options)","source_link":null,"def":{"name":"command","args":[{"name":"database","doc":null,"default_value":"","external_name":"database","restriction":"String"},{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"},{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Commands.make({validate: collection, \"$db\": database}, options)"}},{"id":"result(bson:BSON)-instance-method","html_id":"result(bson:BSON)-instance-method","name":"result","doc":"Transforms the server result.","summary":"<p>Transforms the server result.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"result","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"bson"}}],"macros":[],"types":[]}]},{"html_id":"cryomongo/Mongo/Cursor","path":"Mongo/Cursor.html","kind":"class","full_name":"Mongo::Cursor","name":"Cursor","abstract":false,"superclass":{"html_id":"cryomongo/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"cryomongo/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"},{"html_id":"cryomongo/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"cryomongo/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"cryomongo/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"}],"extended_modules":[],"subclasses":[{"html_id":"cryomongo/Mongo/ChangeStream/Cursor","kind":"class","full_name":"Mongo::ChangeStream::Cursor","name":"Cursor"}],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo","kind":"module","full_name":"Mongo","name":"Mongo"},"doc":"A `Cursor` is a pointer to the result set of a query.\n\nThis class implements the [`Iterator`](https://crystal-lang.org/api/Iterator.html) module under the hood.\n\n```\n# Find is one of the methods that return a cursor.\ncursor = collection.find({qty: { \"$gt\": 20 }})\n# Using `to_a` iterates the cursor until the end and stores the elements inside an `Array`.\nelements = cursor.to_a\n# `to_a` is one of the methods inherited from the `Iterator` module.\n```","summary":"<p>A <code><a href=\"../Mongo/Cursor.html\">Cursor</a></code> is a pointer to the result set of a query.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"close-instance-method","html_id":"close-instance-method","name":"close","doc":"Close the cursor and frees underlying resources.","summary":"<p>Close the cursor and frees underlying resources.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"close","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"begin\n  @@lock.synchronize do\n    if @cursor_id == 0\n    else\n      @client.command(Commands::KillCursors, database: @database, collection: @collection, cursor_ids: [@cursor_id], server_description: @server_description)\n      @cursor_id = 0_i64\n    end\n  end\nrescue e\nend"}},{"id":"finalize-instance-method","html_id":"finalize-instance-method","name":"finalize","doc":"Clean up the underlying resource when garbage collected.","summary":"<p>Clean up the underlying resource when garbage collected.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"finalize","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"close"}},{"id":"next-instance-method","html_id":"next-instance-method","name":"next","doc":"Returns the next element in this iterator, or `Iterator::Stop::INSTANCE` if there\nare no more elements.","summary":"<p>Returns the next element in this iterator, or <code>Iterator::Stop::INSTANCE</code> if there are no more elements.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"next","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"element = @batch.shift?\nif @tailable && (!element)\n  fetch_more\n  element = @batch.shift?\nend\nif element\n  return element\nend\nif (@cursor_id == 0) || (!element)\n  Iterator::Stop::INSTANCE\nelse\n  fetch_more\n  self.next\nend\n"}},{"id":"of(type:T)forallT-instance-method","html_id":"of(type:T)forallT-instance-method","name":"of","doc":"Will convert the elements to the `T` type while iterating the `Cursor`.\n\nAssumes that `T` has a constructor method named `from_bson` that takes a single `BSON` argument.\n\n```\n# Using .of is shorter than…\nwrapped_cursor = cursor.of(Type)\n# …having to .map and initialize.\nwrapped_cursor = cursor.map { |element| Type.from_bson(element) }\n```\n\nNOTE: Internally, wraps the cursor inside a `Mongo::Cursor::Wrapper` with type `T`.","summary":"<p>Will convert the elements to the <code>T</code> type while iterating the <code><a href=\"../Mongo/Cursor.html\">Cursor</a></code>.</p>","abstract":false,"args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"T"}],"args_string":"(type : T) forall T","source_link":null,"def":{"name":"of","args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n    Cursor::Wrapper({{ T.instance }}).new(self)\n    {% end %}"}}],"macros":[],"types":[{"html_id":"cryomongo/Mongo/Cursor/Wrapper","path":"Mongo/Cursor/Wrapper.html","kind":"class","full_name":"Mongo::Cursor::Wrapper(T)","name":"Wrapper","abstract":false,"superclass":{"html_id":"cryomongo/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"cryomongo/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"},{"html_id":"cryomongo/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"cryomongo/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"cryomongo/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Cursor","kind":"class","full_name":"Mongo::Cursor","name":"Cursor"},"doc":"A wrapper that will try to convert elements to the underlying `T` type while iterating the `Cursor`.\n\nAssumes that `T` has a constructor method named `from_bson`.","summary":"<p>A wrapper that will try to convert elements to the underlying <code>T</code> type while iterating the <code><a href=\"../../Mongo/Cursor.html\">Cursor</a></code>.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"close(*args,**options)-instance-method","html_id":"close(*args,**options)-instance-method","name":"close","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","source_link":null,"def":{"name":"close","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@cursor.close(*args, **options)"}},{"id":"close(*args,**options,&)-instance-method","html_id":"close(*args,**options,&)-instance-method","name":"close","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","source_link":null,"def":{"name":"close","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@cursor.close(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"id":"next-instance-method","html_id":"next-instance-method","name":"next","doc":"Returns the next element in this iterator, or `Iterator::Stop::INSTANCE` if there\nare no more elements.","summary":"<p>Returns the next element in this iterator, or <code>Iterator::Stop::INSTANCE</code> if there are no more elements.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"next","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (elt = @cursor.next).is_a?(Iterator::Stop)\n  elt\nelse\n  {% if T == BSON %}\n        elt\n      {% else %}\n        T.from_bson elt\n      {% end %}\nend"}}],"macros":[],"types":[]}]},{"html_id":"cryomongo/Mongo/Database","path":"Mongo/Database.html","kind":"class","full_name":"Mongo::Database","name":"Database","abstract":false,"superclass":{"html_id":"cryomongo/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"cryomongo/Mongo/WithReadPreference","kind":"module","full_name":"Mongo::WithReadPreference","name":"WithReadPreference"},{"html_id":"cryomongo/Mongo/WithWriteConcern","kind":"module","full_name":"Mongo::WithWriteConcern","name":"WithWriteConcern"},{"html_id":"cryomongo/Mongo/WithReadConcern","kind":"module","full_name":"Mongo::WithReadConcern","name":"WithReadConcern"},{"html_id":"cryomongo/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"cryomongo/Mongo/WithReadConcern","kind":"module","full_name":"Mongo::WithReadConcern","name":"WithReadConcern"},{"html_id":"cryomongo/Mongo/WithReadPreference","kind":"module","full_name":"Mongo::WithReadPreference","name":"WithReadPreference"},{"html_id":"cryomongo/Mongo/WithWriteConcern","kind":"module","full_name":"Mongo::WithWriteConcern","name":"WithWriteConcern"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo","kind":"module","full_name":"Mongo","name":"Mongo"},"doc":"A `Database` provides access to a MongoDB database.\n\n```\ndatabase = client[\"database_name\"]\n```","summary":"<p>A <code><a href=\"../Mongo/Database.html\">Database</a></code> provides access to a MongoDB database.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"[](collection:Collection::CollectionKey):Mongo::Collection-instance-method","html_id":"[](collection:Collection::CollectionKey):Mongo::Collection-instance-method","name":"[]","doc":"Get a newly allocated `Mongo::Collection` for the collection named *name*.","summary":"<p>Get a newly allocated <code><a href=\"../Mongo/Collection.html\">Mongo::Collection</a></code> for the collection named <em>name</em>.</p>","abstract":false,"args":[{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"}],"args_string":"(collection : Collection::CollectionKey) : Mongo::Collection","source_link":null,"def":{"name":"[]","args":[{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Mongo::Collection","visibility":"Public","body":"self.collection(collection)"}},{"id":"aggregate(pipeline:Array,*,allow_disk_use:Bool?=nil,batch_size:Int32?=nil,max_time_ms:Int64?=nil,bypass_document_validation:Bool?=nil,read_concern:ReadConcern?=nil,collation:Collation?=nil,hint:String|H?=nil,comment:String?=nil,write_concern:WriteConcern?=nil):Mongo::Cursor?forallH-instance-method","html_id":"aggregate(pipeline:Array,*,allow_disk_use:Bool?=nil,batch_size:Int32?=nil,max_time_ms:Int64?=nil,bypass_document_validation:Bool?=nil,read_concern:ReadConcern?=nil,collation:Collation?=nil,hint:String|H?=nil,comment:String?=nil,write_concern:WriteConcern?=nil):Mongo::Cursor?forallH-instance-method","name":"aggregate","doc":"Runs an aggregation framework pipeline on the database for pipeline stages\nthat do not require an underlying collection, such as $currentOp and $listLocalSessions.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/aggregate/).","summary":"<p>Runs an aggregation framework pipeline on the database for pipeline stages that do not require an underlying collection, such as $currentOp and $listLocalSessions.</p>","abstract":false,"args":[{"name":"pipeline","doc":null,"default_value":"","external_name":"pipeline","restriction":"Array"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"allow_disk_use","doc":null,"default_value":"nil","external_name":"allow_disk_use","restriction":"Bool | ::Nil"},{"name":"batch_size","doc":null,"default_value":"nil","external_name":"batch_size","restriction":"Int32 | ::Nil"},{"name":"max_time_ms","doc":null,"default_value":"nil","external_name":"max_time_ms","restriction":"Int64 | ::Nil"},{"name":"bypass_document_validation","doc":null,"default_value":"nil","external_name":"bypass_document_validation","restriction":"Bool | ::Nil"},{"name":"read_concern","doc":null,"default_value":"nil","external_name":"read_concern","restriction":"ReadConcern | ::Nil"},{"name":"collation","doc":null,"default_value":"nil","external_name":"collation","restriction":"Collation | ::Nil"},{"name":"hint","doc":null,"default_value":"nil","external_name":"hint","restriction":"String | H | ::Nil"},{"name":"comment","doc":null,"default_value":"nil","external_name":"comment","restriction":"String | ::Nil"},{"name":"write_concern","doc":null,"default_value":"nil","external_name":"write_concern","restriction":"WriteConcern | ::Nil"}],"args_string":"(pipeline : Array, *, allow_disk_use : Bool? = <span class=\"n\">nil</span>, batch_size : Int32? = <span class=\"n\">nil</span>, max_time_ms : Int64? = <span class=\"n\">nil</span>, bypass_document_validation : Bool? = <span class=\"n\">nil</span>, read_concern : ReadConcern? = <span class=\"n\">nil</span>, collation : Collation? = <span class=\"n\">nil</span>, hint : String | H? = <span class=\"n\">nil</span>, comment : String? = <span class=\"n\">nil</span>, write_concern : WriteConcern? = <span class=\"n\">nil</span>) : Mongo::Cursor? forall H","source_link":null,"def":{"name":"aggregate","args":[{"name":"pipeline","doc":null,"default_value":"","external_name":"pipeline","restriction":"Array"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"allow_disk_use","doc":null,"default_value":"nil","external_name":"allow_disk_use","restriction":"Bool | ::Nil"},{"name":"batch_size","doc":null,"default_value":"nil","external_name":"batch_size","restriction":"Int32 | ::Nil"},{"name":"max_time_ms","doc":null,"default_value":"nil","external_name":"max_time_ms","restriction":"Int64 | ::Nil"},{"name":"bypass_document_validation","doc":null,"default_value":"nil","external_name":"bypass_document_validation","restriction":"Bool | ::Nil"},{"name":"read_concern","doc":null,"default_value":"nil","external_name":"read_concern","restriction":"ReadConcern | ::Nil"},{"name":"collation","doc":null,"default_value":"nil","external_name":"collation","restriction":"Collation | ::Nil"},{"name":"hint","doc":null,"default_value":"nil","external_name":"hint","restriction":"String | H | ::Nil"},{"name":"comment","doc":null,"default_value":"nil","external_name":"comment","restriction":"String | ::Nil"},{"name":"write_concern","doc":null,"default_value":"nil","external_name":"write_concern","restriction":"WriteConcern | ::Nil"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"Mongo::Cursor | ::Nil","visibility":"Public","body":"maybe_result = self.command(Commands::Aggregate, collection: 1, pipeline: pipeline, options: {allow_disk_use: allow_disk_use, cursor: batch_size.try do\n  {batch_size: batch_size}\nend, bypass_document_validation: bypass_document_validation, read_concern: read_concern, collation: collation, hint: hint.is_a?(String) ? hint : BSON.new(hint), comment: comment, write_concern: write_concern})\nmaybe_result.try do |result|\n  Cursor.new(@client, result)\nend\n"}},{"id":"client:Mongo::Client-instance-method","html_id":"client:Mongo::Client-instance-method","name":"client","doc":"The underlying MongoDB client.","summary":"<p>The underlying MongoDB client.</p>","abstract":false,"args":[],"args_string":" : Mongo::Client","source_link":null,"def":{"name":"client","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Mongo::Client","visibility":"Public","body":"@client"}},{"id":"collection(collection:Collection::CollectionKey):Mongo::Collection-instance-method","html_id":"collection(collection:Collection::CollectionKey):Mongo::Collection-instance-method","name":"collection","doc":"Get a newly allocated `Mongo::Collection` for the collection named *name*.","summary":"<p>Get a newly allocated <code><a href=\"../Mongo/Collection.html\">Mongo::Collection</a></code> for the collection named <em>name</em>.</p>","abstract":false,"args":[{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"}],"args_string":"(collection : Collection::CollectionKey) : Mongo::Collection","source_link":null,"def":{"name":"collection","args":[{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Collection::CollectionKey"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Mongo::Collection","visibility":"Public","body":"Collection.new(self, collection)"}},{"id":"command(operation,write_concern:WriteConcern?=nil,read_concern:ReadConcern?=nil,read_preference:ReadPreference?=nil,**args)-instance-method","html_id":"command(operation,write_concern:WriteConcern?=nil,read_concern:ReadConcern?=nil,read_preference:ReadPreference?=nil,**args)-instance-method","name":"command","doc":"Execute a command on the server targeting the database.\n\nWill automatically set the *database* arguments.\n\nSee: `Mongo::Client.command`","summary":"<p>Execute a command on the server targeting the database.</p>","abstract":false,"args":[{"name":"operation","doc":null,"default_value":"","external_name":"operation","restriction":""},{"name":"write_concern","doc":null,"default_value":"nil","external_name":"write_concern","restriction":"WriteConcern | ::Nil"},{"name":"read_concern","doc":null,"default_value":"nil","external_name":"read_concern","restriction":"ReadConcern | ::Nil"},{"name":"read_preference","doc":null,"default_value":"nil","external_name":"read_preference","restriction":"ReadPreference | ::Nil"}],"args_string":"(operation, write_concern : WriteConcern? = <span class=\"n\">nil</span>, read_concern : ReadConcern? = <span class=\"n\">nil</span>, read_preference : ReadPreference? = <span class=\"n\">nil</span>, **args)","source_link":null,"def":{"name":"command","args":[{"name":"operation","doc":null,"default_value":"","external_name":"operation","restriction":""},{"name":"write_concern","doc":null,"default_value":"nil","external_name":"write_concern","restriction":"WriteConcern | ::Nil"},{"name":"read_concern","doc":null,"default_value":"nil","external_name":"read_concern","restriction":"ReadConcern | ::Nil"},{"name":"read_preference","doc":null,"default_value":"nil","external_name":"read_preference","restriction":"ReadPreference | ::Nil"}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@client.command(operation, **args, database: @name, write_concern: write_concern || @write_concern, read_concern: read_concern || @read_concern, read_preference: read_preference || @read_preference)"}},{"id":"grid_fs(bucket_name:String=&quot;fs&quot;,*,chunk_size_bytes:Int32=255*1024,write_concern:WriteConcern?=nil,read_concern:ReadConcern?=nil,read_preference:ReadPreference?=nil):GridFS::Bucket-instance-method","html_id":"grid_fs(bucket_name:String=&quot;fs&quot;,*,chunk_size_bytes:Int32=255*1024,write_concern:WriteConcern?=nil,read_concern:ReadConcern?=nil,read_preference:ReadPreference?=nil):GridFS::Bucket-instance-method","name":"grid_fs","doc":"Returns a `Mongo::GridFS` instance configured with the arguments provided.\n\nNOTE: [for more details about GridFS, please check the official MongoDB manual](https://docs.mongodb.com/manual/core/gridfs/).","summary":"<p>Returns a <code><a href=\"../Mongo/GridFS.html\">Mongo::GridFS</a></code> instance configured with the arguments provided.</p>","abstract":false,"args":[{"name":"bucket_name","doc":null,"default_value":"\"fs\"","external_name":"bucket_name","restriction":"String"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"chunk_size_bytes","doc":null,"default_value":"255 * 1024","external_name":"chunk_size_bytes","restriction":"Int32"},{"name":"write_concern","doc":null,"default_value":"nil","external_name":"write_concern","restriction":"WriteConcern | ::Nil"},{"name":"read_concern","doc":null,"default_value":"nil","external_name":"read_concern","restriction":"ReadConcern | ::Nil"},{"name":"read_preference","doc":null,"default_value":"nil","external_name":"read_preference","restriction":"ReadPreference | ::Nil"}],"args_string":"(bucket_name : String = <span class=\"s\">&quot;fs&quot;</span>, *, chunk_size_bytes : Int32 = <span class=\"n\">255</span> <span class=\"o\">*</span> <span class=\"n\">1024</span>, write_concern : WriteConcern? = <span class=\"n\">nil</span>, read_concern : ReadConcern? = <span class=\"n\">nil</span>, read_preference : ReadPreference? = <span class=\"n\">nil</span>) : GridFS::Bucket","source_link":null,"def":{"name":"grid_fs","args":[{"name":"bucket_name","doc":null,"default_value":"\"fs\"","external_name":"bucket_name","restriction":"String"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"chunk_size_bytes","doc":null,"default_value":"255 * 1024","external_name":"chunk_size_bytes","restriction":"Int32"},{"name":"write_concern","doc":null,"default_value":"nil","external_name":"write_concern","restriction":"WriteConcern | ::Nil"},{"name":"read_concern","doc":null,"default_value":"nil","external_name":"read_concern","restriction":"ReadConcern | ::Nil"},{"name":"read_preference","doc":null,"default_value":"nil","external_name":"read_preference","restriction":"ReadPreference | ::Nil"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"GridFS::Bucket","visibility":"Public","body":"GridFS::Bucket.new(self, bucket_name: bucket_name, chunk_size_bytes: chunk_size_bytes, write_concern: write_concern, read_concern: read_concern, read_preference: read_preference)"}},{"id":"list_collections(*,filter=nil,name_only:Bool?=nil,authorized_collections:Bool?=nil):Mongo::Cursor-instance-method","html_id":"list_collections(*,filter=nil,name_only:Bool?=nil,authorized_collections:Bool?=nil):Mongo::Cursor-instance-method","name":"list_collections","doc":"Retrieve information, i.e. the name and options, about the collections and views in a database.\n\nSpecifically, the command returns a document that contains information with which to create a cursor to the collection information.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/listCollections/).","summary":"<p>Retrieve information, i.e.</p>","abstract":false,"args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"filter","doc":null,"default_value":"nil","external_name":"filter","restriction":""},{"name":"name_only","doc":null,"default_value":"nil","external_name":"name_only","restriction":"Bool | ::Nil"},{"name":"authorized_collections","doc":null,"default_value":"nil","external_name":"authorized_collections","restriction":"Bool | ::Nil"}],"args_string":"(*, filter = <span class=\"n\">nil</span>, name_only : Bool? = <span class=\"n\">nil</span>, authorized_collections : Bool? = <span class=\"n\">nil</span>) : Mongo::Cursor","source_link":null,"def":{"name":"list_collections","args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"filter","doc":null,"default_value":"nil","external_name":"filter","restriction":""},{"name":"name_only","doc":null,"default_value":"nil","external_name":"name_only","restriction":"Bool | ::Nil"},{"name":"authorized_collections","doc":null,"default_value":"nil","external_name":"authorized_collections","restriction":"Bool | ::Nil"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"Mongo::Cursor","visibility":"Public","body":"result = (self.command(Commands::ListCollections, options: {filter: filter, name_only: name_only, authorized_collections: authorized_collections})).not_nil!\nCursor.new(@client, result)\n"}},{"id":"name:String-instance-method","html_id":"name:String-instance-method","name":"name","doc":"The database name.","summary":"<p>The database name.</p>","abstract":false,"args":[],"args_string":" : String","source_link":null,"def":{"name":"name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@name"}},{"id":"read_concern:ReadConcern?-instance-method","html_id":"read_concern:ReadConcern?-instance-method","name":"read_concern","doc":"Read concern accessor.\n\nSee: [the official documentation](https://docs.mongodb.com/manual/reference/read-concern/index.html)","summary":"<p>Read concern accessor.</p>","abstract":false,"args":[],"args_string":" : ReadConcern?","source_link":null,"def":{"name":"read_concern","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"ReadConcern | ::Nil","visibility":"Public","body":"@read_concern"}},{"id":"read_concern=(read_concern:ReadConcern?)-instance-method","html_id":"read_concern=(read_concern:ReadConcern?)-instance-method","name":"read_concern=","doc":"Read concern accessor.\n\nSee: [the official documentation](https://docs.mongodb.com/manual/reference/read-concern/index.html)","summary":"<p>Read concern accessor.</p>","abstract":false,"args":[{"name":"read_concern","doc":null,"default_value":"","external_name":"read_concern","restriction":"ReadConcern | ::Nil"}],"args_string":"(read_concern : ReadConcern?)","source_link":null,"def":{"name":"read_concern=","args":[{"name":"read_concern","doc":null,"default_value":"","external_name":"read_concern","restriction":"ReadConcern | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@read_concern = read_concern"}},{"id":"read_preference:ReadPreference?-instance-method","html_id":"read_preference:ReadPreference?-instance-method","name":"read_preference","doc":"ReadPreference accessor.\n\nSee: [the official documentation](https://docs.mongodb.com/manual/core/read-preference/index.html).","summary":"<p>ReadPreference accessor.</p>","abstract":false,"args":[],"args_string":" : ReadPreference?","source_link":null,"def":{"name":"read_preference","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"ReadPreference | ::Nil","visibility":"Public","body":"@read_preference"}},{"id":"read_preference=(read_preference:ReadPreference?)-instance-method","html_id":"read_preference=(read_preference:ReadPreference?)-instance-method","name":"read_preference=","doc":"ReadPreference accessor.\n\nSee: [the official documentation](https://docs.mongodb.com/manual/core/read-preference/index.html).","summary":"<p>ReadPreference accessor.</p>","abstract":false,"args":[{"name":"read_preference","doc":null,"default_value":"","external_name":"read_preference","restriction":"ReadPreference | ::Nil"}],"args_string":"(read_preference : ReadPreference?)","source_link":null,"def":{"name":"read_preference=","args":[{"name":"read_preference","doc":null,"default_value":"","external_name":"read_preference","restriction":"ReadPreference | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@read_preference = read_preference"}},{"id":"stats(*,scale:Int32?=nil):BSON?-instance-method","html_id":"stats(*,scale:Int32?=nil):BSON?-instance-method","name":"stats","doc":"Returns a variety of storage statistics for the database.\n\nNOTE: [for more details, please check the official MongoDB documentation](https://docs.mongodb.com/manual/reference/command/dbStats/).","summary":"<p>Returns a variety of storage statistics for the database.</p>","abstract":false,"args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"scale","doc":null,"default_value":"nil","external_name":"scale","restriction":"Int32 | ::Nil"}],"args_string":"(*, scale : Int32? = <span class=\"n\">nil</span>) : BSON?","source_link":null,"def":{"name":"stats","args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"scale","doc":null,"default_value":"nil","external_name":"scale","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"BSON | ::Nil","visibility":"Public","body":"self.command(Commands::DbStats, options: {scale: scale})"}},{"id":"watch(pipeline:Array=[]ofBSON,*,full_document:String?=nil,resume_after=nil,max_await_time_ms:Int64?=nil,batch_size:Int32?=nil,collation:Collation?=nil,start_at_operation_time:Time?=nil,start_after=nil,read_concern:ReadConcern?=nil,read_preference:ReadPreference?=nil):Mongo::ChangeStream::Cursor-instance-method","html_id":"watch(pipeline:Array=[]ofBSON,*,full_document:String?=nil,resume_after=nil,max_await_time_ms:Int64?=nil,batch_size:Int32?=nil,collation:Collation?=nil,start_at_operation_time:Time?=nil,start_after=nil,read_concern:ReadConcern?=nil,read_preference:ReadPreference?=nil):Mongo::ChangeStream::Cursor-instance-method","name":"watch","doc":"Returns a `ChangeStream::Cursor` watching all the database collection.\n\nNOTE: Excludes system collections.\n\n```\nclient = Mongo::Client.new\ndatabase = client[\"db\"]\n\nspawn {\n  cursor = database.watch(\n    [\n      {\"$match\": {\"operationType\": \"insert\"}},\n    ],\n    max_await_time_ms: 10000\n  )\n  # cursor.of(BSON) converts to the Mongo::ChangeStream::Document(BSON) type.\n  cursor.of(BSON).each { |doc|\n    puts doc.to_bson.to_json\n  }\n}\n\n100.times do |i|\n  database[\"collection\"].insert_one({count: i})\nend\n\nsleep\n```\n\nNOTE: [for more details, please check the official manual](https://docs.mongodb.com/manual/changeStreams/index.html).","summary":"<p>Returns a <code><a href=\"../Mongo/ChangeStream/Cursor.html\">ChangeStream::Cursor</a></code> watching all the database collection.</p>","abstract":false,"args":[{"name":"pipeline","doc":null,"default_value":"[] of BSON","external_name":"pipeline","restriction":"Array"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"full_document","doc":null,"default_value":"nil","external_name":"full_document","restriction":"String | ::Nil"},{"name":"resume_after","doc":null,"default_value":"nil","external_name":"resume_after","restriction":""},{"name":"max_await_time_ms","doc":null,"default_value":"nil","external_name":"max_await_time_ms","restriction":"Int64 | ::Nil"},{"name":"batch_size","doc":null,"default_value":"nil","external_name":"batch_size","restriction":"Int32 | ::Nil"},{"name":"collation","doc":null,"default_value":"nil","external_name":"collation","restriction":"Collation | ::Nil"},{"name":"start_at_operation_time","doc":null,"default_value":"nil","external_name":"start_at_operation_time","restriction":"Time | ::Nil"},{"name":"start_after","doc":null,"default_value":"nil","external_name":"start_after","restriction":""},{"name":"read_concern","doc":null,"default_value":"nil","external_name":"read_concern","restriction":"ReadConcern | ::Nil"},{"name":"read_preference","doc":null,"default_value":"nil","external_name":"read_preference","restriction":"ReadPreference | ::Nil"}],"args_string":"(pipeline : Array = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">BSON</span>, *, full_document : String? = <span class=\"n\">nil</span>, resume_after = <span class=\"n\">nil</span>, max_await_time_ms : Int64? = <span class=\"n\">nil</span>, batch_size : Int32? = <span class=\"n\">nil</span>, collation : Collation? = <span class=\"n\">nil</span>, start_at_operation_time : Time? = <span class=\"n\">nil</span>, start_after = <span class=\"n\">nil</span>, read_concern : ReadConcern? = <span class=\"n\">nil</span>, read_preference : ReadPreference? = <span class=\"n\">nil</span>) : Mongo::ChangeStream::Cursor","source_link":null,"def":{"name":"watch","args":[{"name":"pipeline","doc":null,"default_value":"[] of BSON","external_name":"pipeline","restriction":"Array"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"full_document","doc":null,"default_value":"nil","external_name":"full_document","restriction":"String | ::Nil"},{"name":"resume_after","doc":null,"default_value":"nil","external_name":"resume_after","restriction":""},{"name":"max_await_time_ms","doc":null,"default_value":"nil","external_name":"max_await_time_ms","restriction":"Int64 | ::Nil"},{"name":"batch_size","doc":null,"default_value":"nil","external_name":"batch_size","restriction":"Int32 | ::Nil"},{"name":"collation","doc":null,"default_value":"nil","external_name":"collation","restriction":"Collation | ::Nil"},{"name":"start_at_operation_time","doc":null,"default_value":"nil","external_name":"start_at_operation_time","restriction":"Time | ::Nil"},{"name":"start_after","doc":null,"default_value":"nil","external_name":"start_after","restriction":""},{"name":"read_concern","doc":null,"default_value":"nil","external_name":"read_concern","restriction":"ReadConcern | ::Nil"},{"name":"read_preference","doc":null,"default_value":"nil","external_name":"read_preference","restriction":"ReadPreference | ::Nil"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"Mongo::ChangeStream::Cursor","visibility":"Public","body":"ChangeStream::Cursor.new(client: @client, database: name, collection: 1, pipeline: pipeline.map do |elt|\n  BSON.new(elt)\nend, full_document: full_document, resume_after: resume_after, start_after: start_after, start_at_operation_time: start_at_operation_time, read_concern: read_concern, read_preference: read_preference, max_time_ms: max_await_time_ms, batch_size: batch_size, collation: collation)"}},{"id":"write_concern:WriteConcern?-instance-method","html_id":"write_concern:WriteConcern?-instance-method","name":"write_concern","doc":"Write concern accessor.\n\nSee: [the official documentation](https://docs.mongodb.com/manual/reference/write-concern/index.html)","summary":"<p>Write concern accessor.</p>","abstract":false,"args":[],"args_string":" : WriteConcern?","source_link":null,"def":{"name":"write_concern","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"WriteConcern | ::Nil","visibility":"Public","body":"@write_concern"}},{"id":"write_concern=(write_concern:WriteConcern?)-instance-method","html_id":"write_concern=(write_concern:WriteConcern?)-instance-method","name":"write_concern=","doc":"Write concern accessor.\n\nSee: [the official documentation](https://docs.mongodb.com/manual/reference/write-concern/index.html)","summary":"<p>Write concern accessor.</p>","abstract":false,"args":[{"name":"write_concern","doc":null,"default_value":"","external_name":"write_concern","restriction":"WriteConcern | ::Nil"}],"args_string":"(write_concern : WriteConcern?)","source_link":null,"def":{"name":"write_concern=","args":[{"name":"write_concern","doc":null,"default_value":"","external_name":"write_concern","restriction":"WriteConcern | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@write_concern = write_concern"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Error","path":"Mongo/Error.html","kind":"class","full_name":"Mongo::Error","name":"Error","abstract":false,"superclass":{"html_id":"cryomongo/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"cryomongo/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"cryomongo/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"cryomongo/Mongo/Bulk/Error","kind":"class","full_name":"Mongo::Bulk::Error","name":"Error"},{"html_id":"cryomongo/Mongo/Error/Command","kind":"class","full_name":"Mongo::Error::Command","name":"Command"},{"html_id":"cryomongo/Mongo/Error/CommandWrite","kind":"class","full_name":"Mongo::Error::CommandWrite","name":"CommandWrite"},{"html_id":"cryomongo/Mongo/Error/ServerSelection","kind":"class","full_name":"Mongo::Error::ServerSelection","name":"ServerSelection"}],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo","kind":"module","full_name":"Mongo","name":"Mongo"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"cryomongo/Mongo/Error/Command","path":"Mongo/Error/Command.html","kind":"class","full_name":"Mongo::Error::Command","name":"Command","abstract":false,"superclass":{"html_id":"cryomongo/Mongo/Error","kind":"class","full_name":"Mongo::Error","name":"Error"},"ancestors":[{"html_id":"cryomongo/Mongo/Error","kind":"class","full_name":"Mongo::Error","name":"Error"},{"html_id":"cryomongo/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"cryomongo/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"NOT_MASTER_CODES","name":"NOT_MASTER_CODES","value":"{10107, 13435}","doc":null,"summary":null},{"id":"NOT_MASTER_MESSAGES","name":"NOT_MASTER_MESSAGES","value":"{\"not master\"}","doc":null,"summary":null},{"id":"RECOVERING_CODES","name":"RECOVERING_CODES","value":"{11600, 11602, 13436, 189, 91}","doc":"See: https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-master-and-node-is-recovering","summary":"<p>See: https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-master-and-node-is-recovering</p>"},{"id":"RECOVERING_MESSAGES","name":"RECOVERING_MESSAGES","value":"{\"not master or secondary\", \"node is recovering\"}","doc":null,"summary":null},{"id":"RESUMABLE_CODES","name":"RESUMABLE_CODES","value":"{6, 7, 89, 91, 189, 262, 9001, 10107, 11600, 11602, 13435, 13436, 63, 150, 13388, 234, 133}","doc":null,"summary":null},{"id":"SHUTDOWN_CODES","name":"SHUTDOWN_CODES","value":"{11600, 91}","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Error","kind":"class","full_name":"Mongo::Error","name":"Error"},"doc":"Is raised when the server replies with an error to a command request.","summary":"<p>Is raised when the server replies with an error to a command request.</p>","class_methods":[],"constructors":[{"id":"new(code,message)-class-method","html_id":"new(code,message)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"code","doc":null,"default_value":"","external_name":"code","restriction":""},{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":""}],"args_string":"(code, message)","source_link":null,"def":{"name":"new","args":[{"name":"code","doc":null,"default_value":"","external_name":"code","restriction":""},{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(code, message)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"not_master?-instance-method","html_id":"not_master?-instance-method","name":"not_master?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"not_master?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"((@code.in?(NOT_MASTER_CODES)) || self.recovering?) || NOT_MASTER_MESSAGES.any?(&.in?(@message.not_nil!))"}},{"id":"recovering?-instance-method","html_id":"recovering?-instance-method","name":"recovering?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"recovering?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(@code.in?(RECOVERING_CODES)) || RECOVERING_MESSAGES.any?(&.in?(@message.not_nil!))"}},{"id":"resumable?-instance-method","html_id":"resumable?-instance-method","name":"resumable?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"resumable?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@code.in?(RESUMABLE_CODES)"}},{"id":"shutdown?-instance-method","html_id":"shutdown?-instance-method","name":"shutdown?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"shutdown?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@code.in?(SHUTDOWN_CODES)"}},{"id":"state_change?-instance-method","html_id":"state_change?-instance-method","name":"state_change?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"state_change?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"recovering? || not_master?"}},{"id":"to_s(io:IO)-instance-method","html_id":"to_s(io:IO)-instance-method","name":"to_s","doc":"Appends a short String representation of this object\nwhich includes its class name and its object address.\n\n```\nclass Person\n  def initialize(@name : String, @age : Int32)\n  end\nend\n\nPerson.new(\"John\", 32).to_s # => #<Person:0x10a199f20>\n```","summary":"<p>Appends a short String representation of this object which includes its class name and its object address.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","source_link":null,"def":{"name":"to_s","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"io << \"Code: #{@code} - #{@message}\""}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Error/CommandWrite","path":"Mongo/Error/CommandWrite.html","kind":"class","full_name":"Mongo::Error::CommandWrite","name":"CommandWrite","abstract":false,"superclass":{"html_id":"cryomongo/Mongo/Error","kind":"class","full_name":"Mongo::Error","name":"Error"},"ancestors":[{"html_id":"cryomongo/Mongo/Error","kind":"class","full_name":"Mongo::Error","name":"Error"},{"html_id":"cryomongo/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"cryomongo/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Error","kind":"class","full_name":"Mongo::Error","name":"Error"},"doc":"Is raised when the server replies to a write with one or more WriteErrors.","summary":"<p>Is raised when the server replies to a write with one or more WriteErrors.</p>","class_methods":[],"constructors":[{"id":"new(errors:BSON)-class-method","html_id":"new(errors:BSON)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"errors","doc":null,"default_value":"","external_name":"errors","restriction":"BSON"}],"args_string":"(errors : BSON)","source_link":null,"def":{"name":"new","args":[{"name":"errors","doc":null,"default_value":"","external_name":"errors","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(errors)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"errors:Array(Mongo::Error::Command)-instance-method","html_id":"errors:Array(Mongo::Error::Command)-instance-method","name":"errors","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Mongo::Error::Command)","source_link":null,"def":{"name":"errors","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@errors"}},{"id":"message-instance-method","html_id":"message-instance-method","name":"message","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"message","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@errors.join('\\n')"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/Error/ServerSelection","path":"Mongo/Error/ServerSelection.html","kind":"class","full_name":"Mongo::Error::ServerSelection","name":"ServerSelection","abstract":false,"superclass":{"html_id":"cryomongo/Mongo/Error","kind":"class","full_name":"Mongo::Error","name":"Error"},"ancestors":[{"html_id":"cryomongo/Mongo/Error","kind":"class","full_name":"Mongo::Error","name":"Error"},{"html_id":"cryomongo/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"cryomongo/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/Error","kind":"class","full_name":"Mongo::Error","name":"Error"},"doc":"Is raised during server selection when encountering a timeout.","summary":"<p>Is raised during server selection when encountering a timeout.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"cryomongo/Mongo/GridFS","path":"Mongo/GridFS.html","kind":"module","full_name":"Mongo::GridFS","name":"GridFS","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo","kind":"module","full_name":"Mongo","name":"Mongo"},"doc":"GridFS is a specification for storing and retrieving files that exceed the BSON-document size limit of 16 MB.","summary":"<p>GridFS is a specification for storing and retrieving files that exceed the BSON-document size limit of 16 MB.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"cryomongo/Mongo/GridFS/Bucket","path":"Mongo/GridFS/Bucket.html","kind":"class","full_name":"Mongo::GridFS::Bucket","name":"Bucket","abstract":false,"superclass":{"html_id":"cryomongo/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"cryomongo/Mongo/GridFS/Bucket/Internal","kind":"module","full_name":"Mongo::GridFS::Bucket::Internal","name":"Internal"},{"html_id":"cryomongo/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"cryomongo/Mongo/GridFS/Bucket/Internal","kind":"module","full_name":"Mongo::GridFS::Bucket::Internal","name":"Internal"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/GridFS","kind":"module","full_name":"Mongo::GridFS","name":"GridFS"},"doc":"A configured GridFS bucket instance.","summary":"<p>A configured GridFS bucket instance.</p>","class_methods":[],"constructors":[{"id":"new(db:Database,*,bucket_name:String=&quot;fs&quot;,chunk_size_bytes:Int32=255*1024,write_concern:WriteConcern?=nil,read_concern:ReadConcern?=nil,read_preference:ReadPreference?=nil)-class-method","html_id":"new(db:Database,*,bucket_name:String=&quot;fs&quot;,chunk_size_bytes:Int32=255*1024,write_concern:WriteConcern?=nil,read_concern:ReadConcern?=nil,read_preference:ReadPreference?=nil)-class-method","name":"new","doc":"Creates a new GridFSBucket object, managing a GridFS bucket within the given database.","summary":"<p>Creates a new GridFSBucket object, managing a GridFS bucket within the given database.</p>","abstract":false,"args":[{"name":"db","doc":null,"default_value":"","external_name":"db","restriction":"Database"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"bucket_name","doc":null,"default_value":"\"fs\"","external_name":"bucket_name","restriction":"String"},{"name":"chunk_size_bytes","doc":null,"default_value":"255 * 1024","external_name":"chunk_size_bytes","restriction":"Int32"},{"name":"write_concern","doc":null,"default_value":"nil","external_name":"write_concern","restriction":"WriteConcern | ::Nil"},{"name":"read_concern","doc":null,"default_value":"nil","external_name":"read_concern","restriction":"ReadConcern | ::Nil"},{"name":"read_preference","doc":null,"default_value":"nil","external_name":"read_preference","restriction":"ReadPreference | ::Nil"}],"args_string":"(db : Database, *, bucket_name : String = <span class=\"s\">&quot;fs&quot;</span>, chunk_size_bytes : Int32 = <span class=\"n\">255</span> <span class=\"o\">*</span> <span class=\"n\">1024</span>, write_concern : WriteConcern? = <span class=\"n\">nil</span>, read_concern : ReadConcern? = <span class=\"n\">nil</span>, read_preference : ReadPreference? = <span class=\"n\">nil</span>)","source_link":null,"def":{"name":"new","args":[{"name":"db","doc":null,"default_value":"","external_name":"db","restriction":"Database"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"bucket_name","doc":null,"default_value":"\"fs\"","external_name":"bucket_name","restriction":"String"},{"name":"chunk_size_bytes","doc":null,"default_value":"255 * 1024","external_name":"chunk_size_bytes","restriction":"Int32"},{"name":"write_concern","doc":null,"default_value":"nil","external_name":"write_concern","restriction":"WriteConcern | ::Nil"},{"name":"read_concern","doc":null,"default_value":"nil","external_name":"read_concern","restriction":"ReadConcern | ::Nil"},{"name":"read_preference","doc":null,"default_value":"nil","external_name":"read_preference","restriction":"ReadPreference | ::Nil"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(db, bucket_name: bucket_name, chunk_size_bytes: chunk_size_bytes, write_concern: write_concern, read_concern: read_concern, read_preference: read_preference)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"delete(id:FileID):NilforallFileID-instance-method","html_id":"delete(id:FileID):NilforallFileID-instance-method","name":"delete","doc":"Given an *id*, delete this stored file’s files collection document and associated chunks from a GridFS bucket.\n\n```\ngridfs = client[\"database\"].grid_fs\nid = BSON::ObjectId.new(\"5eed35600000000000000000\")\ngridfs.delete(id)\n```","summary":"<p>Given an <em>id</em>, delete this stored file’s files collection document and associated chunks from a GridFS bucket.</p>","abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"FileID"}],"args_string":"(id : FileID) : Nil forall FileID","source_link":null,"def":{"name":"delete","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"FileID"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"delete_result = bucket.delete_one({_id: id}, write_concern: write_concern)\nchunks.delete_many({files_id: id}, write_concern: write_concern)\nif delete_result.try(&.n) == 0\n  raise(Mongo::Error.new(\"File not found.\"))\nend\n"}},{"id":"download_to_stream(id:FileID,destination:IO):NilforallFileID-instance-method","html_id":"download_to_stream(id:FileID,destination:IO):NilforallFileID-instance-method","name":"download_to_stream","doc":"Downloads the contents of the stored file specified by *id* and writes\nthe contents to the *destination* Stream.\n\n```\ngridfs = client[\"database\"].grid_fs\nstream = IO::Memory.new\nid = BSON::ObjectId.new(\"5eed35600000000000000000\")\ngridfs.download_to_stream(id, stream)\nputs stream.rewind.gets_to_end\n```","summary":"<p>Downloads the contents of the stored file specified by <em>id</em> and writes the contents to the <em>destination</em> Stream.</p>","abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"FileID"},{"name":"destination","doc":null,"default_value":"","external_name":"destination","restriction":"IO"}],"args_string":"(id : FileID, destination : IO) : Nil forall FileID","source_link":null,"def":{"name":"download_to_stream","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"FileID"},{"name":"destination","doc":null,"default_value":"","external_name":"destination","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"file = get_file(id)\ncount = chunk_count(file)\nremaining = file.length\ncount.times do |n|\n  chunk = get_chunk(id, n)\n  integrity_check!(file, chunk, remaining)\n  destination.write(chunk.data)\n  remaining = remaining - chunk.data.size\nend\n"}},{"id":"download_to_stream_by_name(filename:String,destination:IO,revision:Int32=-1):Nil-instance-method","html_id":"download_to_stream_by_name(filename:String,destination:IO,revision:Int32=-1):Nil-instance-method","name":"download_to_stream_by_name","doc":"Downloads the contents of the stored file specified by *filename* and by an optional *revision* and writes the contents to the *destination* `IO` stream.\n\nSee: `open_download_stream_by_name` for how the revision is calculated.\n\n```\ngridfs = client[\"database\"].grid_fs\nio = IO::Memory.new\ngridfs.download_to_stream_by_name(\"file\", io, revision: -1)\nputs io.to_s\n```","summary":"<p>Downloads the contents of the stored file specified by <em>filename</em> and by an optional <em>revision</em> and writes the contents to the <em>destination</em> <code>IO</code> stream.</p>","abstract":false,"args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":"String"},{"name":"destination","doc":null,"default_value":"","external_name":"destination","restriction":"IO"},{"name":"revision","doc":null,"default_value":"-1","external_name":"revision","restriction":"Int32"}],"args_string":"(filename : String, destination : IO, revision : Int32 = <span class=\"n\">-1</span>) : Nil","source_link":null,"def":{"name":"download_to_stream_by_name","args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":"String"},{"name":"destination","doc":null,"default_value":"","external_name":"destination","restriction":"IO"},{"name":"revision","doc":null,"default_value":"-1","external_name":"revision","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"file = get_file_by_name(filename, revision)\ncount = chunk_count(file)\nremaining = file.length\ncount.times do |n|\n  chunk = get_chunk(file._id, n)\n  integrity_check!(file, chunk, remaining)\n  destination.write(chunk.data)\n  remaining = remaining - chunk.data.size\nend\n"}},{"id":"drop-instance-method","html_id":"drop-instance-method","name":"drop","doc":"Drops the files and chunks collections associated with this bucket.\n\n```\ngridfs = client[\"database\"].grid_fs\ngridfs.drop\n```","summary":"<p>Drops the files and chunks collections associated with this bucket.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"drop","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"bucket.delete_many(BSON.new)\nchunks.delete_many(BSON.new)\n"}},{"id":"find(filter=BSON.new,*,allow_disk_use:Bool?=nil,batch_size:Int32?=nil,limit:Int32?=nil,max_time_ms:Int64?=nil,no_cursor_timeout:Bool?=nil,skip:Int32?=nil,sort=nil):Cursor::Wrapper(File(BSON::Value))-instance-method","html_id":"find(filter=BSON.new,*,allow_disk_use:Bool?=nil,batch_size:Int32?=nil,limit:Int32?=nil,max_time_ms:Int64?=nil,no_cursor_timeout:Bool?=nil,skip:Int32?=nil,sort=nil):Cursor::Wrapper(File(BSON::Value))-instance-method","name":"find","doc":"Find and return the files collection documents that match *filter*.\n\n```\ngridfs = client[\"database\"].grid_fs\ngridfs.find({\n  length: {\"$gte\": 5000},\n})\n```","summary":"<p>Find and return the files collection documents that match <em>filter</em>.</p>","abstract":false,"args":[{"name":"filter","doc":null,"default_value":"BSON.new","external_name":"filter","restriction":""},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"allow_disk_use","doc":null,"default_value":"nil","external_name":"allow_disk_use","restriction":"Bool | ::Nil"},{"name":"batch_size","doc":null,"default_value":"nil","external_name":"batch_size","restriction":"Int32 | ::Nil"},{"name":"limit","doc":null,"default_value":"nil","external_name":"limit","restriction":"Int32 | ::Nil"},{"name":"max_time_ms","doc":null,"default_value":"nil","external_name":"max_time_ms","restriction":"Int64 | ::Nil"},{"name":"no_cursor_timeout","doc":null,"default_value":"nil","external_name":"no_cursor_timeout","restriction":"Bool | ::Nil"},{"name":"skip","doc":null,"default_value":"nil","external_name":"skip","restriction":"Int32 | ::Nil"},{"name":"sort","doc":null,"default_value":"nil","external_name":"sort","restriction":""}],"args_string":"(filter = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>, *, allow_disk_use : Bool? = <span class=\"n\">nil</span>, batch_size : Int32? = <span class=\"n\">nil</span>, limit : Int32? = <span class=\"n\">nil</span>, max_time_ms : Int64? = <span class=\"n\">nil</span>, no_cursor_timeout : Bool? = <span class=\"n\">nil</span>, skip : Int32? = <span class=\"n\">nil</span>, sort = <span class=\"n\">nil</span>) : Cursor::Wrapper(File(BSON::Value))","source_link":null,"def":{"name":"find","args":[{"name":"filter","doc":null,"default_value":"BSON.new","external_name":"filter","restriction":""},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"allow_disk_use","doc":null,"default_value":"nil","external_name":"allow_disk_use","restriction":"Bool | ::Nil"},{"name":"batch_size","doc":null,"default_value":"nil","external_name":"batch_size","restriction":"Int32 | ::Nil"},{"name":"limit","doc":null,"default_value":"nil","external_name":"limit","restriction":"Int32 | ::Nil"},{"name":"max_time_ms","doc":null,"default_value":"nil","external_name":"max_time_ms","restriction":"Int64 | ::Nil"},{"name":"no_cursor_timeout","doc":null,"default_value":"nil","external_name":"no_cursor_timeout","restriction":"Bool | ::Nil"},{"name":"skip","doc":null,"default_value":"nil","external_name":"skip","restriction":"Int32 | ::Nil"},{"name":"sort","doc":null,"default_value":"nil","external_name":"sort","restriction":""}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"Cursor::Wrapper(File(BSON::Value))","visibility":"Public","body":"cursor = bucket.find(filter, allow_disk_use: allow_disk_use, batch_size: batch_size, limit: batch_size, max_time_ms: batch_size, no_cursor_timeout: batch_size, skip: batch_size, sort: sort, read_concern: read_concern, read_preference: read_preference)\nCursor::Wrapper(File(BSON::Value)).new(cursor)\n"}},{"id":"open_download_stream(id:FileID):IOforallFileID-instance-method","html_id":"open_download_stream(id:FileID):IOforallFileID-instance-method","name":"open_download_stream","doc":"Opens a Stream from which the application can read the contents of the stored file\nspecified by *id*.\n\nReturns a `IO` stream.\n\n```\ngridfs = client[\"database\"].grid_fs\nid = BSON::ObjectId.new(\"5eed35600000000000000000\")\nstream = gridfs.open_download_stream(id)\nputs stream.gets_to_end\nstream.close\n```","summary":"<p>Opens a Stream from which the application can read the contents of the stored file specified by <em>id</em>.</p>","abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"FileID"}],"args_string":"(id : FileID) : IO forall FileID","source_link":null,"def":{"name":"open_download_stream","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"FileID"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"IO","visibility":"Public","body":"file = get_file(id)\ncount = chunk_count(file)\nremaining = file.length\nreader, writer = IO.pipe\nreader.buffer_size = file.chunk_size.to_i32\nwriter.buffer_size = file.chunk_size.to_i32\nspawn(same_thread: true) do\n  begin\n    count.times do |n|\n      chunk = get_chunk(id, n)\n      integrity_check!(file, chunk, remaining)\n      writer.write(chunk.data)\n      remaining = remaining - chunk.data.size\n    end\n  ensure\n    writer.close\n  end\nend\nreader\n"}},{"id":"open_download_stream_by_name(filename:String,revision:Int32=-1):IO-instance-method","html_id":"open_download_stream_by_name(filename:String,revision:Int32=-1):IO-instance-method","name":"open_download_stream_by_name","doc":"Opens a `IO` stream from which the application can read the contents of the stored file\nspecified by *filename* and an optional *revision*.\n\nReturns a `IO` stream.\n\nNOTE: It is the responsbility of the caller to close the stream.\n\n```\ngridfs = client[\"database\"].grid_fs\nstream = gridfs.open_download_stream_by_name(\"file\", revision: 2)\nputs stream.gets_to_end\nstream.close\n```\n\n#### About the the *revision* argument:\n\nSpecifies which revision (documents with the same filename and different uploadDate)\nof the file to retrieve. Defaults to -1 (the most recent revision).\n\nRevision numbers are defined as follows:\n- 0 = the original stored file\n- 1 = the first revision\n- 2 = the second revision\n\netc…\n\n- -2 = the second most recent revision\n- -1 = the most recent revision","summary":"<p>Opens a <code>IO</code> stream from which the application can read the contents of the stored file specified by <em>filename</em> and an optional <em>revision</em>.</p>","abstract":false,"args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":"String"},{"name":"revision","doc":null,"default_value":"-1","external_name":"revision","restriction":"Int32"}],"args_string":"(filename : String, revision : Int32 = <span class=\"n\">-1</span>) : IO","source_link":null,"def":{"name":"open_download_stream_by_name","args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":"String"},{"name":"revision","doc":null,"default_value":"-1","external_name":"revision","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"IO","visibility":"Public","body":"file = get_file_by_name(filename, revision)\ncount = chunk_count(file)\nreader, writer = IO.pipe\nreader.buffer_size = file.chunk_size.to_i32\nwriter.buffer_size = file.chunk_size.to_i32\nspawn(same_thread: true) do\n  begin\n    remaining = file.length\n    count.times do |n|\n      chunk = get_chunk(file._id, n)\n      integrity_check!(file, chunk, remaining)\n      writer.write(chunk.data)\n      remaining = remaining - chunk.data.size\n    end\n  ensure\n    writer.close\n  end\nend\nreader\n"}},{"id":"open_upload_stream(filename:String,*,id=nil,chunk_size_bytes:Int32?=nil,metadata=nil):IO-instance-method","html_id":"open_upload_stream(filename:String,*,id=nil,chunk_size_bytes:Int32?=nil,metadata=nil):IO-instance-method","name":"open_upload_stream","doc":"Opens an `IO` stream that the caller can write the contents of the file to.\n\nNOTE: It is the responsbility of the caller to flush and close the stream.\n\n```\ngridfs = client[\"database\"].grid_fs\nio = gridfs.open_upload_stream(filename: \"file.txt\", chunk_size_bytes: 1024, metadata: {hello: \"world\"})\nio << \"some\" << \"text\"\nio.flush\nio.close\nsleep 1\n```","summary":"<p>Opens an <code>IO</code> stream that the caller can write the contents of the file to.</p>","abstract":false,"args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":"String"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"id","doc":null,"default_value":"nil","external_name":"id","restriction":""},{"name":"chunk_size_bytes","doc":null,"default_value":"nil","external_name":"chunk_size_bytes","restriction":"Int32 | ::Nil"},{"name":"metadata","doc":null,"default_value":"nil","external_name":"metadata","restriction":""}],"args_string":"(filename : String, *, id = <span class=\"n\">nil</span>, chunk_size_bytes : Int32? = <span class=\"n\">nil</span>, metadata = <span class=\"n\">nil</span>) : IO","source_link":null,"def":{"name":"open_upload_stream","args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":"String"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"id","doc":null,"default_value":"nil","external_name":"id","restriction":""},{"name":"chunk_size_bytes","doc":null,"default_value":"nil","external_name":"chunk_size_bytes","restriction":"Int32 | ::Nil"},{"name":"metadata","doc":null,"default_value":"nil","external_name":"metadata","restriction":""}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"IO","visibility":"Public","body":"id || (id = BSON::ObjectId.new)\nchunk_size : Int32 = chunk_size_bytes || @chunk_size_bytes\ncheck_indexes(bucket, chunks)\nreader, writer = IO.pipe\nreader.buffer_size = chunk_size\nwriter.buffer_size = chunk_size\nspawn(same_thread: true) do\n  begin\n    index = 0\n    length = 0_i64\n    buffer = Bytes.new(chunk_size)\n    loop do\n      begin\n        read_bytes = fill_slice(reader, buffer.to_slice)\n        if read_bytes == 0\n          break\n        end\n        data = buffer.to_slice[0, read_bytes]\n        chunks.insert_one({files_id: id, n: index, data: data}, write_concern: write_concern)\n        length = length + read_bytes\n        index = index + 1_i64\n        if read_bytes < chunk_size\n          break\n        end\n      rescue IO::EOFError\n        break\n      end\n    end\n    bucket.insert_one({_id: id, length: length, chunkSize: chunk_size, uploadDate: Time.utc, filename: filename, metadata: metadata}, write_concern: write_concern)\n  ensure\n    reader.close\n  end\nend\nwriter\n"}},{"id":"open_upload_stream(filename:String,*,id:FileID=nil,chunk_size_bytes:Int32?=nil,metadata=nil,&)forallFileID-instance-method","html_id":"open_upload_stream(filename:String,*,id:FileID=nil,chunk_size_bytes:Int32?=nil,metadata=nil,&)forallFileID-instance-method","name":"open_upload_stream","doc":"Yields an `IO` stream that the caller can write the contents of the file to.\n\nNOTE: Will flush and close the stream after the block gets executed.\n\n```\ngridfs = client[\"database\"].grid_fs\ngridfs.open_upload_stream(filename: \"file.txt\", chunk_size_bytes: 1024, metadata: {hello: \"world\"}) { |io|\n io << \"some text\"\n}\nsleep 1\n```","summary":"<p>Yields an <code>IO</code> stream that the caller can write the contents of the file to.</p>","abstract":false,"args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":"String"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"id","doc":null,"default_value":"nil","external_name":"id","restriction":"FileID"},{"name":"chunk_size_bytes","doc":null,"default_value":"nil","external_name":"chunk_size_bytes","restriction":"Int32 | ::Nil"},{"name":"metadata","doc":null,"default_value":"nil","external_name":"metadata","restriction":""}],"args_string":"(filename : String, *, id : FileID = <span class=\"n\">nil</span>, chunk_size_bytes : Int32? = <span class=\"n\">nil</span>, metadata = <span class=\"n\">nil</span>, &) forall FileID","source_link":null,"def":{"name":"open_upload_stream","args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":"String"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"id","doc":null,"default_value":"nil","external_name":"id","restriction":"FileID"},{"name":"chunk_size_bytes","doc":null,"default_value":"nil","external_name":"chunk_size_bytes","restriction":"Int32 | ::Nil"},{"name":"metadata","doc":null,"default_value":"nil","external_name":"metadata","restriction":""}],"double_splat":null,"splat_index":1,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"id || (id = BSON::ObjectId.new)\nstream = open_upload_stream(filename, id: id, chunk_size_bytes: chunk_size_bytes, metadata: metadata)\nyield stream\nstream.flush\nFiber.yield\nstream.close\nid\n"}},{"id":"rename(id:FileID,new_filename:String):NilforallFileID-instance-method","html_id":"rename(id:FileID,new_filename:String):NilforallFileID-instance-method","name":"rename","doc":"Renames the stored file with the specified *id*.\n\n```\ngridfs = client[\"database\"].grid_fs\nid = BSON::ObjectId.new(\"5eed35600000000000000000\")\ngridfs.rename(id, new_filename: \"new_name.txt\")\n```","summary":"<p>Renames the stored file with the specified <em>id</em>.</p>","abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"FileID"},{"name":"new_filename","doc":null,"default_value":"","external_name":"new_filename","restriction":"String"}],"args_string":"(id : FileID, new_filename : String) : Nil forall FileID","source_link":null,"def":{"name":"rename","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"FileID"},{"name":"new_filename","doc":null,"default_value":"","external_name":"new_filename","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"bucket.update_one({_id: id}, {\"$set\": {filename: new_filename}})"}},{"id":"upload_from_stream(filename:String,stream:IO,*,id:FileID=nil,chunk_size_bytes:Int32?=nil,metadata=nil)forallFileID-instance-method","html_id":"upload_from_stream(filename:String,stream:IO,*,id:FileID=nil,chunk_size_bytes:Int32?=nil,metadata=nil)forallFileID-instance-method","name":"upload_from_stream","doc":"Uploads a user file to a GridFS bucket.\n\nThe application supplies a custom file id or the driver will generate the file id.\n\nReads the contents of the user file from the *source* Stream and uploads it\nas chunks in the chunks collection. After all the chunks have been uploaded,\nit creates a files collection document for *filename* in the files collection.\n\nReturns the id of the uploaded file.\n\nNOTE: It is the responsbility of the caller to flush and close the stream.\n\n```\ngridfs = client[\"database\"].grid_fs\nfile = File.new(\"file.txt\")\nid = gridfs.upload_from_stream(\"file.txt\", file)\nfile.close\nputs id\n```","summary":"<p>Uploads a user file to a GridFS bucket.</p>","abstract":false,"args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":"String"},{"name":"stream","doc":null,"default_value":"","external_name":"stream","restriction":"IO"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"id","doc":null,"default_value":"nil","external_name":"id","restriction":"FileID"},{"name":"chunk_size_bytes","doc":null,"default_value":"nil","external_name":"chunk_size_bytes","restriction":"Int32 | ::Nil"},{"name":"metadata","doc":null,"default_value":"nil","external_name":"metadata","restriction":""}],"args_string":"(filename : String, stream : IO, *, id : FileID = <span class=\"n\">nil</span>, chunk_size_bytes : Int32? = <span class=\"n\">nil</span>, metadata = <span class=\"n\">nil</span>) forall FileID","source_link":null,"def":{"name":"upload_from_stream","args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":"String"},{"name":"stream","doc":null,"default_value":"","external_name":"stream","restriction":"IO"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"id","doc":null,"default_value":"nil","external_name":"id","restriction":"FileID"},{"name":"chunk_size_bytes","doc":null,"default_value":"nil","external_name":"chunk_size_bytes","restriction":"Int32 | ::Nil"},{"name":"metadata","doc":null,"default_value":"nil","external_name":"metadata","restriction":""}],"double_splat":null,"splat_index":2,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"id || (id = BSON::ObjectId.new)\nchunk_size_bytes || (chunk_size_bytes = @chunk_size_bytes)\ncheck_indexes(bucket, chunks)\nindex = 0\nlength = 0_i64\nbuffer = Bytes.new(chunk_size_bytes)\nwhile (read_bytes = stream.read(buffer.to_slice)) > 0\n  data = buffer.to_slice[0, read_bytes]\n  chunks.insert_one({files_id: id, n: index, data: data}, write_concern: write_concern)\n  length = length + read_bytes\n  index = index + 1_i64\nend\nbucket.insert_one({_id: id, length: length, chunkSize: chunk_size_bytes, uploadDate: Time.utc, filename: filename, metadata: metadata}, write_concern: write_concern)\nid\n"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/GridFS/File","path":"Mongo/GridFS/File.html","kind":"struct","full_name":"Mongo::GridFS::File(FileID)","name":"File","abstract":false,"superclass":{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cryomongo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo/GridFS","kind":"module","full_name":"Mongo::GridFS","name":"GridFS"},"doc":"A GridFS file document.","summary":"<p>A GridFS file document.</p>","class_methods":[{"id":"from_bson(bson:BSON)-class-method","html_id":"from_bson(bson:BSON)-class-method","name":"from_bson","doc":"NOTE: See `self.new`.","summary":"<p><span class=\"flag purple\">NOTE</span>  See <code>self<a href=\"../../Mongo/GridFS/File.html#new(bson:BSON)-class-method\">.new</a></code>.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"from_bson","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.new(bson)"}}],"constructors":[{"id":"new(bson:BSON)-class-method","html_id":"new(bson:BSON)-class-method","name":"new","doc":"Allocate an instance and copies data from a BSON struct.\n\n```\nclass User\n  include BSON::Serializable\n  property name : String\nend\n\ndata = BSON.new\ndata[\"name\"] = \"John\"\nUser.new(data)\n```","summary":"<p>Allocate an instance and copies data from a BSON struct.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"new","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = File(FileID).allocate\n_.initialize(bson)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"_id:FileID-instance-method","html_id":"_id:FileID-instance-method","name":"_id","doc":"A unique ID for this document. Usually this will be of type ObjectId, but a custom _id value provided by the application may be of any type.","summary":"<p>A unique ID for this document.</p>","abstract":false,"args":[],"args_string":" : FileID","source_link":null,"def":{"name":"_id","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"FileID","visibility":"Public","body":"@_id"}},{"id":"_id=(_id:FileID)-instance-method","html_id":"_id=(_id:FileID)-instance-method","name":"_id=","doc":"A unique ID for this document. Usually this will be of type ObjectId, but a custom _id value provided by the application may be of any type.","summary":"<p>A unique ID for this document.</p>","abstract":false,"args":[{"name":"_id","doc":null,"default_value":"","external_name":"_id","restriction":"FileID"}],"args_string":"(_id : FileID)","source_link":null,"def":{"name":"_id=","args":[{"name":"_id","doc":null,"default_value":"","external_name":"_id","restriction":"FileID"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@_id = _id"}},{"id":"chunk_size:Int64-instance-method","html_id":"chunk_size:Int64-instance-method","name":"chunk_size","doc":"The size, in bytes, of each data chunk of this file. This value is configurable by file. The default is 255 KiB.","summary":"<p>The size, in bytes, of each data chunk of this file.</p>","abstract":false,"args":[],"args_string":" : Int64","source_link":null,"def":{"name":"chunk_size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int64","visibility":"Public","body":"@chunk_size"}},{"id":"chunk_size=(chunk_size:Int64)-instance-method","html_id":"chunk_size=(chunk_size:Int64)-instance-method","name":"chunk_size=","doc":"The size, in bytes, of each data chunk of this file. This value is configurable by file. The default is 255 KiB.","summary":"<p>The size, in bytes, of each data chunk of this file.</p>","abstract":false,"args":[{"name":"chunk_size","doc":null,"default_value":"","external_name":"chunk_size","restriction":"Int64"}],"args_string":"(chunk_size : Int64)","source_link":null,"def":{"name":"chunk_size=","args":[{"name":"chunk_size","doc":null,"default_value":"","external_name":"chunk_size","restriction":"Int64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@chunk_size = chunk_size"}},{"id":"filename:String-instance-method","html_id":"filename:String-instance-method","name":"filename","doc":"The name of this stored file; this does not need to be unique.","summary":"<p>The name of this stored file; this does not need to be unique.</p>","abstract":false,"args":[],"args_string":" : String","source_link":null,"def":{"name":"filename","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@filename"}},{"id":"filename=(filename:String)-instance-method","html_id":"filename=(filename:String)-instance-method","name":"filename=","doc":"The name of this stored file; this does not need to be unique.","summary":"<p>The name of this stored file; this does not need to be unique.</p>","abstract":false,"args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":"String"}],"args_string":"(filename : String)","source_link":null,"def":{"name":"filename=","args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@filename = filename"}},{"id":"length:Int64-instance-method","html_id":"length:Int64-instance-method","name":"length","doc":"The length of this stored file, in bytes.","summary":"<p>The length of this stored file, in bytes.</p>","abstract":false,"args":[],"args_string":" : Int64","source_link":null,"def":{"name":"length","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int64","visibility":"Public","body":"@length"}},{"id":"length=(length:Int64)-instance-method","html_id":"length=(length:Int64)-instance-method","name":"length=","doc":"The length of this stored file, in bytes.","summary":"<p>The length of this stored file, in bytes.</p>","abstract":false,"args":[{"name":"length","doc":null,"default_value":"","external_name":"length","restriction":"Int64"}],"args_string":"(length : Int64)","source_link":null,"def":{"name":"length=","args":[{"name":"length","doc":null,"default_value":"","external_name":"length","restriction":"Int64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@length = length"}},{"id":"metadata:BSON?-instance-method","html_id":"metadata:BSON?-instance-method","name":"metadata","doc":"Any additional application data the user wishes to store.","summary":"<p>Any additional application data the user wishes to store.</p>","abstract":false,"args":[],"args_string":" : BSON?","source_link":null,"def":{"name":"metadata","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON | ::Nil","visibility":"Public","body":"@metadata"}},{"id":"metadata=(metadata:BSON?)-instance-method","html_id":"metadata=(metadata:BSON?)-instance-method","name":"metadata=","doc":"Any additional application data the user wishes to store.","summary":"<p>Any additional application data the user wishes to store.</p>","abstract":false,"args":[{"name":"metadata","doc":null,"default_value":"","external_name":"metadata","restriction":"BSON | ::Nil"}],"args_string":"(metadata : BSON?)","source_link":null,"def":{"name":"metadata=","args":[{"name":"metadata","doc":null,"default_value":"","external_name":"metadata","restriction":"BSON | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@metadata = metadata"}},{"id":"to_bson(bson=BSON.new)-instance-method","html_id":"to_bson(bson=BSON.new)-instance-method","name":"to_bson","doc":"Converts to a BSON representation.\n\n```\nuser = User.new name: \"John\"\nbson = user.to_bson\n```","summary":"<p>Converts to a BSON representation.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"args_string":"(bson = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>)","source_link":null,"def":{"name":"to_bson","args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n      {% global_options = @type.annotations(BSON::Options) %}\n      {% camelize = global_options.reduce(false) do |_, a|\n  a[:camelize]\nend %}\n      {% for ivar in @type.instance_vars %}\n        {% ann = ivar.annotation(BSON::Field) %}\n        {% typ = ivar.type.union_types.select do |t|\n  t != Nil\nend[0] %}\n        {% key = ivar.name %}\n        {% bson_key = ann ? ann[:key].id : camelize ? ivar.name.camelcase(lower: camelize == \"lower\") : ivar.name %}\n        {% if ann && ann[:ignore] %}{% else %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            unless self.{{ key }}.nil?\n          {% end %}\n            {% if typ.has_method?(:to_bson) %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}.try &.to_bson\n            {% else %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}\n            {% end %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            end\n          {% end %}\n        {% end %}\n      {% end %}\n      {% end %}\nbson\n"}},{"id":"upload_date:Time-instance-method","html_id":"upload_date:Time-instance-method","name":"upload_date","doc":"The date and time this file was added to GridFS, stored as a BSON datetime value.","summary":"<p>The date and time this file was added to GridFS, stored as a BSON datetime value.</p>","abstract":false,"args":[],"args_string":" : Time","source_link":null,"def":{"name":"upload_date","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Time","visibility":"Public","body":"@upload_date"}},{"id":"upload_date=(upload_date:Time)-instance-method","html_id":"upload_date=(upload_date:Time)-instance-method","name":"upload_date=","doc":"The date and time this file was added to GridFS, stored as a BSON datetime value.","summary":"<p>The date and time this file was added to GridFS, stored as a BSON datetime value.</p>","abstract":false,"args":[{"name":"upload_date","doc":null,"default_value":"","external_name":"upload_date","restriction":"Time"}],"args_string":"(upload_date : Time)","source_link":null,"def":{"name":"upload_date=","args":[{"name":"upload_date","doc":null,"default_value":"","external_name":"upload_date","restriction":"Time"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@upload_date = upload_date"}}],"macros":[],"types":[]}]},{"html_id":"cryomongo/Mongo/Options","path":"Mongo/Options.html","kind":"struct","full_name":"Mongo::Options","name":"Options","abstract":false,"superclass":{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cryomongo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo","kind":"module","full_name":"Mongo","name":"Mongo"},"doc":"A set of options used to configure the driver.\n\nNOTE: [For more details, see the uri options specification document](https://github.com/mongodb/specifications/blob/master/source/uri-options/uri-options.rst).","summary":"<p>A set of options used to configure the driver.</p>","class_methods":[],"constructors":[{"id":"new(options_hash:HTTP::Params)-class-method","html_id":"new(options_hash:HTTP::Params)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"options_hash","doc":null,"default_value":"","external_name":"options_hash","restriction":"HTTP::Params"}],"args_string":"(options_hash : HTTP::Params)","source_link":null,"def":{"name":"new","args":[{"name":"options_hash","doc":null,"default_value":"","external_name":"options_hash","restriction":"HTTP::Params"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(options_hash)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"appname:String?-instance-method","html_id":"appname:String?-instance-method","name":"appname","doc":"Passed into the server in the client metadata as part of the connection handshake","summary":"<p>Passed into the server in the client metadata as part of the connection handshake</p>","abstract":false,"args":[],"args_string":" : String?","source_link":null,"def":{"name":"appname","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"@appname"}},{"id":"auth_mechanism:String?-instance-method","html_id":"auth_mechanism:String?-instance-method","name":"auth_mechanism","doc":"The authentication mechanism method to use for connection to the server","summary":"<p>The authentication mechanism method to use for connection to the server</p>","abstract":false,"args":[],"args_string":" : String?","source_link":null,"def":{"name":"auth_mechanism","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"@auth_mechanism"}},{"id":"auth_mechanism_properties:String?-instance-method","html_id":"auth_mechanism_properties:String?-instance-method","name":"auth_mechanism_properties","doc":"Additional options provided for authentication (e.g. to enable hostname canonicalization for GSSAPI)","summary":"<p>Additional options provided for authentication (e.g.</p>","abstract":false,"args":[],"args_string":" : String?","source_link":null,"def":{"name":"auth_mechanism_properties","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"@auth_mechanism_properties"}},{"id":"auth_source:String?-instance-method","html_id":"auth_source:String?-instance-method","name":"auth_source","doc":"The database that connections should authenticate against","summary":"<p>The database that connections should authenticate against</p>","abstract":false,"args":[],"args_string":" : String?","source_link":null,"def":{"name":"auth_source","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"@auth_source"}},{"id":"compressors:String?-instance-method","html_id":"compressors:String?-instance-method","name":"compressors","doc":"The list of allowed compression types for wire protocol messages sent or received from the server","summary":"<p>The list of allowed compression types for wire protocol messages sent or received from the server</p>","abstract":false,"args":[],"args_string":" : String?","source_link":null,"def":{"name":"compressors","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"@compressors"}},{"id":"connect_timeout:Time::Span?-instance-method","html_id":"connect_timeout:Time::Span?-instance-method","name":"connect_timeout","doc":"Amount of time to wait for a single TCP socket connection to the server to be established before erroring; note that this applies to SDAM isMaster operations","summary":"<p>Amount of time to wait for a single TCP socket connection to the server to be established before erroring; note that this applies to SDAM isMaster operations</p>","abstract":false,"args":[],"args_string":" : Time::Span?","source_link":null,"def":{"name":"connect_timeout","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Time::Span | ::Nil","visibility":"Public","body":"@connect_timeout"}},{"id":"direct_connection:Bool?-instance-method","html_id":"direct_connection:Bool?-instance-method","name":"direct_connection","doc":"10.seconds\nWhether to connect to the deployment in Single topology.\nWhether to connect to the deployment in Single topology.\nWhether to connect to the deployment in Single topology.\nWhether to connect to the deployment in Single topology.","summary":"<ol><li>seconds Whether to connect to the deployment in Single topology.</li></ol>","abstract":false,"args":[],"args_string":" : Bool?","source_link":null,"def":{"name":"direct_connection","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool | ::Nil","visibility":"Public","body":"@direct_connection"}},{"id":"heartbeat_frequency:Time::Span-instance-method","html_id":"heartbeat_frequency:Time::Span-instance-method","name":"heartbeat_frequency","doc":"The interval between regular server monitoring checks","summary":"<p>The interval between regular server monitoring checks</p>","abstract":false,"args":[],"args_string":" : Time::Span","source_link":null,"def":{"name":"heartbeat_frequency","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Time::Span","visibility":"Public","body":"@heartbeat_frequency"}},{"id":"heartbeat_frequency=(heartbeat_frequency:Time::Span)-instance-method","html_id":"heartbeat_frequency=(heartbeat_frequency:Time::Span)-instance-method","name":"heartbeat_frequency=","doc":"The interval between regular server monitoring checks","summary":"<p>The interval between regular server monitoring checks</p>","abstract":false,"args":[{"name":"heartbeat_frequency","doc":null,"default_value":"","external_name":"heartbeat_frequency","restriction":"Time::Span"}],"args_string":"(heartbeat_frequency : Time::Span)","source_link":null,"def":{"name":"heartbeat_frequency=","args":[{"name":"heartbeat_frequency","doc":null,"default_value":"","external_name":"heartbeat_frequency","restriction":"Time::Span"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@heartbeat_frequency = heartbeat_frequency"}},{"id":"journal:Bool?-instance-method","html_id":"journal:Bool?-instance-method","name":"journal","doc":"Default write concern \"j\" field for the client","summary":"<p>Default write concern \"j\" field for the client</p>","abstract":false,"args":[],"args_string":" : Bool?","source_link":null,"def":{"name":"journal","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool | ::Nil","visibility":"Public","body":"@journal"}},{"id":"local_threshold:Time::Span-instance-method","html_id":"local_threshold:Time::Span-instance-method","name":"local_threshold","doc":"The amount of time beyond the fastest round trip time that a given server’s round trip time can take and still be eligible for server selection","summary":"<p>The amount of time beyond the fastest round trip time that a given server’s round trip time can take and still be eligible for server selection</p>","abstract":false,"args":[],"args_string":" : Time::Span","source_link":null,"def":{"name":"local_threshold","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Time::Span","visibility":"Public","body":"@local_threshold"}},{"id":"max_idle_time:Time::Span?-instance-method","html_id":"max_idle_time:Time::Span?-instance-method","name":"max_idle_time","doc":"The amount of time a connection can be idle before it's closed","summary":"<p>The amount of time a connection can be idle before it's closed</p>","abstract":false,"args":[],"args_string":" : Time::Span?","source_link":null,"def":{"name":"max_idle_time","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Time::Span | ::Nil","visibility":"Public","body":"@max_idle_time"}},{"id":"max_pool_size:Int32-instance-method","html_id":"max_pool_size:Int32-instance-method","name":"max_pool_size","doc":"The maximum number of clients or connections able to be created by a pool at a given time","summary":"<p>The maximum number of clients or connections able to be created by a pool at a given time</p>","abstract":false,"args":[],"args_string":" : Int32","source_link":null,"def":{"name":"max_pool_size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@max_pool_size"}},{"id":"max_staleness_seconds:Int32?-instance-method","html_id":"max_staleness_seconds:Int32?-instance-method","name":"max_staleness_seconds","doc":"The maximum replication lag, in wall clock time, that a secondary can suffer and still be eligible for server selection","summary":"<p>The maximum replication lag, in wall clock time, that a secondary can suffer and still be eligible for server selection</p>","abstract":false,"args":[],"args_string":" : Int32?","source_link":null,"def":{"name":"max_staleness_seconds","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32 | ::Nil","visibility":"Public","body":"@max_staleness_seconds"}},{"id":"min_pool_size:Int32-instance-method","html_id":"min_pool_size:Int32-instance-method","name":"min_pool_size","doc":"The maximum number of clients or connections able to be created by a pool at a given time","summary":"<p>The maximum number of clients or connections able to be created by a pool at a given time</p>","abstract":false,"args":[],"args_string":" : Int32","source_link":null,"def":{"name":"min_pool_size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@min_pool_size"}},{"id":"raw:HTTP::Params-instance-method","html_id":"raw:HTTP::Params-instance-method","name":"raw","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : HTTP::Params","source_link":null,"def":{"name":"raw","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"HTTP::Params","visibility":"Public","body":"@raw"}},{"id":"read_concern_level:String?-instance-method","html_id":"read_concern_level:String?-instance-method","name":"read_concern_level","doc":"Default read concern for the client","summary":"<p>Default read concern for the client</p>","abstract":false,"args":[],"args_string":" : String?","source_link":null,"def":{"name":"read_concern_level","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"@read_concern_level"}},{"id":"read_preference:String?-instance-method","html_id":"read_preference:String?-instance-method","name":"read_preference","doc":"Default read preference for the client (excluding tags)","summary":"<p>Default read preference for the client (excluding tags)</p>","abstract":false,"args":[],"args_string":" : String?","source_link":null,"def":{"name":"read_preference","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"@read_preference"}},{"id":"read_preference_tags:Array(String)-instance-method","html_id":"read_preference_tags:Array(String)-instance-method","name":"read_preference_tags","doc":"Default read preference tags for the client; only valid if the read preference mode is not primary","summary":"<p>Default read preference tags for the client; only valid if the read preference mode is not primary</p>","abstract":false,"args":[],"args_string":" : Array(String)","source_link":null,"def":{"name":"read_preference_tags","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(String)","visibility":"Public","body":"@read_preference_tags"}},{"id":"replica_set:String?-instance-method","html_id":"replica_set:String?-instance-method","name":"replica_set","doc":"The name of the replica set to connect to","summary":"<p>The name of the replica set to connect to</p>","abstract":false,"args":[],"args_string":" : String?","source_link":null,"def":{"name":"replica_set","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"@replica_set"}},{"id":"retry_reads:Bool?-instance-method","html_id":"retry_reads:Bool?-instance-method","name":"retry_reads","doc":"Enables retryable reads on server 3.6+","summary":"<p>Enables retryable reads on server 3.6+</p>","abstract":false,"args":[],"args_string":" : Bool?","source_link":null,"def":{"name":"retry_reads","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool | ::Nil","visibility":"Public","body":"@retry_reads"}},{"id":"retry_writes:Bool?-instance-method","html_id":"retry_writes:Bool?-instance-method","name":"retry_writes","doc":"Enables retryable writes on server 3.6+","summary":"<p>Enables retryable writes on server 3.6+</p>","abstract":false,"args":[],"args_string":" : Bool?","source_link":null,"def":{"name":"retry_writes","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool | ::Nil","visibility":"Public","body":"@retry_writes"}},{"id":"server_selection_timeout:Time::Span-instance-method","html_id":"server_selection_timeout:Time::Span-instance-method","name":"server_selection_timeout","doc":"A timeout in milliseconds to block for server selection before raising an error","summary":"<p>A timeout in milliseconds to block for server selection before raising an error</p>","abstract":false,"args":[],"args_string":" : Time::Span","source_link":null,"def":{"name":"server_selection_timeout","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Time::Span","visibility":"Public","body":"@server_selection_timeout"}},{"id":"server_selection_timeout=(server_selection_timeout:Time::Span)-instance-method","html_id":"server_selection_timeout=(server_selection_timeout:Time::Span)-instance-method","name":"server_selection_timeout=","doc":"A timeout in milliseconds to block for server selection before raising an error","summary":"<p>A timeout in milliseconds to block for server selection before raising an error</p>","abstract":false,"args":[{"name":"server_selection_timeout","doc":null,"default_value":"","external_name":"server_selection_timeout","restriction":"Time::Span"}],"args_string":"(server_selection_timeout : Time::Span)","source_link":null,"def":{"name":"server_selection_timeout=","args":[{"name":"server_selection_timeout","doc":null,"default_value":"","external_name":"server_selection_timeout","restriction":"Time::Span"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@server_selection_timeout = server_selection_timeout"}},{"id":"server_selection_try_once:Bool-instance-method","html_id":"server_selection_try_once:Bool-instance-method","name":"server_selection_try_once","doc":"Scan the topology only once after a server selection failure instead of repeatedly until the server selection times out","summary":"<p>Scan the topology only once after a server selection failure instead of repeatedly until the server selection times out</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":null,"def":{"name":"server_selection_try_once","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@server_selection_try_once"}},{"id":"server_selection_try_once=(server_selection_try_once:Bool)-instance-method","html_id":"server_selection_try_once=(server_selection_try_once:Bool)-instance-method","name":"server_selection_try_once=","doc":"Scan the topology only once after a server selection failure instead of repeatedly until the server selection times out","summary":"<p>Scan the topology only once after a server selection failure instead of repeatedly until the server selection times out</p>","abstract":false,"args":[{"name":"server_selection_try_once","doc":null,"default_value":"","external_name":"server_selection_try_once","restriction":"Bool"}],"args_string":"(server_selection_try_once : Bool)","source_link":null,"def":{"name":"server_selection_try_once=","args":[{"name":"server_selection_try_once","doc":null,"default_value":"","external_name":"server_selection_try_once","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@server_selection_try_once = server_selection_try_once"}},{"id":"socket_timeout:Time::Span?-instance-method","html_id":"socket_timeout:Time::Span?-instance-method","name":"socket_timeout","doc":"Amount of time spent attempting to send or receive on a socket before timing out; note that this only applies to application operations, not SDAM","summary":"<p>Amount of time spent attempting to send or receive on a socket before timing out; note that this only applies to application operations, not SDAM</p>","abstract":false,"args":[],"args_string":" : Time::Span?","source_link":null,"def":{"name":"socket_timeout","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Time::Span | ::Nil","visibility":"Public","body":"@socket_timeout"}},{"id":"ssl:Bool?-instance-method","html_id":"ssl:Bool?-instance-method","name":"ssl","doc":"Alias of \"tls\"; required to ensure that Atlas connection strings continue to work","summary":"<p>Alias of \"tls\"; required to ensure that Atlas connection strings continue to work</p>","abstract":false,"args":[],"args_string":" : Bool?","source_link":null,"def":{"name":"ssl","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool | ::Nil","visibility":"Public","body":"@ssl"}},{"id":"tls:Bool?-instance-method","html_id":"tls:Bool?-instance-method","name":"tls","doc":"Whether or not to require TLS for connections to the server","summary":"<p>Whether or not to require TLS for connections to the server</p>","abstract":false,"args":[],"args_string":" : Bool?","source_link":null,"def":{"name":"tls","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool | ::Nil","visibility":"Public","body":"@tls"}},{"id":"tls_allow_invalid_certificates:Bool?-instance-method","html_id":"tls_allow_invalid_certificates:Bool?-instance-method","name":"tls_allow_invalid_certificates","doc":"Specifies whether or not the driver should error when the server’s TLS certificate is invalid","summary":"<p>Specifies whether or not the driver should error when the server’s TLS certificate is invalid</p>","abstract":false,"args":[],"args_string":" : Bool?","source_link":null,"def":{"name":"tls_allow_invalid_certificates","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool | ::Nil","visibility":"Public","body":"@tls_allow_invalid_certificates"}},{"id":"tls_allow_invalid_hostnames:Bool?-instance-method","html_id":"tls_allow_invalid_hostnames:Bool?-instance-method","name":"tls_allow_invalid_hostnames","doc":"Specifies whether or not the driver should error when there is a mismatch between the server’s hostname and the hostname specified by the TLS certificate","summary":"<p>Specifies whether or not the driver should error when there is a mismatch between the server’s hostname and the hostname specified by the TLS certificate</p>","abstract":false,"args":[],"args_string":" : Bool?","source_link":null,"def":{"name":"tls_allow_invalid_hostnames","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool | ::Nil","visibility":"Public","body":"@tls_allow_invalid_hostnames"}},{"id":"tls_ca_file:String?-instance-method","html_id":"tls_ca_file:String?-instance-method","name":"tls_ca_file","doc":"Path to file with either a single or bundle of certificate authorities to be considered trusted when making a TLS connection","summary":"<p>Path to file with either a single or bundle of certificate authorities to be considered trusted when making a TLS connection</p>","abstract":false,"args":[],"args_string":" : String?","source_link":null,"def":{"name":"tls_ca_file","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"@tls_ca_file"}},{"id":"tls_certificate_key_file:String?-instance-method","html_id":"tls_certificate_key_file:String?-instance-method","name":"tls_certificate_key_file","doc":"Path to the client certificate file or the client private key file; in the case that they both are needed, the files should be concatenated","summary":"<p>Path to the client certificate file or the client private key file; in the case that they both are needed, the files should be concatenated</p>","abstract":false,"args":[],"args_string":" : String?","source_link":null,"def":{"name":"tls_certificate_key_file","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"@tls_certificate_key_file"}},{"id":"tls_certificate_key_file_password:String?-instance-method","html_id":"tls_certificate_key_file_password:String?-instance-method","name":"tls_certificate_key_file_password","doc":"Password to decrypt the client private key to be used for TLS connections","summary":"<p>Password to decrypt the client private key to be used for TLS connections</p>","abstract":false,"args":[],"args_string":" : String?","source_link":null,"def":{"name":"tls_certificate_key_file_password","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"@tls_certificate_key_file_password"}},{"id":"tls_disable_certificate_revocation_check:Bool?-instance-method","html_id":"tls_disable_certificate_revocation_check:Bool?-instance-method","name":"tls_disable_certificate_revocation_check","doc":"Controls whether or not the driver will check a certificate's revocation status via CRLs or OCSP. See the OCSP Support Spec for additional information.","summary":"<p>Controls whether or not the driver will check a certificate's revocation status via CRLs or OCSP.</p>","abstract":false,"args":[],"args_string":" : Bool?","source_link":null,"def":{"name":"tls_disable_certificate_revocation_check","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool | ::Nil","visibility":"Public","body":"@tls_disable_certificate_revocation_check"}},{"id":"tls_disable_ocsp_endpoint_check:Bool?-instance-method","html_id":"tls_disable_ocsp_endpoint_check:Bool?-instance-method","name":"tls_disable_ocsp_endpoint_check","doc":"Controls whether or not the driver will reach out to OCSP endpoints if needed. See the OCSP Support Spec for additional information.","summary":"<p>Controls whether or not the driver will reach out to OCSP endpoints if needed.</p>","abstract":false,"args":[],"args_string":" : Bool?","source_link":null,"def":{"name":"tls_disable_ocsp_endpoint_check","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool | ::Nil","visibility":"Public","body":"@tls_disable_ocsp_endpoint_check"}},{"id":"tls_insecure:Bool?-instance-method","html_id":"tls_insecure:Bool?-instance-method","name":"tls_insecure","doc":"Relax TLS constraints as much as possible (e.g. allowing invalid certificates or hostname mismatches); drivers must document the exact constraints which are relaxed by this option being true","summary":"<p>Relax TLS constraints as much as possible (e.g.</p>","abstract":false,"args":[],"args_string":" : Bool?","source_link":null,"def":{"name":"tls_insecure","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool | ::Nil","visibility":"Public","body":"@tls_insecure"}},{"id":"validate(raw_hash)-instance-method","html_id":"validate(raw_hash)-instance-method","name":"validate","doc":null,"summary":null,"abstract":false,"args":[{"name":"raw_hash","doc":null,"default_value":"","external_name":"raw_hash","restriction":""}],"args_string":"(raw_hash)","source_link":null,"def":{"name":"validate","args":[{"name":"raw_hash","doc":null,"default_value":"","external_name":"raw_hash","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (raw_hash.has_key?(\"tlsinsecure\")) && (raw_hash.has_key?(\"tlsallowinvalidcertificates\"))\n  raise(Mongo::Error.new(\"tlsInsecure and tlsAllowInvalidCertificates cannot be both present\"))\nend\nif (raw_hash.has_key?(\"tlsinsecure\")) && (raw_hash.has_key?(\"tlsallowinvalidhostnames\"))\n  raise(Mongo::Error.new(\"tlsInsecure and tlsAllowInvalidHostnames cannot be both present\"))\nend\nif (raw_hash.has_key?(\"tlsdisablecertificaterevocationcheck\")) && (raw_hash.has_key?(\"tlsallowinvalidcertificates\"))\n  raise(Mongo::Error.new(\"tlsDisableCertificateRevocationCheck and tlsAllowInvalidCertificates cannot be both present\"))\nend\nif (raw_hash.has_key?(\"tlsinsecure\")) && (raw_hash.has_key?(\"tlsdisablecertificaterevocationcheck\"))\n  raise(Mongo::Error.new(\"tlsInsecure and tlsDisableCertificateRevocationCheck cannot be both present\"))\nend\nif (raw_hash.has_key?(\"tlsdisablecertificaterevocationcheck\")) && (raw_hash.has_key?(\"tlsdisableocspendpointcheck\"))\n  raise(Mongo::Error.new(\"tlsDisableCertificateRevocationCheck and tlsDisableOCSPEndpointCheck cannot be both present\"))\nend\nif (raw_hash.has_key?(\"tlsinsecure\")) && (raw_hash.has_key?(\"tlsdisableocspendpointcheck\"))\n  raise(Mongo::Error.new(\"tlsInsecure and tlsDisableOCSPEndpointCheck cannot be both present\"))\nend\nif (raw_hash.has_key?(\"tlsallowinvalidcertificates\")) && (raw_hash.has_key?(\"tlsdisableocspendpointcheck\"))\n  raise(Mongo::Error.new(\"tlsAllowInvalidCertificates and tlsDisableOCSPEndpointCheck cannot be both present\"))\nend\nif ((raw_hash.has_key?(\"tls\")) && (raw_hash.has_key?(\"ssl\"))) && (raw_hash[\"ssl\"] != raw_hash[\"tls\"])\n  raise(Mongo::Error.new(\"tls and ssl have different values\"))\nend\n"}},{"id":"w:Int32?-instance-method","html_id":"w:Int32?-instance-method","name":"w","doc":"Default write concern \"w\" field for the client","summary":"<p>Default write concern \"w\" field for the client</p>","abstract":false,"args":[],"args_string":" : Int32?","source_link":null,"def":{"name":"w","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32 | ::Nil","visibility":"Public","body":"@w"}},{"id":"w_timeout:Time::Span?-instance-method","html_id":"w_timeout:Time::Span?-instance-method","name":"w_timeout","doc":"Default write concern \"wtimeout\" field for the client","summary":"<p>Default write concern \"wtimeout\" field for the client</p>","abstract":false,"args":[],"args_string":" : Time::Span?","source_link":null,"def":{"name":"w_timeout","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Time::Span | ::Nil","visibility":"Public","body":"@w_timeout"}},{"id":"wait_queue_timeout:Time::Span?-instance-method","html_id":"wait_queue_timeout:Time::Span?-instance-method","name":"wait_queue_timeout","doc":"The maximum number of clients or connections able to be created by a pool at a given time","summary":"<p>The maximum number of clients or connections able to be created by a pool at a given time</p>","abstract":false,"args":[],"args_string":" : Time::Span?","source_link":null,"def":{"name":"wait_queue_timeout","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Time::Span | ::Nil","visibility":"Public","body":"@wait_queue_timeout"}},{"id":"zlib_compression_level:Int32?-instance-method","html_id":"zlib_compression_level:Int32?-instance-method","name":"zlib_compression_level","doc":"Specifies the level of compression when using zlib to compress wire protocol messages; -1 signifies the default level, 0 signifies no compression, 1 signifies the fastest speed, and 9 signifies the best compression","summary":"<p>Specifies the level of compression when using zlib to compress wire protocol messages; -1 signifies the default level, 0 signifies no compression, 1 signifies the fastest speed, and 9 signifies the best compression</p>","abstract":false,"args":[],"args_string":" : Int32?","source_link":null,"def":{"name":"zlib_compression_level","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32 | ::Nil","visibility":"Public","body":"@zlib_compression_level"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/ReadConcern","path":"Mongo/ReadConcern.html","kind":"struct","full_name":"Mongo::ReadConcern","name":"ReadConcern","abstract":false,"superclass":{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cryomongo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo","kind":"module","full_name":"Mongo","name":"Mongo"},"doc":"The readConcern option allows to control the consistency and isolation properties of the data read from replica sets and replica set shards.\n\nThrough the effective use of write concerns and read concerns, you can adjust the level of consistency and availability guarantees as appropriate,\nsuch as waiting for stronger consistency guarantees, or loosening consistency requirements to provide higher availability.\n\nSee: [the official documentation](https://docs.mongodb.com/manual/reference/read-concern/index.html)","summary":"<p>The readConcern option allows to control the consistency and isolation properties of the data read from replica sets and replica set shards.</p>","class_methods":[{"id":"from_bson(bson:BSON)-class-method","html_id":"from_bson(bson:BSON)-class-method","name":"from_bson","doc":"NOTE: See `self.new`.","summary":"<p><span class=\"flag purple\">NOTE</span>  See <code>self<a href=\"../Mongo/ReadConcern.html#new(bson:BSON)-class-method\">.new</a></code>.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"from_bson","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.new(bson)"}}],"constructors":[{"id":"new(bson:BSON)-class-method","html_id":"new(bson:BSON)-class-method","name":"new","doc":"Allocate an instance and copies data from a BSON struct.\n\n```\nclass User\n  include BSON::Serializable\n  property name : String\nend\n\ndata = BSON.new\ndata[\"name\"] = \"John\"\nUser.new(data)\n```","summary":"<p>Allocate an instance and copies data from a BSON struct.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"new","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(bson)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(level=nil)-class-method","html_id":"new(level=nil)-class-method","name":"new","doc":"Create a ReadConcern instance.","summary":"<p>Create a ReadConcern instance.</p>","abstract":false,"args":[{"name":"level","doc":null,"default_value":"nil","external_name":"level","restriction":""}],"args_string":"(level = <span class=\"n\">nil</span>)","source_link":null,"def":{"name":"new","args":[{"name":"level","doc":null,"default_value":"nil","external_name":"level","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(level)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"level:String?-instance-method","html_id":"level:String?-instance-method","name":"level","doc":"The read concern level.","summary":"<p>The read concern level.</p>","abstract":false,"args":[],"args_string":" : String?","source_link":null,"def":{"name":"level","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"@level"}},{"id":"level=(level:String?)-instance-method","html_id":"level=(level:String?)-instance-method","name":"level=","doc":"The read concern level.","summary":"<p>The read concern level.</p>","abstract":false,"args":[{"name":"level","doc":null,"default_value":"","external_name":"level","restriction":"String | ::Nil"}],"args_string":"(level : String?)","source_link":null,"def":{"name":"level=","args":[{"name":"level","doc":null,"default_value":"","external_name":"level","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@level = level"}},{"id":"to_bson(bson=BSON.new)-instance-method","html_id":"to_bson(bson=BSON.new)-instance-method","name":"to_bson","doc":"Converts to a BSON representation.\n\n```\nuser = User.new name: \"John\"\nbson = user.to_bson\n```","summary":"<p>Converts to a BSON representation.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"args_string":"(bson = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>)","source_link":null,"def":{"name":"to_bson","args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n      {% global_options = @type.annotations(BSON::Options) %}\n      {% camelize = global_options.reduce(false) do |_, a|\n  a[:camelize]\nend %}\n      {% for ivar in @type.instance_vars %}\n        {% ann = ivar.annotation(BSON::Field) %}\n        {% typ = ivar.type.union_types.select do |t|\n  t != Nil\nend[0] %}\n        {% key = ivar.name %}\n        {% bson_key = ann ? ann[:key].id : camelize ? ivar.name.camelcase(lower: camelize == \"lower\") : ivar.name %}\n        {% if ann && ann[:ignore] %}{% else %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            unless self.{{ key }}.nil?\n          {% end %}\n            {% if typ.has_method?(:to_bson) %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}.try &.to_bson\n            {% else %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}\n            {% end %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            end\n          {% end %}\n        {% end %}\n      {% end %}\n      {% end %}\nbson\n"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/ReadPreference","path":"Mongo/ReadPreference.html","kind":"struct","full_name":"Mongo::ReadPreference","name":"ReadPreference","abstract":false,"superclass":{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cryomongo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo","kind":"module","full_name":"Mongo","name":"Mongo"},"doc":"The read preference describes how MongoDB clients route read operations to the members of a replica set.\n\nSee: [the official documentation](https://docs.mongodb.com/manual/core/read-preference/index.html).","summary":"<p>The read preference describes how MongoDB clients route read operations to the members of a replica set.</p>","class_methods":[{"id":"from_bson(bson:BSON)-class-method","html_id":"from_bson(bson:BSON)-class-method","name":"from_bson","doc":"NOTE: See `self.new`.","summary":"<p><span class=\"flag purple\">NOTE</span>  See <code>self<a href=\"../Mongo/ReadPreference.html#new(mode:String,tags:Array(BSON)?=nil,max_staleness_seconds:Int32?=nil,hedge:BSON?=nil)-class-method\">.new</a></code>.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"from_bson","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.new(bson)"}}],"constructors":[{"id":"new(mode:String,tags:Array(BSON)?=nil,max_staleness_seconds:Int32?=nil,hedge:BSON?=nil)-class-method","html_id":"new(mode:String,tags:Array(BSON)?=nil,max_staleness_seconds:Int32?=nil,hedge:BSON?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"mode","doc":null,"default_value":"","external_name":"mode","restriction":"String"},{"name":"tags","doc":null,"default_value":"nil","external_name":"tags","restriction":"Array(BSON) | ::Nil"},{"name":"max_staleness_seconds","doc":null,"default_value":"nil","external_name":"max_staleness_seconds","restriction":"Int32 | ::Nil"},{"name":"hedge","doc":null,"default_value":"nil","external_name":"hedge","restriction":"BSON | ::Nil"}],"args_string":"(mode : String, tags : Array(BSON)? = <span class=\"n\">nil</span>, max_staleness_seconds : Int32? = <span class=\"n\">nil</span>, hedge : BSON? = <span class=\"n\">nil</span>)","source_link":null,"def":{"name":"new","args":[{"name":"mode","doc":null,"default_value":"","external_name":"mode","restriction":"String"},{"name":"tags","doc":null,"default_value":"nil","external_name":"tags","restriction":"Array(BSON) | ::Nil"},{"name":"max_staleness_seconds","doc":null,"default_value":"nil","external_name":"max_staleness_seconds","restriction":"Int32 | ::Nil"},{"name":"hedge","doc":null,"default_value":"nil","external_name":"hedge","restriction":"BSON | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(mode, tags, max_staleness_seconds, hedge)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(bson:BSON)-class-method","html_id":"new(bson:BSON)-class-method","name":"new","doc":"Allocate an instance and copies data from a BSON struct.\n\n```\nclass User\n  include BSON::Serializable\n  property name : String\nend\n\ndata = BSON.new\ndata[\"name\"] = \"John\"\nUser.new(data)\n```","summary":"<p>Allocate an instance and copies data from a BSON struct.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"new","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(bson)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.new(@mode.clone, @tags.clone, @max_staleness_seconds.clone, @hedge.clone)"}},{"id":"copy_with(mode_mode=@mode,tags_tags=@tags,max_staleness_seconds_max_staleness_seconds=@max_staleness_seconds,hedge_hedge=@hedge)-instance-method","html_id":"copy_with(mode_mode=@mode,tags_tags=@tags,max_staleness_seconds_max_staleness_seconds=@max_staleness_seconds,hedge_hedge=@hedge)-instance-method","name":"copy_with","doc":null,"summary":null,"abstract":false,"args":[{"name":"_mode","doc":null,"default_value":"@mode","external_name":"mode","restriction":""},{"name":"_tags","doc":null,"default_value":"@tags","external_name":"tags","restriction":""},{"name":"_max_staleness_seconds","doc":null,"default_value":"@max_staleness_seconds","external_name":"max_staleness_seconds","restriction":""},{"name":"_hedge","doc":null,"default_value":"@hedge","external_name":"hedge","restriction":""}],"args_string":"(mode _mode = @mode, tags _tags = @tags, max_staleness_seconds _max_staleness_seconds = @max_staleness_seconds, hedge _hedge = @hedge)","source_link":null,"def":{"name":"copy_with","args":[{"name":"_mode","doc":null,"default_value":"@mode","external_name":"mode","restriction":""},{"name":"_tags","doc":null,"default_value":"@tags","external_name":"tags","restriction":""},{"name":"_max_staleness_seconds","doc":null,"default_value":"@max_staleness_seconds","external_name":"max_staleness_seconds","restriction":""},{"name":"_hedge","doc":null,"default_value":"@hedge","external_name":"hedge","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.new(_mode, _tags, _max_staleness_seconds, _hedge)"}},{"id":"hedge:BSON?-instance-method","html_id":"hedge:BSON?-instance-method","name":"hedge","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON?","source_link":null,"def":{"name":"hedge","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BSON | ::Nil","visibility":"Public","body":"@hedge"}},{"id":"max_staleness_seconds:Int32?-instance-method","html_id":"max_staleness_seconds:Int32?-instance-method","name":"max_staleness_seconds","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32?","source_link":null,"def":{"name":"max_staleness_seconds","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32 | ::Nil","visibility":"Public","body":"@max_staleness_seconds"}},{"id":"mode:String-instance-method","html_id":"mode:String-instance-method","name":"mode","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":null,"def":{"name":"mode","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@mode"}},{"id":"tags:Array(BSON)?-instance-method","html_id":"tags:Array(BSON)?-instance-method","name":"tags","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(BSON)?","source_link":null,"def":{"name":"tags","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(BSON) | ::Nil","visibility":"Public","body":"@tags"}},{"id":"to_bson(bson=BSON.new)-instance-method","html_id":"to_bson(bson=BSON.new)-instance-method","name":"to_bson","doc":"Converts to a BSON representation.\n\n```\nuser = User.new name: \"John\"\nbson = user.to_bson\n```","summary":"<p>Converts to a BSON representation.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"args_string":"(bson = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>)","source_link":null,"def":{"name":"to_bson","args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n      {% global_options = @type.annotations(BSON::Options) %}\n      {% camelize = global_options.reduce(false) do |_, a|\n  a[:camelize]\nend %}\n      {% for ivar in @type.instance_vars %}\n        {% ann = ivar.annotation(BSON::Field) %}\n        {% typ = ivar.type.union_types.select do |t|\n  t != Nil\nend[0] %}\n        {% key = ivar.name %}\n        {% bson_key = ann ? ann[:key].id : camelize ? ivar.name.camelcase(lower: camelize == \"lower\") : ivar.name %}\n        {% if ann && ann[:ignore] %}{% else %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            unless self.{{ key }}.nil?\n          {% end %}\n            {% if typ.has_method?(:to_bson) %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}.try &.to_bson\n            {% else %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}\n            {% end %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            end\n          {% end %}\n        {% end %}\n      {% end %}\n      {% end %}\nbson\n"}}],"macros":[],"types":[]},{"html_id":"cryomongo/Mongo/WriteConcern","path":"Mongo/WriteConcern.html","kind":"struct","full_name":"Mongo::WriteConcern","name":"WriteConcern","abstract":false,"superclass":{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"},{"html_id":"cryomongo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cryomongo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cryomongo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"cryomongo","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"cryomongo/BSON/Serializable","kind":"module","full_name":"BSON::Serializable","name":"Serializable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"cryomongo/Mongo","kind":"module","full_name":"Mongo","name":"Mongo"},"doc":"Write concern describes the level of acknowledgment requested from MongoDB for write operations to a standalone mongod or to replica sets or to sharded clusters.\n\nIn sharded clusters, mongos instances will pass the write concern on to the shards.\n\nSee: [the official documentation](https://docs.mongodb.com/manual/reference/write-concern/index.html)","summary":"<p>Write concern describes the level of acknowledgment requested from MongoDB for write operations to a standalone mongod or to replica sets or to sharded clusters.</p>","class_methods":[{"id":"from_bson(bson:BSON)-class-method","html_id":"from_bson(bson:BSON)-class-method","name":"from_bson","doc":"NOTE: See `self.new`.","summary":"<p><span class=\"flag purple\">NOTE</span>  See <code>self<a href=\"../Mongo/WriteConcern.html#new(bson:BSON)-class-method\">.new</a></code>.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"from_bson","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.new(bson)"}}],"constructors":[{"id":"new(bson:BSON)-class-method","html_id":"new(bson:BSON)-class-method","name":"new","doc":"Allocate an instance and copies data from a BSON struct.\n\n```\nclass User\n  include BSON::Serializable\n  property name : String\nend\n\ndata = BSON.new\ndata[\"name\"] = \"John\"\nUser.new(data)\n```","summary":"<p>Allocate an instance and copies data from a BSON struct.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"args_string":"(bson : BSON)","source_link":null,"def":{"name":"new","args":[{"name":"bson","doc":null,"default_value":"","external_name":"bson","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(bson)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(j=nil,w=nil,wtimeout=nil)-class-method","html_id":"new(j=nil,w=nil,wtimeout=nil)-class-method","name":"new","doc":"Create a WriteConcern instance.","summary":"<p>Create a WriteConcern instance.</p>","abstract":false,"args":[{"name":"j","doc":null,"default_value":"nil","external_name":"j","restriction":""},{"name":"w","doc":null,"default_value":"nil","external_name":"w","restriction":""},{"name":"wtimeout","doc":null,"default_value":"nil","external_name":"wtimeout","restriction":""}],"args_string":"(j = <span class=\"n\">nil</span>, w = <span class=\"n\">nil</span>, wtimeout = <span class=\"n\">nil</span>)","source_link":null,"def":{"name":"new","args":[{"name":"j","doc":null,"default_value":"nil","external_name":"j","restriction":""},{"name":"w","doc":null,"default_value":"nil","external_name":"w","restriction":""},{"name":"wtimeout","doc":null,"default_value":"nil","external_name":"wtimeout","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(j, w, wtimeout)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"j:Bool?-instance-method","html_id":"j:Bool?-instance-method","name":"j","doc":"The *j* option requests acknowledgment from MongoDB that the write operation has been written to the on-disk journal.","summary":"<p>The <em>j</em> option requests acknowledgment from MongoDB that the write operation has been written to the on-disk journal.</p>","abstract":false,"args":[],"args_string":" : Bool?","source_link":null,"def":{"name":"j","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool | ::Nil","visibility":"Public","body":"@j"}},{"id":"j=(j:Bool?)-instance-method","html_id":"j=(j:Bool?)-instance-method","name":"j=","doc":"The *j* option requests acknowledgment from MongoDB that the write operation has been written to the on-disk journal.","summary":"<p>The <em>j</em> option requests acknowledgment from MongoDB that the write operation has been written to the on-disk journal.</p>","abstract":false,"args":[{"name":"j","doc":null,"default_value":"","external_name":"j","restriction":"Bool | ::Nil"}],"args_string":"(j : Bool?)","source_link":null,"def":{"name":"j=","args":[{"name":"j","doc":null,"default_value":"","external_name":"j","restriction":"Bool | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@j = j"}},{"id":"to_bson(bson=BSON.new)-instance-method","html_id":"to_bson(bson=BSON.new)-instance-method","name":"to_bson","doc":"Converts to a BSON representation.\n\n```\nuser = User.new name: \"John\"\nbson = user.to_bson\n```","summary":"<p>Converts to a BSON representation.</p>","abstract":false,"args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"args_string":"(bson = <span class=\"t\">BSON</span>.<span class=\"k\">new</span>)","source_link":null,"def":{"name":"to_bson","args":[{"name":"bson","doc":null,"default_value":"BSON.new","external_name":"bson","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n      {% global_options = @type.annotations(BSON::Options) %}\n      {% camelize = global_options.reduce(false) do |_, a|\n  a[:camelize]\nend %}\n      {% for ivar in @type.instance_vars %}\n        {% ann = ivar.annotation(BSON::Field) %}\n        {% typ = ivar.type.union_types.select do |t|\n  t != Nil\nend[0] %}\n        {% key = ivar.name %}\n        {% bson_key = ann ? ann[:key].id : camelize ? ivar.name.camelcase(lower: camelize == \"lower\") : ivar.name %}\n        {% if ann && ann[:ignore] %}{% else %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            unless self.{{ key }}.nil?\n          {% end %}\n            {% if typ.has_method?(:to_bson) %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}.try &.to_bson\n            {% else %}\n              bson[\"{{ bson_key }}\"] = self.{{ key }}\n            {% end %}\n          {% if ann && ann[:emit_null] %}{% else %}\n            end\n          {% end %}\n        {% end %}\n      {% end %}\n      {% end %}\nbson\n"}},{"id":"w:Int32|String|Nil-instance-method","html_id":"w:Int32|String|Nil-instance-method","name":"w","doc":"The *w* option requests acknowledgment that the write operation has propagated to a specified number of mongod instances or to mongod instances with specified tags.","summary":"<p>The <em>w</em> option requests acknowledgment that the write operation has propagated to a specified number of mongod instances or to mongod instances with specified tags.</p>","abstract":false,"args":[],"args_string":" : Int32 | String | Nil","source_link":null,"def":{"name":"w","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32 | String | ::Nil","visibility":"Public","body":"@w"}},{"id":"w=(w:Int32|String|Nil)-instance-method","html_id":"w=(w:Int32|String|Nil)-instance-method","name":"w=","doc":"The *w* option requests acknowledgment that the write operation has propagated to a specified number of mongod instances or to mongod instances with specified tags.","summary":"<p>The <em>w</em> option requests acknowledgment that the write operation has propagated to a specified number of mongod instances or to mongod instances with specified tags.</p>","abstract":false,"args":[{"name":"w","doc":null,"default_value":"","external_name":"w","restriction":"Int32 | String | ::Nil"}],"args_string":"(w : Int32 | String | Nil)","source_link":null,"def":{"name":"w=","args":[{"name":"w","doc":null,"default_value":"","external_name":"w","restriction":"Int32 | String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@w = w"}},{"id":"wtimeout:Int64?-instance-method","html_id":"wtimeout:Int64?-instance-method","name":"wtimeout","doc":"This option specifies a time limit, in milliseconds, for the write concern. *wtimeout* is only applicable for w values greater than 1.","summary":"<p>This option specifies a time limit, in milliseconds, for the write concern.</p>","abstract":false,"args":[],"args_string":" : Int64?","source_link":null,"def":{"name":"wtimeout","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int64 | ::Nil","visibility":"Public","body":"@wtimeout"}},{"id":"wtimeout=(wtimeout:Int64?)-instance-method","html_id":"wtimeout=(wtimeout:Int64?)-instance-method","name":"wtimeout=","doc":"This option specifies a time limit, in milliseconds, for the write concern. *wtimeout* is only applicable for w values greater than 1.","summary":"<p>This option specifies a time limit, in milliseconds, for the write concern.</p>","abstract":false,"args":[{"name":"wtimeout","doc":null,"default_value":"","external_name":"wtimeout","restriction":"Int64 | ::Nil"}],"args_string":"(wtimeout : Int64?)","source_link":null,"def":{"name":"wtimeout=","args":[{"name":"wtimeout","doc":null,"default_value":"","external_name":"wtimeout","restriction":"Int64 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@wtimeout = wtimeout"}}],"macros":[],"types":[]}]}]}})